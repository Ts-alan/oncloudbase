@using Newtonsoft.Json
@using oncloud.Domain.Entities
@model  oncloud.Domain.Entities.Street
@{
    ViewBag.Title = "Review";
}

<script type="text/javascript">
    ymaps.ready(init);
    var myMap, myPlacemark, Arr = [[]], counterArr = 0, handlerRoute, currentRoute,
        firstPointRoute, endPointRoute, position, identifierForDelete = 0,
        increment = 1, tempData, tempDataFor3 = 5, objects, identifierForDelBallon = true, CoordinatesforFirstLoad,
        CountObjectInMap, transfercurrentRoute, massSegment = [], handlerSegment, countElementSegGlobal = new Object();
    countElementSegGlobal.length = 0, incForTab1 = 8, incForTab2 = 8;

    function init() {

        myMap = new ymaps.Map("map", {
            center: [53.9172, 27.5601],
            zoom: 11,
            controls: []
        });

        myMap.behaviors.disable(["dblClickZoom"]);
        myMap.controls.add(
            new ymaps.control.TypeSelector(
                ['yandex#map', 'yandex#hybrid', 'yandex#satellite']
            )
        );
        ymaps.route([
                ['@Model.BreadthS', '@Model.LengthS'],
                ['@Model.BreadthE', '@Model.LengthE']
            ],
            {
                mapStateAutoApply: true,
                removeViaPoints: true
            }
        ).then(
            function (route) {
                route.events.add('dragend', function (e) {
                    Arr[0] = [route.requestPoints[0][0].toString().substr(0, 7), route.requestPoints[0][1].toString().substr(0, 7)];
                    Arr[1] = [route.requestPoints[1][0].toString().substr(0, 7), route.requestPoints[1][1].toString().substr(0, 7)];
                });
                route.editor.start({
                    editWayPoints: true
                });

                var points = route.getWayPoints();
                points.get(0).properties.set("iconContent", "Начало улицы");

                points.get(0).options.set('preset', 'islands#darkGreenStretchyIcon');


                points.get(1).properties.set("iconContent", "Конец улицы");

                points.get(1).options.set("preset", "islands#darkGreenStretchyIcon");

                route.getPaths().options.set({

                    //можно выставить настройки графики маршруту
                    strokeColor: '0000ffff',
                    opacity: 0.9
                });
                currentRoute = route;

                route.getPaths().options.set({
                    //можно выставить настройки графики маршруту
                    strokeColor: '0000ffff',
                    opacity: 0.9,
                    strokeWidth: 4,
                    mapStateAutoApply: true
                });

                //нужно для масшатабирования

                myMap.geoObjects.add(route);
                myMap.geoObjects.remove(route);

                myMap.geoObjects.add(route.getPaths());
                identifierForDelete = 0;
                var DataOfSegment = JSON.parse('@Html.Raw(JsonConvert.SerializeObject(Model.Segment.Select(a=>new {a.LengthS,a.LengthE,a.BreadthE,a.BreadthS,a.ChangeDislocationTCODD,IdSegment= a.layoutDislocation.Select(b=>b.Id).SingleOrDefault()})
                                                , Formatting.None,
                    new JsonSerializerSettings() {
                        ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Ignore
                }))');
                var DataOfRoadSings = JSON.parse('@Html.Raw(JsonConvert.SerializeObject(Model.SpecificationofRS.Select(a=>new {a.CountRS,a.Segment.Name,a.RoadSigns.NumberRoadSigns})
                                                , Formatting.None,
                    new JsonSerializerSettings() {
                        ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Ignore
                    }))');
                var DataOfRoadBarriers = JSON.parse('@Html.Raw(JsonConvert.SerializeObject(Model.SpecificationOfRb.Select(a => new {a.Segment.Name, a.Length, a.RoadBarriers.NumberBarriers})
                                                          , Formatting.None,
                                                          new JsonSerializerSettings()
                                                          {
                                                              ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Ignore
                                                          }))');


                var balContent;
                var setSegment = function (i) {
                    balContent = " <a type='button' href='#'  onclick='setTCODD(this)' data-toggle='modal' IdSegment=" + i + " data-target='#layoutDislocation' >Посмотреть дислокацию ТСОДД</a> <br>" +
                        "<a data-toggle='modal' onclick='setRoasSings(this)'  IdSegment=" + i + " data-target='#ModalTableRoadSigns' href='#'>Просмотреть спецификацию знаков</a></br>" +
                        "<a data-toggle='modal' onclick='setRoadBarriers(this)' data-target='#TableRoadBarriers' IdSegment=" + i + " href='#'>Посмотреть спецификацию дорожных ограждений</a></br>";
                    if (DataOfSegment[i].ChangeDislocationTCODD == true)
                    {
                        balContent += "<a data-toggle='modal' data-target='#modalStatic' onclick='setSegmentChange(this)' IdSegment=" + i + " href='#'>Просмотр информации о необходимых изменениях</a>";
                    }
                    var segment = new ymaps.GeoObject({
                        geometry: {
                            type: "Point", // тип геометрии - точка
                            coordinates: [DataOfSegment[i].BreadthE, DataOfSegment[i].LengthE] // координаты точки

                        },
                        properties: {
                            iconContent: increment,
                            balloonContentHeader: "Данные участка № " + (i + 1) + "",
                            balloonContent: balContent
                        }
                    },
                    {
                        preset: "islands#grayCircleIcon"

                    });
                    if (DataOfSegment[i].ChangeDislocationTCODD == true) {

                        segment.options.set("preset", "islands#redCircleIcon");
                    }
                    myMap.geoObjects.add(segment);

                    massSegment[increment - 1] = myMap.geoObjects.indexOf(segment);
                    increment++;
                }


                for (var i = 0; i < "@Model.Segment.Count"; i++) {
                    setSegment(i);
                }
                var MassLD = JSON.parse('@Html.Raw(JsonConvert.SerializeObject(ViewBag.layoutDislocation))');
             
                for (var j = 0; j < MassLD.length; j++) {
                    $('#changeColorDislocation' + MassLD[j] + '').removeClass("btn-default");
                    $('#changeColorDislocation' + MassLD[j] + '').addClass("btn-danger");
                    if (myMap.geoObjects.get(massSegment[MassLD[j] - 1]).options._Bm.preset != "islands#redCircleIcon")
                        myMap.geoObjects.get(massSegment[MassLD[j]-1]).options.set("preset", "islands#blueCircleIcon");
                }

                var multiplicity, incrementMul = 0;
                for (var i = 0; i < DataOfRoadSings.length; i++) {
                    if (multiplicity != undefined) {
                        if (multiplicity == DataOfRoadSings[i].Name.toString() + "ModalC" + DataOfRoadSings[i].NumberRoadSigns.toString()) {
                            incrementMul++;
                        } else {
                            incrementMul = 0;
                        }
                    }
                    multiplicity = DataOfRoadSings[i].Name.toString() + "ModalC" + DataOfRoadSings[i].NumberRoadSigns.toString();
                    $("[name='" + DataOfRoadSings[i].Name.toString() + "ModalC" + DataOfRoadSings[i].NumberRoadSigns.toString() + "']").eq(incrementMul)
                        .attr("value", DataOfRoadSings[i].CountRS);

                }
                for (var i = 0; i < DataOfRoadBarriers.length; i++) {
                    $("[name='" + DataOfRoadBarriers[i].Name.toString() + "RoadBarriers" + DataOfRoadBarriers[i].NumberBarriers.toString() + "']")
                        .attr("value", DataOfRoadBarriers[i].Length);
                }
            });
    }

    $(document).ready(function () {

        $(".tableHF").each(function(index, element) {
            $(element).tableHeadFixer();
        });
           
        
        tableToGrid("#table1", {
            cmTemplate: { "resizable": false, sortable: false }
        });
        tableToGrid("#table2", {
            cmTemplate: { "resizable": false, sortable: false }
        });
        tableToGrid("#table3", {
            cmTemplate: { "resizable": false, sortable: false }
        });

        //слайдер опции
        $('.carouselTCODD').carousel({
            interval: false

        });

        $('.RoadSignsItems').carousel({
            interval: false

        });

        $('.RoadBarriersItems').carousel({
            interval: false

        });
        //перелистование слайдера при нажатии на клавиши
        $("#layoutDislocation").on('keyup', function (e) {
            if (e.which == 39) {
                $("#carousel-example-generic .carousel-control.right").trigger('click');
            }
            else if (e.which == 37) {
                $("#carousel-example-generic .carousel-control.left").trigger('click');
            }
        });
        $("#ModalTableRoadSigns").on('keyup', function (e) {
            if (e.which == 39) {
                $("#carousel-example-generic1 .carousel-control.right").trigger('click');
            }
            else if (e.which == 37) {
                $("#carousel-example-generic1 .carousel-control.left").trigger('click');
            }
        });

        $("#TableRoadBarriers").on('keyup', function (e) {
            if (e.which == 39) {
                $("#carousel-example-generic2 .carousel-control.right").trigger('click');
            }
            else if (e.which == 37) {
                $("#carousel-example-generic2 .carousel-control.left").trigger('click');
            }
        });
    });

    function setTCODD(object) {
        $(".TCODD").each(function (indx, element) {
            $(element).removeClass("active");
        });
        $(".TCODD").eq(parseInt($(object).attr("idSegment")) + 1).addClass("active");

    }

    function setRoasSings(object) {
        $(".RoadSignsItem").each(function (indx, element) {
            $(element).removeClass("active");
        });

        $(".RoadSignsItem").eq($(object).attr("IdSegment")).addClass("active");
    }
    function setRoadBarriers(object) {
        $(".RoadBarriersItem").each(function (indx, element) {
            $(element).removeClass("active");
        });

        $(".RoadBarriersItem").eq($(object).attr("IdSegment")).addClass("active");
    }

    function setSegmentChange(object) {
        var id = parseInt($(object).attr("IdSegment")) + 1;
        var obj = @Html.Raw(ViewBag.jsonStreet);
        var segmentString = obj[id-1].segmentString;
        var finalString = "";
        finalString = "Участок №" + id + " нуждается в изменении. </br>";
        if (segmentString != null && segmentString != "")
        {
            finalString += segmentString;
        }
        else
        {
            finalString += "Дополнительная информация не указана.";
        }

        $("#changingSegment").html(finalString);
    }

</script>
<style>
    .btn {
        width: 250px;
        margin-top: 5px;
    }

</style>
<h2 style="text-align: center">ПРОСМОТР ДАННЫХ УЛИЦЫ</h2>



<!-- Modal -->
<div class="modal fade" id="modalStatic" tabindex="-1" role="dialog" aria-labelledby="myModalLabel">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                <h4 class="modal-title" id="myModalLabel">Информация об изменениях участка</h4>
            </div>
            <div class="modal-body">

                <div id ="changingSegment"> </div>

            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal">Закрыть</button>
            </div>
        </div>
    </div>
</div>



<div class="row" id ="firstTable">
    <div class="form-group col-lg-7 col-md-7 col-sm-7 col-xs-7">
        <div id="map" style="height: 400px;"></div>
    </div>
    <div class="form-group col-lg-5 col-md-5 col-sm-5 col-xs-5">
        <div>
            <b><u>1. Место расположения</u></b><br>
            <span id="CityStreet">г. @Model.City.Name  @Model.Name</span>
</div>
        <div><p><b><u>2. Количество участков-  </u></b>@Model.Segment.Count</p></div>
        <div>
            <b>
                <u>
                    3. Количество участков подлежащих редактированию-
                </u>
            </b>
            @if (Model.Segment.Any(a => a.ChangeDislocationTCODD))
            {
                @Model.Segment.Where(a => a.ChangeDislocationTCODD).Count();
            }
            else
            {
                @: 0
            }
        </div>
        <div>
            <button style="display: block" type="button" class="btn btn-default" onclick="setTCODD(this)" IdSegment="-1" data-toggle="modal" data-target="#layoutDislocation">
                Просмотр компоновочной схемы
            </button>
        </div>
        <div style="">
            <h3 id='gview_text2'>Спецификация дорожных знаков</h3>
            <table id="table2">
                <tr>
                    <th>№ знака</th>
                    <th>Количество</th>
                </tr>
                @foreach (var item in Model.SpecificationofRS.GroupBy(a => new {a.RoadSigns.NumberRoadSigns}).OrderBy(a =>
                {
                    return int.Parse(a.Key.NumberRoadSigns.Substring(0, a.Key.NumberRoadSigns.IndexOf(".")).Replace(".", ","));
                })
                    .ThenBy(a =>
                    {
                        if (a.Key.NumberRoadSigns.IndexOf(".", a.Key.NumberRoadSigns.IndexOf(".") + 1) == -1)
                        {
                            return int.Parse(a.Key.NumberRoadSigns.Substring(a.Key.NumberRoadSigns.IndexOf(".") + 1));
                        }
                        else
                        {
                            return int.Parse(a.Key.NumberRoadSigns.Substring(a.Key.NumberRoadSigns.IndexOf(".") + 1,
                                (a.Key.NumberRoadSigns.IndexOf(".", a.Key.NumberRoadSigns.IndexOf(".") + 1) - a.Key.NumberRoadSigns.IndexOf(".")) - 1));
                        }
                    })
                    )
                {
                    <tr>
                        <td>@item.Key.NumberRoadSigns</td>
                        <td>@item.Sum(a => a.CountRS)</td>
                    </tr>
                }
                <tr>
                    <td><b>Итого</b></td>
                    <td>@Model.SpecificationofRS.Sum(a => a.CountRS)</td>
                </tr>
            </table>
            <button type="button" class="btn btn-default" style="margin-top: 5px" onclick="printTable('#gview_table2', '#gview_text2')">Печать</button>
            <button type="button" class="btn btn-default" data-toggle="modal" data-target="#ModalRoadSigns">Просмотр дорожных знаков</button>
        </div>

    </div>
</div>

<div class="row">
    <div class="col-md-5">
        <h3 id="gview_text1">Спецификация дорожной разметки</h3>

        <table id="table1">
            <tr>
                <th>№ разметки</th>
                <th>Длина (м.пог) / штуки</th>
                <th>Площадь (м.кв)</th>
            </tr>
            @foreach (var item in Model.SpecificationofRM)
            {
                <tr>
                    <td>@item.TheHorizontalRoadMarking.NumberMarking</td>
                    <td>@item.length</td>
                    <td>@item.area</td>
                </tr>
            }
            <tr>
                <td><b>Итого</b></td>
                <td>@Model.SpecificationofRM.Sum(a => Double.Parse(a.length==""?"0":a.length.Replace(".",",")))</td>
                <td>@Model.SpecificationofRM.Sum(a => Double.Parse(a.area==""?"0":a.area.Replace(".", ",")))</td>
            </tr>
        </table>
        <button type="button" class="btn btn-default" style="margin-top: 5px" onclick="printTable('#gview_table1', '#gview_text1')">Печать</button>
        <button type="button"  class="btn btn-default" data-toggle="modal" data-target="#ModalMackUp">Просмотр дорожной разметки</button>
    </div>

    <div class="col-md-5 col-md-offset-2">
        <h3 id="gview_text3">Спецификация дорожных ограждений</h3>
        <table id="table3">
            <tr>
                <th>Описание</th>
                <th>Погонные метры</th>
            </tr>
            @foreach (var item in Model.SpecificationOfRb.GroupBy(a => new {a.RoadBarriers.NumberBarriers, a.RoadBarriers.Description}))
            {
                <tr>
                    <td>@item.Key.Description</td>
                    <td>@item.Sum(a => a.Length)</td>

                </tr>
            }
            <tr>
                <td><b>Итого</b></td>
                <td>@Model.SpecificationOfRb.Sum(a => a.Length)</td>
            </tr>
        </table>
        <button type="button" class="btn btn-default" style="margin-top: 5px" onclick="printTable('#gview_table3', '#gview_text3')">Печать</button>
        <button type="button" class="btn btn-default" data-toggle="modal" data-target="#RoadBarriers">Просмотр дорожных ограждений</button>
    </div>
</div>
<div style="clear: both">

</div>

@*Модальные окна*@
 <!-- ModalMackUp -->
<div class="modal fade" id="ModalMackUp" tabindex="-1" role="dialog" data-backdrop="false" aria-labelledby="myModalLabel">
    <div class="modal-dialog" style="width: 1000px;" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <div style="text-align: right">
                    <img data-dismiss="modal"  aria-label="Close" style="width: 100px; height: 16px" src="../../Content/images/save.jpg"/>
                    <img data-dismiss="modal"  aria-label="Close" style="width: 100px; height: 16px" src="../../Content/images/close.jpg"/>
                </div>
                <h4 class="modal-title" id="myModalLabel">
                    Спецификация горизонтальной дорожной разметки
                    <p>по ул. <span class="text">_________________</span> в г. Минске
                </h4>

            </div>
            <div class="modal-body" style="height: 640px">
                <div id="container" style="height: 530px; overflow-y: scroll">
                    <table class="tableHF table table-bordered">
                        <thead>
                            <tr>
                                <th style="width: 101px;">№ разметки</th>
                                <th style="width: 241px;">Картинка</th>
                                <th style="width: 180px">Описание</th>
                                <th style="width: 117px">Длина (м.пог) / штуки</th>
                                <th style="width: 157px">Площадь (м.кв)</th>
                            </tr>
                        </thead>
                        <tbody style="height: 640px; overflow: auto">
                        @{
                            List<TheHorizontalRoadMarking> mkg = ViewBag.RoadMarking;
                            List<SpecificationofRM> srm = ViewBag.SpecificationofRM;
                        }
                        @foreach (var mark in mkg)
                        {
                            <tr>
                                <td style="vertical-align: middle; width: 100px; padding: 0px; height: 115px">@mark.NumberMarking</td>
                                <td style="width: 241px;">
                                    @{
                                        var base64 = Convert.ToBase64String(mark.ImageData);
                                        var imgSrc = String.Format("data:image/gif;base64,{0}", base64);
                                    }
                                    <img src="@imgSrc" style="height: 100px; width: 230px"/>
                                </td>
                                <td style="width: 180px">@mark.description</td>
                                @{
                                    var ll = srm.FirstOrDefault(x => x.TheHorizontalRoadMarkingId == mark.id);
                                    string llength = ll == null ? "" : ll.length.ToString();
                                }
                                <td style="vertical-align: middle; width: 117px">@llength</td>
                                @{
                                    var a = srm.FirstOrDefault(x => x.TheHorizontalRoadMarkingId == mark.id);
                                    string area = a == null ? "" : a.area.ToString();
                                }
                                <td style="vertical-align: middle; width: 157px">@area</td>
                            </tr>
                        }
                        </tbody>

                    </table>
                </div>
            </div>

        </div>
    </div>
</div>


<!-- ModalRoadSigns -->
<div class="modal fade" id="ModalRoadSigns" tabindex="-1" role="dialog" data-backdrop="false" aria-labelledby="myModalLabel">
    <div class="modal-dialog" role="document">
        <div class="modal-content" style="width: 800px;">
            <div class="modal-header">
                <div style="text-align: right">
                    <img class="buttonSave" data-dismiss="modal"  aria-label="Close" style="width: 100px; height: 16px" src="../../Content/images/save.jpg" />
                    <img class="buttonclose" data-dismiss="modal"  aria-label="Close" style="width: 100px; height: 16px" src="../../Content/images/close.jpg" />
                </div>

                <h4 class="modal-title" id="myModalLabel">
                    Спецификация дорожных знаков
                    <p>по ул. <span class="text">_________________</span> в г. Минске
                </h4>
            </div>
            <div class="modal-body " style="height: 800px">

                <div style="height: 700px;overflow-y:scroll">
                    <table class="tableHF table table-bordered">
                        <thead>
                            <tr>
                                <th style="width: 187px; border: 1px solid #ddd !important;">№ знака</th>
                                <th style="width: 117px; border: 1px solid #ddd !important;">Картинка</th>
                                <th style="width: 150px; border: 1px solid #ddd !important;">Описание</th>
                                <th style="width: 192px; border: 1px solid #ddd !important;">Количество</th>

                            </tr>
                        </thead>
                        <tbody>
                        @{
                            List<RoadSigns> signs = ViewBag.RoadSigns;
                            List<RoadSigns> distinctedSigns = signs.Distinct().ToList();
                        }
                        @foreach (var sign in distinctedSigns)
                        {
                            <tr>
                                <td style="vertical-align: middle; width: 185px; height: 115px">@sign.NumberRoadSigns</td>
                                <td style="width: 117px; height: 115px">
                                    @{
                                        var base64 = Convert.ToBase64String(sign.ImageData);
                                        var imgSrc = String.Format("data:image/gif;base64,{0}", base64);
                                    }
                                    <img src="@imgSrc" style="height: 100px; width: 100px"/>
                                </td>
                                <td style="width: 150px">@sign.Description</td>
                                <td style="vertical-align: middle; width: 192px">@signs.Count(x => x.id == sign.id)</td>

                            </tr>
                        }

                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>
<!-- RoadBarriers  -->
<div class="modal fade" id="RoadBarriers" tabindex="-1" role="dialog" data-backdrop="false" aria-labelledby="myModalLabel">
    <
    <div class="modal-dialog" role="document">
        <div class="modal-content" style="width: 800px;">
            <div class="modal-header">
                <div style="text-align: right">
                    <img class="buttonSave" data-dismiss="modal"  aria-label="Close" aria-label="Close" style="width: 100px; height: 16px" src="../../Content/images/save.jpg"/>
                    <img class="buttonclose" data-dismiss="modal"  aria-label="Close" style="width: 100px; height: 16px" src="../../Content/images/close.jpg"/>
                </div>

                <h4 class="modal-title" id="myModalLabel">
                    Спецификация дорожных ограждений
                    <p>по ул. <span class="text">_________________</span> в г. Минске
                </h4>
            </div>
            <div class="modal-body " style="height: 800px; overflow: auto;">

                <div style="height: 700px; overflow-y: scroll">
                    <table class="tableHF table table-bordered">
                        <thead>
                            <tr>
                                <th style="width: 187px">№ </th>
                                <th style="width: 170px">Картинка</th>
                                <th style="width: 180px">Описание</th>
                                <th style="width: 258px">Погонные метры</th>
                            </tr>
                        </thead>
                        <tbody>
                        @{
                            List<RoadBarriers> brs = ViewBag.RoadBarriers;
                            List<RoadBarriers> distinctedBarriers = brs.Distinct().ToList();
                            List<SpecificationOfRb> srs = ViewBag.SpecificationOfRb;
                        }
                        @foreach (var bar in distinctedBarriers)
                        {
                            <tr>
                                <td style="vertical-align: middle; width: 187px;"><input type="text" class="FindRoadBarriers">@bar.NumberBarriers</td>
                                <td style="width: 170px;">
                                    @{

                                        string base64 = null;
                                        string imgSrc = null;
                                        if (bar.ImageData != null)
                                        {
                                            base64 = Convert.ToBase64String(bar.ImageData);
                                            imgSrc = String.Format("data:image/jpeg;base64,{0}", base64);
                                            <img src="@imgSrc" style="height: 100px; width: 100px"/>
                                        }
                                    }

                                </td>
                                <td style="width: 180px">@bar.Description</td>
                                @{
                                    var l = srs.SingleOrDefault(x => x.RoadBarriersId.ToString() == bar.NumberBarriers);

                                    string length = l == null ? "" : l.Length.ToString();
                                }
                                <td style="vertical-align: middle; width: 258px">@length</td>
                            </tr>
                        }
                        </tbody>
                    </table>
                </div>
            </div>

        </div>
    </div>
</div>
<div class="modal fade" id="layoutDislocation" tabindex="-1" role="dialog" aria-labelledby="myModalLabel">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header" style="border-width: 0px">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>

            </div>
            <div class="modal-body">
                <div id="carousel-example-generic" class="carouselTCODD slide">
                    <!-- Indicators -->
                    <ol class="carousel-indicators">
                        @for (int i = 0; i < Model.Segment.Count + 1; i++)
                        {
                            <li data-target="#carousel-example-generic" data-slide-to="@i"></li>
                        }
                    </ol>

                    <!-- Wrapper for slides -->
                    <div class="carousel-inner"  role="listbox">
                        <div class="item TCODD">
                            @if (Model.layoutScheme != null)
                            {
                                <h3 style="color: black; text-align: center">
                                    Компоновочная схема
                                </h3>
                                <br>
                                <img  src="@Url.Action("GetImageLayoutScheme", "Home", new {id = Model.layoutScheme.Id})" />
                            }
                            else
                            {
                                <h3 style="color: black;text-align: center">Компоновочная схема не загружена</h3>
                            }
                            <div class="carousel-caption">

                            </div>
                        </div>
                        @for (int i = 0; i < Model.Segment.Count; i++)
                        {
                            <div class="item TCODD">
                                <h3 style="color: black; text-align: center">
                                    г.Минск ул. @Model.Name<br>
                                    Дислокация ТСОДД участок @(i + 1)
                                </h3>
                                @if (Model.Segment.ElementAt(i).layoutDislocation.Any())
                                {

                                    <img id="TCODD" src="@Url.Action("LayoutDislocation", "Home", new {id = Model.Segment.ElementAt(i).layoutDislocation.SingleOrDefault().Id})" />
                                }
                                else
                                {
                                    <text>
                                        <h3 style="text-align: center">Дислокация ТСОДД не загружена</h3></text>
                                }
                                <div class="carousel-caption">

                                </div>
                            </div>
                        }
                    </div>
                      
                    <!-- Controls -->
                    <a class="left carousel-control" href="#carousel-example-generic" role="button" data-slide="prev">
                        <span class="glyphicon glyphicon-chevron-left" aria-hidden="true"></span>
                        <span class="sr-only">Previous</span>
                    </a>
                    <a class="right carousel-control" href="#carousel-example-generic" role="button" data-slide="next">
                        <span class="glyphicon glyphicon-chevron-right" aria-hidden="true"></span>
                        <span class="sr-only">Next</span>
                    </a>
                </div>




            </div>
            <div class="modal-footer" style="border-width: 0px">
                <button type="button" class="btn btn-default" onclick="printPicture('.TCODD')">Печать</button>
            </div>
        </div>
    </div>
</div>
<!-- ModalTableRoadSigns -->
<div class="modal fade" id="ModalTableRoadSigns" tabindex="-1" role="dialog" data-backdrop="false" aria-labelledby="myModalLabel">
    <div class="modal-dialog" role="document">
        <div class="modal-content" style="width: 800px">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>

            </div>
            <div class="modal-body">
                <div id="carousel-example-generic1" class="RoadSignsItems carousel  slide">
                    <!-- Indicators -->
                    <ol class="carousel-indicators">
                        @for (int i = 0; i < Model.Segment.Count; i++)
                        {
                            <li data-target="#carousel-example-generic1" data-slide-to="@i"></li>
                        }
                    </ol>

                    <!-- Wrapper for slides -->

                    <div class="carousel-inner" style="height: 700px;" role="listbox">
                        
                            @for (int i = 0; i < Model.Segment.Count; i++)
                            {
                                <div class="item RoadSignsItem" style="padding-left: 114px; padding-right: 114px;">
                                    <h3 style="color: black; text-align: center">
                                        г.Минск ул. @Model.Name<br>
                                        Спецификация дорожных знаков участок @(i + 1)
                                    </h3>
                                    <div style="overflow-x: auto">
                                        <table class="RoadSignsTable@(i + 1) table table-bordered">
                                            <tr>
                                                <th>№ знака</th>
                                                <th>Количество</th>
                                            </tr>
                                            @foreach (var item in Model.SpecificationofRS.Where(a => a.Segment.Name == (i + 1)))
                                            {
                                                <tr>
                                                    <td>@item.RoadSigns.NumberRoadSigns</td>
                                                    <td>@item.CountRS</td>
                                                </tr>
                                            }
                                            <tr>
                                                <td><b>Итого</b></td>
                                                <td>@Model.SpecificationofRS.Where(a => a.Segment.Name == (i + 1)).Sum(a => a.CountRS)</td>
                                            </tr>
                                        </table>

                                    </div>
                                        <div class="carousel-caption">

                                    </div>
                                </div>
                            }
                        
                    </div>
                    <!-- Controls -->
                    <a class="left carousel-control" href="#carousel-example-generic1" role="button" data-slide="prev">
                        <span class="glyphicon glyphicon-chevron-left" aria-hidden="true"></span>
                        <span class="sr-only">Previous</span>
                    </a>
                    <a class="right carousel-control" href="#carousel-example-generic1" role="button" data-slide="next">
                        <span class="glyphicon glyphicon-chevron-right" aria-hidden="true"></span>
                        <span class="sr-only">Next</span>
                    </a>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default buttonclose" onclick="printPicture('.RoadSignsItem')">Печать</button>
            </div>
        </div>
    </div>
</div>
<!-- TableRoadBarriers  -->
<div class="modal fade" id="TableRoadBarriers" tabindex="-1" role="dialog" data-backdrop="false" aria-labelledby="myModalLabel">
    <div class="modal-dialog" style="width: 1000px" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
            </div>
            <div class="modal-body">
                <div id="carousel-example-generic2" class="RoadBarriersItems slide">
                    <!-- Indicators -->
                    <ol class="carousel-indicators">
                        @for (int i = 0; i < Model.Segment.Count; i++)
                        {
                            <li data-target="#RoadBarriers" data-slide-to="@i"></li>
                        }
                    </ol>

                    <!-- Wrapper for slides -->
                    <div class="carousel-inner" style=" " role="listbox">
                        @for (int i = 0; i < Model.Segment.Count; i++)
                        {
                            <div class="item RoadBarriersItem" style ="padding-left: 147px; padding-right: 147px; overflow: auto;">
                                <h3 style="color: black; text-align: center">
                                    г.Минск ул. @Model.Name<br>
                                    Спецификация дорожных ограждений участок @(i + 1)
                                </h3>
                                <div style="overflow-x: auto">
                                    <table class="RoadSignsTable@(i + 1) table table-bordered">
                                        <tr>
                                            <th>№ знака</th>
                                            <th>Количество</th>
                                        </tr>
                                        @foreach (var item in Model.SpecificationOfRb.Where(a => a.Segment.Name == (i + 1)))
                                        {
                                            <tr>
                                                <td>@item.RoadBarriers.NumberBarriers</td>
                                                <td>@item.Length</td>
                                            </tr>
                                        }
                                        <tr>
                                            <td><b>Итого</b></td>
                                            <td>@Model.SpecificationOfRb.Where(a => a.Segment.Name == (i + 1)).Sum(a => a.Length)</td>
                                        </tr>
                                    </table>
                                </div>
                                <div class="carousel-caption">

                                </div>
                            </div>
                        }
                    </div>

                    <!-- Controls -->
                    <a class="left carousel-control" href="#carousel-example-generic2" role="button" data-slide="prev">
                        <span class="glyphicon glyphicon-chevron-left" aria-hidden="true"></span>
                        <span class="sr-only">Previous</span>
                    </a>
                    <a class="right carousel-control" href="#carousel-example-generic2" role="button" data-slide="next">
                        <span class="glyphicon glyphicon-chevron-right" aria-hidden="true"></span>
                        <span class="sr-only">Next</span>
                    </a>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" id="closeModalMackUp" class="btn btn-default buttonclose" onclick="printPicture('.RoadBarriersItem')">Печать</button>
            </div>
        </div>
    </div>
</div>
