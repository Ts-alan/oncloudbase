@using Newtonsoft.Json
@model  oncloud.Domain.Entities.Street
@{
    ViewBag.Title = "EditStreets";

}


<script type="text/javascript">
    ymaps.ready(init);
    var myMap, myPlacemark, Arr = [[]], counterArr = 0, handlerRoute, currentRoute,
        firstPointRoute, endPointRoute, position, identifierForDelete = 0,
        increment = 1, tempData, tempDataFor3 = 5, objects, identifierForDelBallon = true, CoordinatesforFirstLoad,
        CountObjectInMap, transfercurrentRoute, massSegment = [], handlerSegment, countElementSegGlobal = new Object();
    countElementSegGlobal.length = 0;

    function init() {

        myMap = new ymaps.Map("map", {
            center: [53.9172, 27.5601],
            zoom: 11,
            controls: []
        });

        myMap.behaviors.disable(["dblClickZoom"]);

        ymaps.route([
                ['@Model.BreadthS', '@Model.LengthS'],
                ['@Model.BreadthE', '@Model.LengthE']
        ],
            {
                mapStateAutoApply: true,
                removeViaPoints: true
            }
        ).then(
             function (route) {
                 route.events.add('dragend', function (e) {
                     Arr[0] = [route.requestPoints[0][0].toString().substr(0, 7), route.requestPoints[0][1].toString().substr(0, 7)];
                     Arr[1] = [route.requestPoints[1][0].toString().substr(0, 7), route.requestPoints[1][1].toString().substr(0, 7)];
                 });
                 route.editor.start({
                     editWayPoints: true
                 });

                 var points = route.getWayPoints();
                 points.get(0).properties.set("iconContent", "Начало улицы");

                 points.get(0).options.set('preset', 'islands#darkGreenStretchyIcon');


                 points.get(1).properties.set("iconContent", "Конец улицы");

                 points.get(1).options.set("preset", "islands#darkGreenStretchyIcon");

                 route.getPaths().options.set({

                     //можно выставить настройки графики маршруту
                     strokeColor: '0000ffff',
                     opacity: 0.9
                 });
                 currentRoute = route;

                 route.getPaths().options.set({
                     //можно выставить настройки графики маршруту
                     strokeColor: '0000ffff',
                     opacity: 0.9,
                     strokeWidth: 4,
                     mapStateAutoApply: true
                 });

                 //нужно для масшатабирования
                 myMap.geoObjects.add(route);
                 myMap.geoObjects.remove(route);

                 myMap.geoObjects.add(route.getPaths());
                 identifierForDelete = 0;
                 var DataOfSegment = JSON.parse('@Html.Raw(JsonConvert.SerializeObject(Model.Segment.Select(a=>new {a.LengthS,a.LengthE,a.BreadthE,a.BreadthS,a.ChangeDislocationTCODD})
                                                , Formatting.None,
                    new JsonSerializerSettings() {
                        ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Ignore
                }))');
                 var DataOfRoadSings = JSON.parse('@Html.Raw(JsonConvert.SerializeObject(Model.SpecificationofRS.Select(a=>new {a.CountRS,a.Segment.Name,a.RoadSigns.NumberRoadSigns})
                                                , Formatting.None,
                    new JsonSerializerSettings() {
                        ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Ignore
                    }))');
                 var DataOfRoadBarriers = JSON.parse('@Html.Raw(JsonConvert.SerializeObject(Model.SpecificationOfRb.Select(a => new {a.Segment.Name, a.Length, a.RoadBarriers.NumberBarriers})
                                                          , Formatting.None,
                                                          new JsonSerializerSettings()
                                                          {
                                                              ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Ignore
                                                          }))');



                 var setSegment = function (i) {

                     var segment = new ymaps.GeoObject({
                         geometry: {
                             type: "Point", // тип геометрии - точка
                             coordinates: [DataOfSegment[i].BreadthE, DataOfSegment[i].LengthE] // координаты точки

                         },
                         properties: {
                             iconContent: increment,
                             balloonContent: "[" + DataOfSegment[i].BreadthE + "," + DataOfSegment[i].LengthE + "]"
                         }
                     },
                                     {
                                         preset: "islands#blueCircleIcon",

                                     });
                     if (DataOfSegment[i].ChangeDislocationTCODD == true) {

                         segment.options.set("preset", "islands#redCircleIcon");
                     }
                     myMap.geoObjects.add(segment);
                     if (i != 0) {
                         $('[id^="ModalRoadSigns"]:last').after($('#ModalRoadSigns1').clone()
                                   .attr("id", "ModalRoadSigns" + (i + 1)).find(".buttonclose")
                                   .end().find("td input").each(function (ind, element) {
                                       $(element).attr("name", (i + 1).toString() + $(this).attr("name").substr($(this).attr("name").indexOf("M")));
                                   }).end());

                         $('[id^="RoadBarriers"]:last').after($('#RoadBarriers1').clone()
                             .attr("id", "RoadBarriers" + (i + 1)).find(".buttonclose")
                             .end()
                             .find("td input").each(function (ind, element) {
                                 $(element).attr("name", (i + 1).toString() + $(this).attr("name").substr($(this).attr("name").indexOf("R")));
                             }).end());
                     }
                     massSegment[increment - 1] = myMap.geoObjects.indexOf(segment);
                     increment++;
                 }

                 var multiplicity, incrementMul = 0;
                 for (var i = 0; i < DataOfRoadSings.length; i++) {
                     if (multiplicity != undefined) {
                         if (multiplicity == DataOfRoadSings[i].Name) {
                             incrementMul++;
                         } else {
                             incrementMul = 0;
                         }
                     }
                     multiplicity = DataOfRoadSings[i].Name;
                     $("[name='" + DataOfRoadSings[i].Name.toString() + "ModalC" + DataOfRoadSings[i].NumberRoadSigns.toString() + "']").eq(incrementMul)
                     .attr("value", DataOfRoadSings[i].CountRS);

                 }
                 for (var i = 0; i < "@Model.Segment.Count"; i++) {
                     setSegment(i);
                 }

             });




    }

    $(document).ready(function () {

        //отмена клавиши esc для модальных окон
        $('.modal').modal({
            keyboard: false,
            show: false
        });
        tableToGrid("#table1");
        tableToGrid("#table2");
        tableToGrid("#table3");
    });

</script>
<style>

    /*модальное окно*/
    .modal-dialog {
        width: 645px;
    }

    td input {
        border-width: 0;
        text-align: right !important;
    }
    /*правит шрифт бутсрапа*/
    label {
        font-weight: normal;
    }
    /*отступы*/
    .indentForTextBox {
        margin-right: 60px;
    }

    .btn {
        width: 285px;
    }
</style>
<h2 style="text-align: center">Просмотр данных улицы</h2>

<div class="row">
    <div class="form-group col-lg-7 col-md-7 col-sm-7 col-xs-7">
        <div id="map" style="height: 400px;"></div>
    </div>
    <div class="form-group col-lg-5 col-md-5 col-sm-5 col-xs-5">
        <h3>1. Место расположения</h3>
        <h4>г. @Model.City.Name  @Model.Name</h4>
        <h3>2. Количество участков- <span> @Model.Segment.Count</span></h3>
        <button style="margin-top: 230px" type="button" class="btn btn-default" data-toggle="modal" data-target="#LayoutScheme">
            Просмотр компоновочной схемы
        </button>
    </div>
</div>


<div style="float: left;width: 30%;">
    <h3>Спецификация дорожной разметки</h3>

    <table id="table1">
        <tr>
            <th>№ разметки</th>
            <th>Длина (м.пог) / штуки</th>
            <th>Площадь (м.кв)</th>
        </tr>
        @foreach (var item in Model.SpecificationofRM)
            {
            <tr>
                <td>@item.TheHorizontalRoadMarking.NumberMarking</td>
                <td>@item.length</td>
                <td>@item.area</td>
            </tr>
        }
        <tr>
            <td><b>Итого</b></td>
            <td></td>
            <td>@Model.SpecificationofRM.Sum(a => Double.Parse(a.area))</td>
        </tr>
    </table>

</div>
<div style="float: left;width: 30%;">
    <h3>Спецификация дорожных знаков</h3>
    <table id="table2">
        <tr>
            <th>№ знака</th>
            <th>Количество</th>
        </tr>
        @foreach (var item in Model.SpecificationofRS.GroupBy(a => new { a.RoadSigns.NumberRoadSigns }))
        {
            <tr>
                <td>@item.Key.NumberRoadSigns</td>
                <td>@item.Sum(a => a.CountRS)</td>
            </tr>
        }
        <tr>
            <td><b>Итого</b></td>
            <td>@Model.SpecificationofRS.Sum(a => a.CountRS)</td>
        </tr>
    </table>
</div>
<div style="float: left; width: 30%;">
    <h3>Спецификация дорожных ограждений</h3>
    <table id="table3">
        <tr>
            <th>Описание</th>
            <th>Погонные метры</th>
        </tr>
        @foreach (var item in Model.SpecificationOfRb.GroupBy(a =>new { a.RoadBarriers.NumberBarriers,a.RoadBarriers.Description}))
        {
            <tr>
                <td>@item.Key.Description</td>
                <td>@item.Sum(a => a.Length)</td>

            </tr>
        }
        <tr>
            <td><b>Итого</b></td>
            <td>@Model.SpecificationOfRb.Sum(a => a.Length)</td>
        </tr>
    </table>
</div>
<div style="clear: both">
    @*<h3>3.Просмотр данных участков</h3>
    <div class=" col-lg-4 col-md-4 col-sm-4 col-xs-4" style="float: left">
        <button type="button"  data-toggle="modal"  data-target="#layoutDislocation" class="btn btn-default">Посмотреть дислокацию ТСОДД</button>
      
    </div>
    <div class=" col-lg-4 col-md-4 col-sm-4 col-xs-4" style="float: left">
        <button type="button" class="btn btn-default" data-toggle="modal" data-target="#ModalRoadSigns1">Посмотреть данные о дорожных знаках</button>
    </div>
    <div class=" col-lg-4 col-md-4 col-sm-4 col-xs-4">
        <button type="button" class="btn btn-default" style="width: 330px" data-toggle="modal" data-target="#RoadBarriers1">
            Посмотреть данные о дорожных ограждениях
        </button>
    </div>*@
</div>
<!-- Modal -->
<div class="modal fade" id="LayoutScheme" tabindex="-1" role="dialog" aria-labelledby="myModalLabel">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                <h4 class="modal-title" id="myModalLabel">Компоновочная схема</h4>
            </div>
            <div class="modal-body">
                @try
                {
                    <img src="@Url.Action("GetImageLayoutScheme", "Home", new {id = Model.layoutScheme.Id})"/>
                }
                catch
                {
                    <h3>Компоновочная схема не загружена</h3>
                }
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal">Закрыть</button>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="layoutDislocation" tabindex="-1" role="dialog" aria-labelledby="myModalLabel">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                <h4 class="modal-title" id="myModalLabel">Компоновочная схема</h4>
            </div>
            <div class="modal-body">
                @try
                {
                    <img src="@Url.Action("LayoutDislocation", "Home", new {id = Model.layoutDislocation.Single(a=>a.Segment.Name==1)})" />
                }
                catch
                {
                    <h3>ислокацию ТСОДД не загружена</h3>
                }
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal">Закрыть</button>
            </div>
        </div>
    </div>
</div>