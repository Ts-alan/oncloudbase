
@{
    ViewBag.Title = "AddStreet";
}


<script type="text/javascript">
    ymaps.ready(init);
    var myMap, myPlacemark, Arr = [[]], counterArr = 0, handlerRoute, currentRoute, firstPointRoute,
        endPointRoute, position, identifierForDelete = 0, increment = 1, tempData, tempDataFor3 = 5,
        objects, identifierForDelBallon = true, CountObjectInMap, transfercurrentRoute,
        massSegment = [], handlerSegment, countElementSegGlobal = new Object(), incForTab1 = 8, incForTab2 = 8;
    countElementSegGlobal.length = 0;
    function init() {

        myMap = new ymaps.Map("map", {
            center: [53.9172, 27.5601],
            zoom: 11,
            controls: []
        });

        myMap.behaviors.disable(["dblClickZoom"]);
        myMap.controls.add(
                            new ymaps.control.TypeSelector(
                                ['yandex#map', 'yandex#hybrid', 'yandex#satellite']
                            )
        );


    }

    function SetRoute(Arr) {

        if (currentRoute != undefined) {
            myMap.geoObjects.remove(currentRoute);
            myMap.geoObjects.remove(currentRoute.getPaths());

        }
        ymaps.route([
                Arr[0],
                Arr[1]
        ],
            {
                mapStateAutoApply: true,
                removeViaPoints: true

            }
        ).then(
            function (route) {
                route.events.add('dragend', function (e) {

                    Arr[0] = [route.requestPoints[0][0].toString().substr(0, 7), route.requestPoints[0][1].toString().substr(0, 7)];
                    Arr[1] = [route.requestPoints[1][0].toString().substr(0, 7), route.requestPoints[1][1].toString().substr(0, 7)];
                });


                route.editor.start({
                    editWayPoints: true
                });

                var points = route.getWayPoints();
                points.get(0).properties.set("iconContent", "Начало улицы");
                points.get(0).properties.set("balloonContentHeader", "<a href='#' onclick='setHandlerS()'>Удалить Обьект</a>");
                points.get(0).options.set('preset', 'islands#darkGreenStretchyIcon');


                points.get(1).properties.set("iconContent", "Конец улицы");
                points.get(1).properties.set("balloonContentHeader", "<a href='#' onclick='setHandlerE()'>Удалить Обьект</a>");
                points.get(1).options.set("preset", "islands#darkGreenStretchyIcon");
                route.editor.events.add("routeupdate", function () {
                    $("#breadthS").val(route.requestPoints[0][0].toString().substr(0, 7));
                    $("#lengthS").val(route.requestPoints[0][1].toString().substr(0, 7));
                    $("#breadthE").val(route.requestPoints[1][0].toString().substr(0, 7));
                    $("#lengthE").val(route.requestPoints[1][1].toString().substr(0, 7));
                });

                route.getPaths().options.set({

                    //можно выставить настройки графики маршруту
                    strokeColor: '0000ffff',
                    opacity: 0.9
                });
                currentRoute = route;

                myMap.geoObjects.add(route);
                //удаление лишних обьектов
                myMap.geoObjects.remove(myPlacemark);
                myMap.geoObjects.remove(firstPointRoute);
                myMap.geoObjects.remove(endPointRoute);

                identifierForDelete = 0;
                //заполнение переменных
                $("#breadthS").val(Arr[0][0]);
                $("#lengthS").val(Arr[0][1]);
                $("#breadthE").val(Arr[1][0]);
                $("#lengthE").val(Arr[1][1]);
            },
            function (error) {
                alert("Возникла ошибка: " + error.message);
            });


    }

    //поиск
    function search() {

        if (myPlacemark != undefined) {

            myMap.geoObjects.remove(myPlacemark);
        }
        position = $("#city").val().toString() + " " + $("#street").val().toString();

        var myGeocoder = ymaps.geocode(position);

        myGeocoder.then(
            function (res) {

                myPlacemark = new ymaps.GeoObject({
                    geometry: {
                        type: "Point", // тип геометрии - точка
                        coordinates: [res.geoObjects.get(0).geometry.getCoordinates()[0], res.geoObjects.get(0).geometry.getCoordinates()[1]] // координаты точки
                    }
                },
                { draggable: true });
                myMap.geoObjects.add(myPlacemark);
                identifierForDelete++;
                myMap.setCenter([res.geoObjects.get(0).geometry.getCoordinates()[0], res.geoObjects.get(0).geometry.getCoordinates()[1]], 14);
            });

    }

    function Set() {

        if ($("#breadthS").val() != "" && $("#lengthS").val() != "" && $("#breadthE").val() && $("#lengthE").val()) {
            Arr = [[]];

            Arr[0] = [parseFloat($("#breadthS").val()), parseFloat($("#lengthS").val())];
            Arr[1] = [parseFloat($("#breadthE").val()), parseFloat($("#lengthE").val())];

            SetRoute(Arr);
        }
    }
    //удаление начальной точки
    function setHandlerS() {
        if (identifierForDelete == 0) {
            myMap.geoObjects.remove(currentRoute);
            myMap.geoObjects.remove(currentRoute.getPaths());
            endPointRoute = new ymaps.GeoObject({
                geometry: {
                    type: "Point", // тип геометрии - точка
                    coordinates: [Arr[1][0], Arr[1][1]] // координаты точки
                },
                properties: {
                    iconContent: "Конец улицы",
                    balloonContentHeader: "<a href='#' onclick='setHandlerE()'>Удалить Обьект</a>",
                    balloonContent: "[" + Arr[1][0] + "," + Arr[1][1] + "]"
                }
            },
            { draggable: true, preset: "islands#darkGreenStretchyIcon" });


            endPointRoute.events.add("dragend", function (e) {

                var coords = endPointRoute.geometry.getCoordinates();
                Arr[1] = [coords[0].toPrecision(6), coords[1].toPrecision(6)];
                //изменение координат при пертягивание метки
                var object = e.get('target');
                object.properties.set("balloonContent", "[" + coords[0].toPrecision(6) + "," + coords[1].toPrecision(6) + "]");

            });
            myMap.geoObjects.add(endPointRoute);
            myMap.events.add('dblclick', handlerRoute);
            identifierForDelete = 1;

        } else {
            myMap.geoObjects.remove(firstPointRoute);
            identifierForDelete = 0;
            counterArr = 0;
            Arr = [[]];


        }
        counterArr = 0;
    }
    //удаление конченой точки
    function setHandlerE() {

        if (identifierForDelete == 0) {
            myMap.geoObjects.remove(endPointRoute);
            myMap.geoObjects.remove(currentRoute);
            myMap.geoObjects.remove(currentRoute.getPaths());
            firstPointRoute.geometry.setCoordinates([Arr[0][0], Arr[0][1]]);
            myMap.geoObjects.add(firstPointRoute);
            myMap.events.add('dblclick', handlerRoute);
            counterArr = 1;
            identifierForDelete = 1;

        } else {
            myMap.geoObjects.remove(endPointRoute);
            identifierForDelete = 0;
            counterArr = 0;
            Arr = [[]];


        }

    }
    //задать координаты
    function SetCoords() {
        if ($("#blockStreet").css("display") == "none") {
            if (countElementSegGlobal.length == 0) {


                if (currentRoute != undefined) {
                    $("#blockStreetCoord").css("display", "inline");
                    myMap.geoObjects.add(currentRoute);
                    currentRoute.editor.start({ editWayPoints: true });

                    $("#blockStreetCoord").parent().prev().children("input").each(function (indx, element) {
                        $(element).removeAttr("readonly");

                    });

                    $("#blockStreetCoord").parent().prev().prev().prev().children("input").each(function (indx, element) {
                        $(element).removeAttr("readonly");
                    });

                } else {
                    handlerRoute = function (e) {

                        var coords = e.get('coords');
                        if (counterArr < 2) {
                            Arr[counterArr] = [coords[0].toPrecision(6), coords[1].toPrecision(6)];

                        }
                        if (counterArr == 0) {
                            firstPointRoute = new ymaps.GeoObject({
                                geometry: {
                                    type: "Point", // тип геометрии - точка
                                    coordinates: [Arr[0][0], Arr[0][1]] // координаты точки
                                },
                                properties: {
                                    iconContent: "Начало улицы",
                                    balloonContentHeader: "<a href='#' onclick='setHandlerS()'>Удалить Обьект</a>",
                                    balloonContent: "[" + coords[0].toPrecision(6) + "," + coords[1].toPrecision(6) + "]"
                                }
                            },
                            { draggable: true, preset: "islands#darkGreenStretchyIcon" });
                            firstPointRoute.events.add("dragend", function (e) {

                                var coords = firstPointRoute.geometry.getCoordinates();
                                Arr[0] = [coords[0].toPrecision(6), coords[1].toPrecision(6)];
                                //изменение координат при пертягивание метки
                                var object = e.get('target');
                                object.properties.set("balloonContent", "[" + coords[0].toPrecision(6) + "," + coords[1].toPrecision(6) + "]");

                            });

                            myMap.geoObjects.add(firstPointRoute);
                            identifierForDelete++;
                        }
                        counterArr++;

                        if (Arr.length == 2) {

                            SetRoute(Arr);
                            //задать несколько маршрутов
                            //Arr = [];
                            //counterArr = 0;
                            myMap.events.remove('dblclick', handlerRoute);

                        }
                    }

                    myMap.events.add('dblclick', handlerRoute);

                }
            } else {
                alert('Вы не можете редактировать улицу пока на нем находится хотя бы один участок');
            }
        } else {
            alert("Вы не выбрали или не сохранили улицу");
        }
    }
    //изменения цвета
    function setColorSegment(index, object) {
        if ($(object).val() == "true")
            myMap.geoObjects.get(massSegment[index - 1]).options.set("preset", "islands#redCircleIcon");
        else {
            myMap.geoObjects.get(massSegment[index - 1]).options.set("preset", "islands#blueCircleIcon");
        }
    }
    //удаление сегмента
    function deleteSegment(index) {
        
        countElementSegGlobal.length--;

        myMap.geoObjects.remove(myMap.geoObjects.get(massSegment[index - 1]));
        myMap.geoObjects.remove(myMap.geoObjects.get(massSegment[index - 1] - 1));

        for (var i = index - 1; i < massSegment.length; i++) {
            massSegment[i] = massSegment[i] - 2;
        };

        massSegment.splice(index - 1, 1);

        var j = 1;
        myMap.geoObjects.each(function (el, index) {

            for (var i = 0; i < massSegment.length; i++) {
                if (massSegment[i] == index) {


                    el.properties.set({
                        iconContent: j,
                        balloonContentHeader: "<a href='#' onclick='deleteSegment(" + j + ")'>Удалить Обьект</a>",
                    });
                    j++;
                };
            }

        });

        var countElement = $('[id^=segment]:has("*")');
     
        //удаление координат
        if (countElement.length != 1) {
            $("#segment" + index).html("");
            if (index != countElement.length&&index!=1) {
            $("#breadthSegS" + (index + 1) + "").attr("value", $("#breadthSegE" + (index - 1) + "").val());
            $("#lengthSegS" + (index + 1)).attr("value", $("#lengthSegE" + (index - 1)).val());
                
            }
          
        } else {
            $("#breadthSegS1").attr("value", "");
            $("#lengthSegS1").attr("value", "");
            $("#breadthSegE1").attr("value", "");
            $("#lengthSegE1").attr("value", "");
        }
      
        $('[id^=segment]').each(function (ind, domElement) {
          
            //изменение содержимого координат
            if ((ind + 1) >= index) {
            
                $(domElement).html($('[id="segment' + (ind + 2) + '"]')
                  .find("u").first().text("Координаты участка " + (ind + 1)).end().end()
                    .find("input").first().attr("id", "breadthSegS" + (ind + 1)).end().end()
                        .find("input").eq(1).attr("id", "lengthSegS" + (ind + 1)).end().end()
                            .find("input").eq(2).attr("id", "breadthSegE" + (ind + 1)).end().end()
                                .find("input").last().attr("id", "lengthSegE" + (ind + 1)).end().end().children());
            }
            if ($('[id^=segment]').length == (ind + 1) && (countElement.length - 5) % 3 == 0 && countElement.length > 4) {
                $(domElement).parent().remove();
                tempDataFor3 = countElement.length;
            }
                
            
        });
       
        $("#CountSides").val(countElement.length - 1);

        if (countElement.length == 5) {
            $("#interData+div").remove();
            $("#segment4").after("<div>" +
                "<button type='button' class='btn btn-default setSegment'>Задать/Изменить координаты</button>" +
                 "<button id='BlockSegment' type='button' class='btn btn-primary'>Сохранить</button>" +
            "</div>");

            $("#interData+h5").css("clear", "none");
            tempDataFor3 = 5;
        }
 

        //чистка модальных окон
        if (countElement.length != 1) {
            $('[id="ModalRoadSigns' + index + '"]').remove();
            $('[id^="ModalRoadSigns"]').each(function (ind, element) {
                $(element).attr("id", "ModalRoadSigns" + (ind + 1)).find(".buttonclose").attr("onclick", "cleaningRoadSigns(" + (ind + 1) + ")").next().attr('onclick', 'changeColorRoadSigns(' + (ind + 1) + ',event)');
            }).each(function (indMR, elementMR) {
                $(elementMR).find("td input").each(function (ind, element) {
                    $(element).attr("name", (indMR + 1) + $(this).attr("name").substr($(this).attr("name").indexOf("M")));
                });
         
            });

            $('[id="RoadBarriers' + index + '"]').remove();
            $('[id^="RoadBarriers"]').each(function(ind, element) {
                $(element).attr("id", "RoadBarriers" + (ind + 1)).find(".buttonclose").attr("onclick", "cleaningRoadBarriers(" + (ind + 1) + ")").next().attr('onclick', 'changeColorRoadBarriers(' + (ind + 1) + ',event)');
            }).each(function(indMR, elementMR) {

                $(elementMR).find("td input").each(function(ind, element) {
                    $(element).attr("name", (indMR + 1) + $(this).attr("name").substr($(this).attr("name").indexOf("R")));

                });
            });
        }
        
        if (countElement.length != 1){
            $(".DataOfRoad" + index).remove();
        }
        $('[class^="DataOfRoad"]').each(function (ind, element) {
            if (countElement.length != 0) {
                $(element).attr("class", "DataOfRoad" + (ind + 1));
                $(element).find("u").text("Участок " + (ind + 1));
                $(element).find("[data-target^='#ModalRoadSigns']").attr("data-target", "#ModalRoadSigns" + (ind + 1));
                $(element).find("[data-target^='#RoadBarriers']").attr("data-target", "#RoadBarriers" + (ind + 1));
                $(element).find("[onchange^='setColorSegment']").attr("onchange", "setColorSegment(" + (ind + 1) + ",this)");
            }
        });
        increment = massSegment.length + 1;


    }
    //чистка полей
    function cleaningRoadSigns(par) {

        $("#ModalRoadSigns" + par + " input").each(function (indx, element) {
            $(element).val("");
        });

        $('[data-target="#ModalRoadSigns' + par + '"]').removeClass("btn-danger");
        $('[data-target="#ModalRoadSigns' + par + '"]').addClass("btn-default");
    }
    function cleaningModalMackUp() {

        $("#ModalMackUp input").each(function (indx, element) {
            $(element).val("");
        });
        $('[data-target="#ModalMackUp"]').removeClass("btn-danger");
        $('[data-target="#ModalMackUp"]').addClass("btn-default");
    }

    function cleaningRoadBarrier(par) {

        $("#RoadBarriers" + par + " input").each(function (indx, element) {
            $(element).val("");
        });
        $('[data-target="#RoadBarriers' + par + '"]').removeClass("btn-danger");
        $('[data-target="#RoadBarriers' + par + '"]').addClass("btn-default");
    }
    //изменения цвета
    function changeColorMackUp(e) {
        $('[onclick="changeColorMackUp(event)"]').closest("#ModalMackUp").find("td>input").each(function (ind, element) {

            if ($(element).hasClass("input-validation-error")) {

                alert("Вы ввели недопустимые знаки в полях");
                e.preventDefault();
                e.stopImmediatePropagation();
                return false;
            }
        });
        $('[data-target="#ModalMackUp"]').removeClass("btn-default");
        $('[data-target="#ModalMackUp"]').addClass("btn-danger");
    }

    function changeColorRoadSigns(par,e) {
        
        $('[onclick="changeColorRoadSigns(' + par + ',event)"]').closest("#ModalRoadSigns" + par + "").find("td>input").each(function (ind, element) {
            
            if ($(element).hasClass("input-validation-error")) {
                
                alert("Вы ввели недопустимые знаки в полях");
                e.preventDefault();
                e.stopImmediatePropagation();
                return false;
            }
        });

        $('[data-target="#ModalRoadSigns' + par + '"]').removeClass("btn-default");
        $('[data-target="#ModalRoadSigns' + par + '"]').addClass("btn-danger");
    }

    function changeColorRoadBarriers(par, e) {
        $('[onclick="changeColorRoadBarriers(' + par + ',event)"]').closest("#RoadBarriers" + par + "").find("td>input").each(function (ind, element) {

            if ($(element).hasClass("input-validation-error")) {

                alert("Вы ввели недопустимые знаки в полях");
                e.preventDefault();
                e.stopImmediatePropagation();
               
                return false;
                
            }
        });
        $('[data-target="#RoadBarriers' + par + '"]').removeClass("btn-default");
        $('[data-target="#RoadBarriers' + par + '"]').addClass("btn-danger");
    }

    //задание координат
    $(document).ready(function () {

        $('[action="/Home/SaveSuccess"]').validate();

        $('td [type="text"]').each(function(ind,element) {
            
            $(element).rules("add", {
                number: true,
                messages: {
                    number:"requere number"  
                }
            });
        });
  

        //подтягивание улицы в модальное окно
        $('[data-target="#ModalMackUp"]').click(function () {
           
            var textStreet = $('[name="Street.Name"]').val();

            if (textStreet != "") {
                $('#text').text(textStreet);
            }
        });

        function setSegment(eventObject) {

            if ($(eventObject.target).next("button").css("display") == "none") {
                $("#BlockSegment").css("display", "inline-block");
                $('form[action="/Home/SaveSuccess"]').on("click", "#blockElement button,#blockElement input,#blockForm button", BlockForm);
            }
            if (currentRoute == undefined || $("#blockStreetCoord").css("display") == "inline") {
                alert("Задайте улицу или возможно нажмите кнопку сохранить в этом пункте");
            } else {

                if (identifierForDelBallon == true) {

                    currentRoute.getPaths().get(0).balloon.destroy();

                    identifierForDelBallon = false;
                }

                handlerSegment = function (e) {
                    countElementSegGlobal.length++;

                    var coords = e.get('coords');
                    var pathsObjects = ymaps.geoQuery(currentRoute.getPaths()),
                   edges = [];

                    // Переберем все сегменты и разобьем их на отрезки.
                    pathsObjects.each(function (path) {
                        var coordinates = path.geometry.getCoordinates();
                        for (var i = 1, l = coordinates.length; i < l; i++) {
                            edges.push({
                                type: 'LineString',
                                coordinates: [coordinates[i], coordinates[i - 1]]

                            });
                        }
                    });


                    if (increment >= 2 && increment <= 4) {

                        $("#segment" + increment).html(
                            '<b><u>Координаты участка ' + increment + '</u></b>' +
                            '<div>Начальнаты начала</div>' +
                            '<div><label for="Segment.BreadthS">Широта</label> <input id="breadthSegS' + increment + '" name="Segment.BreadthS" readonly="" type="text" value="">' +
                            '<label for="Segment.LengthS">Долгота</label> <input id="lengthSegS' + increment + '" name="Segment.LengthS" readonly="" type="text" value="">' +
                            '</div><div>Координаты конца</div><div>' +
                            '<label for="Segment.BreadthE">Широта</label> <input id="breadthSegE' + increment + '" name="Segment.BreadthE" readonly="" type="text" value="">' +
                            '<label for="Segment.LengthE">Долгота</label> <input id="lengthSegE' + increment + '" name="Segment.LengthE" readonly="" type="text" value=""></div></div>'
                            );
                    }

                    if (increment > 4) {

                        if (increment == 5) {
                            $("#segment4+div").remove();
                            $("#interData+h5").css("clear", "left");
                            $("#interData").after('<div style="float: left"  >' +
                                '<button type="button"  class="btn btn-default setSegment">Задать/Изменить координаты</button>' +
                                '<button id="BlockSegment" type="button" class="btn btn-primary">Сохранить</button>' +
                                '</div>');
                        }
                        if (tempDataFor3 == increment) {
                            $("#interData").before('<div class="form-group" style="margin-top: 10px"><div id="segment' + increment + '" style="width: 30.2%;float: left;height: 115px"></div><div id="segment' + (increment + 1) + '" style="width:29%;float: left;height: 115px"></div><div id="segment' + (increment + 2) + '" style="width: 39.8%;float: left;height: 115px"></div></div>');
                            tempDataFor3 = tempDataFor3 + 3;
                        }
                        $("#segment" + increment).html('<b><u>Координаты участка ' + increment + '</u></b>' +
                            '<div>Начальнаты начала</div>' +
                            '<div><label for="Segment.BreadthS">Широта</label> <input id="breadthSegS' + increment + '" name="Segment.BreadthS" readonly="" type="text" value="">' +
                            '<label for="Segment.LengthS">Долгота</label> <input id="lengthSegS' + increment + '" name="Segment.LengthS" readonly="" type="text" value="">' +
                            '</div><div>Координаты конца</div>' +
                            '<div>' +
                            '<label for="Segment.BreadthE">Широта</label> <input id="breadthSegE' + increment + '" name="Segment.BreadthE" readonly="" type="text" value="">' +
                            '<label for="Segment.LengthE">Долгота</label> <input id="lengthSegE' + increment + '" name="Segment.LengthE" readonly="" type="text" value=""></div><div>' +
                            '</div></div>'
                        );
                    }
                    if (increment != 1) {
                        $('[class^="DataOfRoad"]:last').after("<div style='clear: both' class='DataOfRoad" + increment + "'>" +
                                                        "<div>" +
                                                            "<b><u>Участок " + increment + "</u></b>" +
                                                        "</div>" +
                                                        "<div class='file_upload col-lg-4 col-md-4 col-sm-4 col-xs-4' style='float: left'>" +
                                                            "<button type='button' id='changeColorDislocation" + increment + "'  class='btn btn-default'>Загрузить Дислокацию ТСОДД</button> " +
                                                        "<input name='layoutDislocation" + increment + "' onchange=\"$('#changeColorDislocation" + increment + "').removeClass('btn-default').addClass('btn-danger');\" type='file'>" +
                                                        "</div>" +
                                                        "<div class='col-lg-4 col-md-4 col-sm-4 col-xs-4' style='float: left'>" +
                                                            "<button type='button' class='btn btn-default' data-toggle='modal' data-target='#ModalRoadSigns" + increment + "'>Ввести данные о дорожных знаках</button>" +
                                                        "</div>" +
                                                        "<div class='col-lg-4 col-md-4 col-sm-4 col-xs-4' >" +
                                                           "<button type='button' class='btn btn-default' data-toggle='modal' data-target='#RoadBarriers" + increment + "'>Ввести данные о дорожных ограждениях</button>" +
                                                        "</div>" +
                                                        "<div style='clear: both'>" +
                                                                    "Участок требует изменения дислокации ТСОДД" +
                                                                     "<select id='Segment_ChangeDislocationTCODD' onchange='setColorSegment(" + increment + ",this)' name='Segment.ChangeDislocationTCODD'>" +
                                                                        "<option value='true'>Да</option>" +
                                                                         "<option selected='selected' value='false'>Нет</option>" +
                                                                      "</select>" +
                                                         "</div>" +
                                                      "</div>");

                        //вставка модальных окон

                        $('[id^="ModalRoadSigns"]:last').after($('#ModalRoadSigns1').clone()
                         .attr("id", "ModalRoadSigns" + increment).find(".buttonclose")
                         .attr("onclick", "cleaningRoadSigns(" + increment + ")").end().find("td input").each(function (ind, element) {
                             $(element).attr("name", increment.toString() + $(this).attr("name").substr($(this).attr("name").indexOf("M")));
                         }).end().find(".buttonSave").attr("onclick", "changeColorRoadSigns(" + increment + ",event)").end().find("li a").each(function (ind, element) {
                             $(element).attr("href", "#tab" + incForTab1);
                             incForTab1++;
                         }).end().find('[role="tabpanel"]').each(function (ind, element) {
                             $(element).attr("id", "tab" + incForTab2);
                             incForTab2++;
                         }).end());
                      

                        $('[id^="RoadBarriers"]:last').after($('#RoadBarriers1').clone()
                            .attr("id", "RoadBarriers" + increment).find(".buttonclose")
                            .attr("onclick", "cleaningRoadBarrier(" + increment + ")").end()
                            .find("td input").each(function (ind, element) {
                                $(element).attr("name", increment.toString() + $(this).attr("name").substr($(this).attr("name").indexOf("R")));
                            }).end().find(".buttonSave").attr("onclick", "changeColorRoadBarriers(" + increment + ",event)").end());


                    }

                    $("#CountSides").val(increment); $("#breadthSegS" + increment).attr("value", tempData[0]);
                    $("#lengthSegS" + increment).attr("value", tempData[1]);
                    $("#breadthSegE" + increment).attr("value", coords[0].toPrecision(6));
                    $("#lengthSegE" + increment).attr("value", coords[1].toPrecision(6));
                    var segment = new ymaps.GeoObject({
                        geometry: {
                            type: "Point", // тип геометрии - точка
                            coordinates: [coords[0].toPrecision(6), coords[1].toPrecision(6)] // координаты точки

                        },
                        properties: {
                            iconContent: increment,
                            balloonContentHeader: "<a href='#' onclick='deleteSegment(" + increment + ")'>Удалить Обьект</a>",
                            balloonContent: "[" + coords[0].toPrecision(6) + "," + coords[1].toPrecision(6) + "]"
                        }
                    },
                    {
                        preset: "islands#blueCircleIcon",
                        draggable: true
                    });

                    var myCircle = new ymaps.Circle([[coords[0].toPrecision(6), coords[1].toPrecision(6)], 3], null, { draggable: true, visible: false });


                    myMap.geoObjects.add(myCircle);
                    myMap.geoObjects.add(segment);

                    objects = ymaps.geoQuery([myCircle]);

                    var tempCoordinates;
                    segment.events.add('dragstart', function () {
                        tempCoordinates = segment.geometry._xl[0];
                    });
                    var Edit = increment;
                    segment.events.add('drag', function (e) {

                        $("#breadthSegS" + (Edit + 1).toString()).val(segment.geometry._xl[0][0].toString().substring(0, 7));
                        $("#lengthSegS" + (Edit + 1).toString()).val(segment.geometry._xl[0][1].toString().substring(0, 7));
                        $("#breadthSegE" + Edit).val(segment.geometry._xl[0][0].toString().substring(0, 7));
                        $("#lengthSegE" + Edit).val(segment.geometry._xl[0][1].toString().substring(0, 7));
                    });


                    segment.events.add('dragend', function (e) {

                        var routeObjects = ymaps.geoQuery(edges).setOptions('visible', false).addToMap(myMap);
                        myCircle.geometry.setCoordinates(
                           segment.geometry._xl[0]
                        );

                        var boundaryObjects = routeObjects.searchIntersect(myCircle);


                        if (boundaryObjects._xg.length == 0) {

                            segment.geometry.setCoordinates(tempCoordinates);

                            $("#breadthSegS" + (Edit + 1).toString()).val(segment.geometry._xl[0][0].toString().substring(0, 7));
                            $("#lengthSegS" + (Edit + 1).toString()).val(segment.geometry._xl[0][1].toString().substring(0, 7));
                            $("#breadthSegE" + Edit).val(segment.geometry._xl[0][0].toString().substring(0, 7));
                            $("#lengthSegE" + Edit).val(segment.geometry._xl[0][1].toString().substring(0, 7));
                        }
                     
                      
                        $('[action="/Home/SaveSuccess"]').validate();
                        $('td [type="text"]').each(function (ind, element) {

                            $(element).rules("add", {
                                number: true,
                                messages: {
                                    number: "requere number"
                                }
                            });
                        });
                    });
                  //навешивание валидации
                    $('td [type="text"]').each(function (ind, element) {

                        $(element).rules("add", {
                            number: true,
                            messages: {
                                number: "requere number"
                            }
                        });
                    });

                    tempData = [coords[0].toPrecision(6), coords[1].toPrecision(6)];
                    massSegment[increment - 1] = myMap.geoObjects.indexOf(segment);
                    increment++;

                }
                currentRoute.getPaths().events.add('click', handlerSegment);

            }
        }

        function BlockForm() {
            alert("Вы не сохранили координаты участков");
            return false;
        }

        //отправка формы
        $('form[action="/Home/SaveSuccess"]').on('click', "#BlockSegment", function () {

            $('form[action="/Home/SaveSuccess"]').off("click", "#blockElement button,#blockElement input,#blockForm button", BlockForm);

            $("#BlockSegment").css("display", "none");
            $(".setSegment").one('click', setSegment);
            myMap.geoObjects.each(function (el, index) {

                for (var i = 0; i < massSegment.length; i++) {
                    if (massSegment[i] == index) {
                        el.balloon.destroy();
                        el.options.set({
                            draggable: false
                        });
                    };
                }

            });
        });

        $('form[action="/Home/SaveSuccess"]').on("click", "#blockElement button,#blockElement input,#blockForm button", BlockForm);


        $(".setSegment").one('click', setSegment);

        $("#breadthS, #lengthS, #breadthE, #lengthE").change(function () {
            Set();
        });
        //закрытие модального окна
        $("#closeModel").click(function () {
            $("#ModalTable").modal('hide');
        });


        //заблокировать наименовае улицы
        $("#blockStreet").click(function () {
            if ($(this).parent().prev().children("input").eq(2).val() != '') {
                $(this).parent().prev().children("input").each(function (indx, element) {
                    $(element).attr("readonly", "");
                });
                $(this).css("display", "none");
            } else {
                alert("Введите название улицы");
            }
        });
        //заблокировать поля  улицы и убрать координаты
        $("#blockStreetCoord").click(function () {

            //делает readOnly  инпуты
            if (currentRoute != undefined && identifierForDelete != 1) {
                $(this).parent().prev().children("input").each(function (indx, element) {
                    $(element).attr("readonly", "");
                });

                $(this).parent().prev().prev().prev().children("input").each(function (indx, element) {
                    $(element).attr("readonly", "");
                });

                $(this).css("display", "none");
                //currentRoute.editor.start({ editWayPoints: false });
                if (currentRoute != undefined) {
                    myMap.geoObjects.remove(currentRoute);
                }
                currentRoute.getPaths().options.set({

                    //можно выставить настройки графики маршруту
                    strokeColor: '0000ffff',
                    opacity: 0.9,
                    strokeWidth: 4
                });
                //var segments= currentRoute.getPaths().get(0).getSegments();
            
                tempData = Arr[0];

                myMap.geoObjects.add(currentRoute.getPaths());

            } else {
                alert("Задайте сначала маршрут");
            }
        });
        //подсказки улиц
        var autocompleteUrl = '/Home/FindStreets';
        $('[name="Street.Name"]').autocomplete({
            source: autocompleteUrl,
            minLength: 2,
            select: function (event, ui) {

            }
        });
        //при клике по tr фокус по input
        $("tr td").has("input").click(function (eventObject) {

            $(eventObject.target).children().focus();
        });

        //чистка полей в модальном окне при нажатии по close
        $("#close").click(function (e) {

            $("#ModalMackUp input").each(function (indx, element) {
                $(element).val("");
            });
        });
        //отмена клавиши esc для модальных окон
        $('.modal').modal({
            keyboard: false,
            show: false
        });
    });

</script>
<style>
    /*стили на для Upload кнопки*/
    .file_upload {
        position: relative;
        overflow: hidden;
        height: 34px; /* example */
        margin-bottom: 10px;
    }

        .file_upload > input {
            max-width: 284px;
        }

        .file_upload input[type=file] {
            position: absolute;
            top: 0;
            width: 100%;
            height: 100%;
            transform: scale(1);
            letter-spacing: 10em; /* IE 9 fix */
            -ms-transform: scale(1); /* IE 9 fix */
            opacity: 0;
            cursor: pointer;
        }
    /*модальное окно*/
    .modal-dialog {
        width: 645px;
    }

    td input {
        border-width: 0;
        text-align: right !important;
    }
    /*правит шрифт бутсрапа*/
    label {
        font-weight: normal;
    }
    /*отступы*/
    .indentForTextBox {
        margin-right: 60px;
    }

    .btn {
        width: 285px;
    }
</style>
<h2 style="text-align: center">ВВОД ДАННЫХ УЛИЦЫ</h2>

@using (Html.BeginForm("SaveSuccess", "Home", null, FormMethod.Post, new
{
    enctype = "multipart/form-data"
}))
{
    <div class="form-inline">
        <div class="form-group col-lg-7 col-md-7 col-sm-7 col-xs-7">
            <div id="map" style="height: 744px;"></div>
        </div>

        <div class="form-group col-lg-5 col-md-5 col-sm-5 col-xs-5">
            <b><u>1.Наименование улицы</u></b>
            <div>
                @Html.Hidden("City.id", (int)ViewBag.City.id)
                @Html.Label("Выбирите город", new { @for = "City.Name" }) @Html.TextBox("City.Name", (string)ViewBag.City.Name, new { id = "city", @readonly = "" })
                @Html.Label("Выбирите улицу", new { @for = "Street.Name" }) @Html.TextBox("Street.Name", null, new { id = "street" })
            </div>
            <div>
                <button type="button" class="btn btn-default" onclick="search()">Показать на карте</button>
                <button type="button" id="blockStreet" class="btn btn-primary">Сохранить</button>
            </div>
            <h5>После сохранения наименования улицы, появляется возможность задавать ее координаты</h5>
            <b><u>2.Координаты улицы</u></b>
            <div>Начальнаты начала</div>
            <div>
                @Html.Label("Широта", new { @for = "Street.BreadthS" }) @Html.TextBox("Street.BreadthS", null, new { id = "breadthS", @readonly = "" })
                @Html.Label("Долгота", new { @for = "Street.LengthS" }) @Html.TextBox("Street.LengthS", null, new { id = "lengthS", @readonly = "" })
            </div>
            <div>Координаты конца</div>
            <div>
                @Html.Label("Широта", new { @for = "Street.BreadthE" }) @Html.TextBox("Street.BreadthE", null, new { id = "breadthE", @readonly = "" })
                @Html.Label("Долгота", new { @for = "Street.LengthE" }) @Html.TextBox("Street.LengthE", null, new { id = "lengthE", @readonly = "" })
            </div>
            <div>
                <button type="button" onclick="SetCoords()" class="btn btn-default">Задать/Изменить координаты</button>
                <button type="button" id="blockStreetCoord" class="btn btn-primary">Сохранить</button>
            </div>
            <h5>После сохранения координат улицы, появляется возможность задавать координаты участков</h5>
            <b><u>3.Количество и координаты участков улицы</u></b>
            <div>
                @Html.Label("Количество участков", new { @for = "CountSides", style = "margin-right: 20px" }) @Html.TextBox("CountSides", null, new { id = "CountSides", style = "width: 40px", @readonly = "" })

            </div>
            <div id="segment1">
                <b><u>Координаты участка 1</u></b>
                <div>Начальнаты начала</div>
                <div>
                    @Html.Label("Широта", new { @for = "Segment.BreadthS" }) @Html.TextBox("Segment.BreadthS", null, new { id = "breadthSegS1", @readonly = "" })
                    @Html.Label("Долгота", new { @for = "Segment.LengthS" }) @Html.TextBox("Segment.LengthS", null, new { id = "lengthSegS1", @readonly = "" })
                </div>
                <div>Координаты конца</div>
                <div>
                    @Html.Label("Широта", new { @for = "Segment.BreadthE" }) @Html.TextBox("Segment.BreadthE", null, new { id = "breadthSegE1", @readonly = "" })
                    @Html.Label("Долгота", new { @for = "Segment.LengthE" }) @Html.TextBox("Segment.LengthE", null, new { id = "lengthSegE1", @readonly = "" })
                </div>
            </div>
            <div id="segment2">
            </div>
            <div id="segment3">
            </div>
            <div id="segment4">
            </div>
            <div>
                <button type="button" class="btn btn-default setSegment">Задать/Изменить координаты</button>
                <button id="BlockSegment" type="button" class="btn btn-primary">Сохранить</button>
            </div>

        </div>

    </div>
    <div id="interData"></div>
    <h5>После сохранения координат участков, появляется возможность вводить информацию об участках</h5>
    <!-- ModalMackUp -->
    <div class="modal fade" id="ModalMackUp" tabindex="-1" role="dialog" data-backdrop="false" aria-labelledby="myModalLabel">
        <div class="modal-dialog" style="width: 1000px; " role="document">
            <div class="modal-content">
                <div class="modal-header">

                    <h4 class="modal-title" id="myModalLabel">
                        Спецификация горизонтальной дорожной разметки
                        <p>по ул. <span id="text">_________________</span> в г. Минске
                    </h4>

                </div>
                <div class="modal-body" style="height: 800px;overflow: auto">
                    <table  class="table table-bordered"  >
                        <tr>
                            <th>№ разметки</th>
                            <th>Картинка</th>
                            <th>Описание</th>
                            <th>Длина (м.пог) / штуки</th>
                            <th>Площадь (м.кв)</th>
                        </tr>
                        @foreach (var item in (IEnumerable<oncloud.Domain.Entities.TheHorizontalRoadMarking>)ViewBag.RoadMarking)
                        {
                            <tr>

                                <td>@item.NumberMarking</td>
                                <td>
                                    @if (item.ImageData != null)
                                    {
                                        <img src="@Url.Action("GetImage",  "HorizontalRoadMarkings", new { item.id})" />
                                    }
                                </td>
                                <td>
                                    @item.description
                                </td>
                                <td style="vertical-align: middle"><input name="ModalsL@(item.NumberMarking)" type="text" /></td>
                                <td style="vertical-align: middle"><input name="ModalsA@(item.NumberMarking)" type="text" /></td>
                            </tr>
                        }

                    </table>
                </div>
                <div class="modal-footer">
                    <button type="button" id="closeModalMackUp" onclick="cleaningModalMackUp()" class="btn btn-default" data-dismiss="modal">Закрыть</button>
                    <button type="button" class="btn btn-primary" onclick="changeColorMackUp(event)" data-dismiss="modal">Сохранить</button>
                </div>
            </div>
        </div>
    </div>

     <!-- ModalRoadSigns -->
    <div class="modal fade" id="ModalRoadSigns1" tabindex="-1" role="dialog" data-backdrop="false" aria-labelledby="myModalLabel">
        <div class="modal-dialog" role="document">
            <div class="modal-content" style="width: 800px">
                <div class="modal-header">


                </div>
                <div class="modal-body" style="height: 800px;overflow: auto">
                    <div>

                        <!-- Nav tabs -->
                        <ul style="width: 400px" class="nav nav-tabs" role="tablist">
                            <li role="presentation" class="active"><a href="#tab1" aria-controls="1" role="tab" data-toggle="tab">1</a></li>
                            <li role="presentation"><a href="#tab2" aria-controls="2" role="tab" data-toggle="tab">2</a></li>
                            <li role="presentation"><a href="#tab3" aria-controls="3" role="tab" data-toggle="tab">3</a></li>
                            <li role="presentation"><a href="#tab4" aria-controls="4" role="tab" data-toggle="tab">4</a></li>
                            <li role="presentation"><a href="#tab5" aria-controls="5" role="tab" data-toggle="tab">5</a></li>
                            <li role="presentation"><a href="#tab6" aria-controls="6" role="tab" data-toggle="tab">6</a></li>
                            <li role="presentation"><a href="#tab7" aria-controls="7" role="tab" data-toggle="tab">7</a></li>

                        </ul>

                        <!-- Tab panes -->
                        <div class="tab-content">
                            <div role="tabpanel" class="tab-pane active" id="tab1">
                                @{
                                    Session["increment"] = "1";
                                    Html.RenderPartial("Partials/RoadSingns", (IEnumerable<oncloud.Domain.Entities.RoadSigns>)ViewBag.RoadSigns);}

                            </div>
                            <div role="tabpanel" class="tab-pane" id="tab2">
                                @{ Session["increment"] = "2";
                                    Html.RenderPartial("Partials/RoadSingns", (IEnumerable<oncloud.Domain.Entities.RoadSigns>)ViewBag.RoadSigns);}

                            </div>
                            <div role="tabpanel" class="tab-pane" id="tab3">
                                @{ Session["increment"] = "3";
                                    Html.RenderPartial("Partials/RoadSingns", (IEnumerable<oncloud.Domain.Entities.RoadSigns>)ViewBag.RoadSigns);}
                            </div>
                            <div role="tabpanel" class="tab-pane" id="tab4">
                                @{ Session["increment"] = "4";
                                    Html.RenderPartial("Partials/RoadSingns", (IEnumerable<oncloud.Domain.Entities.RoadSigns>)ViewBag.RoadSigns);}
                            </div>
                            <div role="tabpanel" class="tab-pane" id="tab5">
                                @{ Session["increment"] = "5";
                                    Html.RenderPartial("Partials/RoadSingns", (IEnumerable<oncloud.Domain.Entities.RoadSigns>)ViewBag.RoadSigns);}
                            </div>
                            <div role="tabpanel" class="tab-pane" id="tab6">
                                @{ Session["increment"] = "6";
                                    Html.RenderPartial("Partials/RoadSingns", (IEnumerable<oncloud.Domain.Entities.RoadSigns>)ViewBag.RoadSigns);}
                            </div>
                            <div role="tabpanel" class="tab-pane" id="tab7">
                                @{ Session["increment"] = "7";
                                    Html.RenderPartial("Partials/RoadSingns", (IEnumerable<oncloud.Domain.Entities.RoadSigns>)ViewBag.RoadSigns);}
                            </div>
                        </div>

                    </div>

                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-default buttonclose" onclick="cleaningRoadSigns(1)" data-dismiss="modal">Закрыть</button>
                    <button type="button" class="btn btn-primary buttonSave" onclick="changeColorRoadSigns(1,event)" data-dismiss="modal">Сохранить</button>
                </div>
            </div>
        </div>
    </div>
        <!-- RoadBarriers  -->
    <div class="modal fade" id="RoadBarriers1" tabindex="-1" role="dialog" data-backdrop="false" aria-labelledby="myModalLabel">
        <div class="modal-dialog" style="width: 1000px" role="document">
            <div class="modal-content">
                <div class="modal-header">

                </div>
                <div class="modal-body" style="height: 800px;overflow: auto">
                    <table class="table table-bordered">
                        <tr>
                            <th>№ </th>
                            <th>Картинка</th>
                            <th>Описание</th>
                            <th>Погонные метры</th>
                        </tr>
                        @foreach (var item in (IEnumerable<oncloud.Domain.Entities.RoadBarriers>)ViewBag.RoadBarriers)
                        {
                            <tr>

                                <td>@item.NumberBarriers</td>
                                <td>
                                    @if (item.ImageData != null)
                                    {
                                        <img style="width: 100px;height: 100px" src="@Url.Action("GetImage",  "RoadBarriers", new { item.Id})" />
                                    }
                                </td>
                                <td>
                                    @item.Description
                                </td>
                                <td style="vertical-align: middle"><input name="1RoadBarriers@(item.NumberBarriers)" type="text" /></td>

                            </tr>
                        }

                    </table>
                </div>
                <div class="modal-footer">
                    <button type="button" id="closeModalMackUp" onclick="cleaningRoadBarrier(1)" class="btn btn-default buttonclose" data-dismiss="modal">Закрыть</button>
                    <button type="button" class="btn btn-primary buttonSave" onclick="changeColorRoadBarriers(1,event)" data-dismiss="modal">Сохранить</button>
                </div>
            </div>
        </div>
    </div>

                                    <div>
                                        <div id="blockElement" style="clear: both">
                                            <div>
                                                <b><u>4.Ввод данных</u></b>
                                            </div>
                                            <div class="file_upload  col-lg-4 col-md-4 col-sm-4 col-xs-4">
                                                <button class="btn btn-default" id="changeColorScheme1" type="button">Загрузить компоновочную схему</button>
                                                <input onchange='$("#changeColorScheme1").removeClass("btn-default").addClass("btn-danger");' name="layoutScheme" type="file">
                                            </div>
                                            <div class="col-lg-4 col-md-4 col-sm-4 col-xs-4">
                                                <button type="button" class="btn btn-default" data-toggle="modal" data-target="#ModalMackUp">Ввести спецификацию разметки</button>
                                            </div>
                                            <div style="clear: both" class="DataOfRoad1">
                                                <div>
                                                    <b><u>Участок 1</u></b>
                                                </div>

                                                <div class="file_upload col-lg-4 col-md-4 col-sm-4 col-xs-4" style="float: left">
                                                    <button type="button" id="changeColorDislocation1" class="btn btn-default">Загрузить Дислокацию ТСОДД</button>
                                                    <input name="layoutDislocation1" onchange='$("#changeColorDislocation1").removeClass("btn-default").addClass("btn-danger");' type="file">
                                                </div>
                                                <div class=" col-lg-4 col-md-4 col-sm-4 col-xs-4" style="float: left">
                                                    <button type="button" class="btn btn-default" data-toggle="modal" data-target="#ModalRoadSigns1">Ввести данные о дорожных знаках</button>
                                                </div>
                                                <div class=" col-lg-4 col-md-4 col-sm-4 col-xs-4">
                                                    <button type="button" class="btn btn-default" data-toggle="modal" data-target="#RoadBarriers1">
                                                        Ввести данные о дорожных ограждениях
                                                    </button>
                                                </div>
                                                <div style="clear: both">
                                                    Участок требует изменения дислокации ТСОДД
                                                    @Html.DropDownList("Segment.ChangeDislocationTCODD",
                    new SelectListItem[]
                    {
                        new SelectListItem() {Text = "Да", Value = "true"},
                        new SelectListItem() {Text = "Нет", Value = "false", Selected = true}
                    }, new { onchange = "setColorSegment(1,this)" })
                                                </div>

                                            </div>


                                        </div>
                                    </div>
                                    <div id="blockForm" style="margin-left: 60%; margin-top: 60px">
                                        @Html.ActionLink("Выйти без сохранения", "Table", "Home", new { @class = "btn btn-default", style = "float:left" }) <button id="submitForm" class="btn btn-primary">Сохранить</button>
                                    </div>

                                    }
