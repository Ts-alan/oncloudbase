@using Newtonsoft.Json
@model  oncloud.Domain.Entities.Street
@{
    ViewBag.Title = "EditStreets";
}



<script type="text/javascript">
    ymaps.ready(init);
    var myMap, myPlacemark, Arr = [[]], counterArr = 0, handlerRoute, currentRoute,
        firstPointRoute, endPointRoute, position, identifierForDelete = 0,
        increment = 1, tempData, tempDataFor3 = 5, objects, identifierForDelBallon = true, CoordinatesforFirstLoad,
        CountObjectInMap, transfercurrentRoute, massSegment = [], handlerSegment, countElementSegGlobal = new Object();
    countElementSegGlobal.length = 0;

    function init() {

        myMap = new ymaps.Map("map", {
            center: [53.9172, 27.5601],
            zoom: 11,
            controls: []
        });

        myMap.behaviors.disable(["dblClickZoom"]);

        ymaps.route([
                ['@Model.BreadthS', '@Model.LengthS'],
                ['@Model.BreadthE', '@Model.LengthE']
        ],
            {
                mapStateAutoApply: true,
                removeViaPoints: true
            }
        ).then(
             function (route) {
                 route.events.add('dragend', function (e) {
                     Arr[0] = [route.requestPoints[0][0].toString().substr(0, 7), route.requestPoints[0][1].toString().substr(0, 7)];
                     Arr[1] = [route.requestPoints[1][0].toString().substr(0, 7), route.requestPoints[1][1].toString().substr(0, 7)];
                 });
                 route.editor.start({
                     editWayPoints: true
                 });

                 var points = route.getWayPoints();
                 points.get(0).properties.set("iconContent", "Начало улицы");
                 points.get(0).properties.set("balloonContentHeader", "<a href='#' onclick='setHandlerS()'>Удалить Обьект</a>");
                 points.get(0).options.set('preset', 'islands#darkGreenStretchyIcon');


                 points.get(1).properties.set("iconContent", "Конец улицы");
                 points.get(1).properties.set("balloonContentHeader", "<a href='#' onclick='setHandlerE()'>Удалить Обьект</a>");
                 points.get(1).options.set("preset", "islands#darkGreenStretchyIcon");

                 route.getPaths().options.set({

                     //можно выставить настройки графики маршруту
                     strokeColor: '0000ffff',
                     opacity: 0.9
                 });
                 currentRoute = route;

                 route.getPaths().options.set({
                     //можно выставить настройки графики маршруту
                     strokeColor: '0000ffff',
                     opacity: 0.9,
                     strokeWidth: 4,
                     mapStateAutoApply: true
                 });

                 //нужно для масшатабирования
                 myMap.geoObjects.add(route);
                 myMap.geoObjects.remove(route);

                 myMap.geoObjects.add(route.getPaths());
                 identifierForDelete = 0;
                 var DataOfSegment = JSON.parse('@Html.Raw(JsonConvert.SerializeObject(Model.Segment.Select(a=>new {a.LengthS,a.LengthE,a.BreadthE,a.BreadthS})
                                                , Formatting.None,
                    new JsonSerializerSettings() {
                        ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Ignore
                }))');
                 var DataOfRoadSings = JSON.parse('@Html.Raw(JsonConvert.SerializeObject(Model.SpecificationofRS.Select(a=>new {a.CountRS,a.Segment.Name,a.RoadSigns.NumberRoadSigns})
                                                , Formatting.None,
                    new JsonSerializerSettings() {
                        ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Ignore
                    }))');
                 console.log(DataOfRoadSings);
                 for (var i=0; i < DataOfRoadSings.length; i++) {

                     $("[name='" + DataOfRoadSings[i].Name.toString() + "ModalC" + DataOfRoadSings[i].NumberRoadSigns.toString() + "']")
                     .attr("value", DataOfRoadSings[i].CountRS);
                 }
                 
                 var segment = [], myCircle = [];
                
                 for (var i = 0; i < "@Model.Segment.Count"; i++) {

                     segment[i] = new ymaps.GeoObject({
                         geometry: {
                             type: "Point", // тип геометрии - точка
                             coordinates: [DataOfSegment[i].BreadthS, DataOfSegment[i].LengthE] // координаты точки

                         },
                         properties: {
                             iconContent: increment,
                             balloonContentHeader: "<a href='#' onclick='deleteSegment(" + increment + ")'>Удалить Обьект</a>",
                             balloonContent: "[" + DataOfSegment[i].BreadthS + "," + DataOfSegment[i].LengthE + "]"
                         }
                     },
                                   {
                                       preset: "islands#blueCircleIcon",
                                       draggable: true
                                   });

                     myCircle[i] = new ymaps.Circle([[DataOfSegment[i].BreadthS, DataOfSegment[i].LengthE], 3], null, { draggable: true, visible: false });

                     myMap.geoObjects.add(myCircle[i]);
                     myMap.geoObjects.add(segment[i]);
                     if (i + 1 >= 1 && i + 1 <= 4) {

                         $("#segment" + (i + 1)).html(
                             '<b><u>Координаты участка ' + (i + 1) + '</u></b>' +
                             '<div>Начальнаты начала</div>' +
                             '<div><label for="Segment.BreadthS">Широта</label> <input id="breadthSegS' + (i + 1) + '" name="Segment.BreadthS" value="' + DataOfSegment[i].BreadthS + '" readonly="" type="text" value="">' +
                             '<label for="Segment.LengthS">Долгота</label> <input id="lengthSegS' + (i + 1) + '" name="Segment.LengthS" value="' + DataOfSegment[i].LengthS + '" readonly="" type="text" value="">' +
                             '</div><div>Координаты конца</div><div>' +
                             '<label for="Segment.BreadthE">Широта</label> <input id="breadthSegE' + (i + 1) + '" name="Segment.BreadthE" value="' + DataOfSegment[i].BreadthE + '" readonly="" type="text" value="">' +
                             '<label for="Segment.LengthE">Долгота</label> <input id="lengthSegE' + (i + 1) + '" name="Segment.LengthE" value="' + DataOfSegment[i].LengthE + '" readonly="" type="text" value=""></div></div>'
                             );
                     }

                     if ((i + 1) > 4) {

                         if ((i + 1) == 5) {
                             $("#segment4+div").remove();
                             $("#interData+h5").css("clear", "left");
                             $("#interData").after('<div style="float: left"  >' +
                                 '<button type="button"  class="btn btn-default setSegment">Задать/Изменить координаты</button>' +
                                 '<button id="BlockSegment" type="button" style="display: none" class="btn btn-primary">Сохранить</button>' +
                                 '</div>');
                         }
                         if (tempDataFor3 == (i + 1)) {
                             $("#interData").before('<div class="form-group" style="margin-top: 10px"><div id="segment' + (i + 1) + '" style="width: 30.2%;float: left;height: 115px"></div><div id="segment' + (i + 2) + '" style="width:29%;float: left;height: 115px"></div><div id="segment' + (i + 3) + '" style="width: 39.8%;float: left;height: 115px"></div></div>');
                             tempDataFor3 = tempDataFor3 + 3;
                         }
                         $("#segment" + (i + 1)).html('<b><u>Координаты участка ' + (i + 1) + '</u></b>' +
                             '<div>Начальнаты начала</div>' +
                             '<div><label for="Segment.BreadthS">Широта</label> <input id="breadthSegS' + (i + 1) + '" name="Segment.BreadthS" value="' + DataOfSegment[i].BreadthS + '"  readonly="" type="text" value="">' +
                             '<label for="Segment.LengthS">Долгота</label> <input id="lengthSegS' + (i + 1) + '" name="Segment.LengthS" value="' + DataOfSegment[i].LengthS + '" readonly="" type="text" value="">' +
                             '</div><div>Координаты конца</div>' +
                             '<div>' +
                             '<label for="Segment.BreadthE">Широта</label> <input id="breadthSegE' + (i + 1) + '" name="Segment.BreadthE" value="' + DataOfSegment[i].BreadthE + '" readonly="" type="text" value="">' +
                             '<label for="Segment.LengthE">Долгота</label> <input id="lengthSegE' + (i + 1) + '" name="Segment.LengthE" value="' + DataOfSegment[i].LengthE + '" readonly="" type="text" value=""></div><div>' +
                             '</div></div>'
                         );
                     }
                     if (i + 1 != 1) {
                         $('[class^="DataOfRoad"]:last').after("<div style='clear: both' class='DataOfRoad" + (i + 1) + "'>" +
                                                         "<div>" +
                                                             "<b><u>Участок " + (i + 1) + "</u></b>" +
                                                         "</div>" +
                                                         "<div class='file_upload col-lg-4 col-md-4 col-sm-4 col-xs-4' style='float: left'>" +
                                                             "<button type='button' id='changeColorDislocation" + (i + 1) + "'  class='btn btn-default'>Загрузить Дислокацию ТСОДД</button> " +
                                                         "<input name='layoutDislocation' onchange=\"$('#changeColorDislocation" + (i + 1) + "').removeClass('btn-default').addClass('btn-danger');\" type='file'>" +
                                                         "</div>" +
                                                         "<div class='col-lg-4 col-md-4 col-sm-4 col-xs-4' style='float: left'>" +
                                                             "<button type='button' class='btn btn-default' data-toggle='modal' data-target='#ModalRoadSigns" + (i + 1) + "'>Ввести данные о дорожных знаках</button>" +
                                                         "</div>" +
                                                         "<div class='col-lg-4 col-md-4 col-sm-4 col-xs-4' >" +
                                                            "<button type='button' class='btn btn-default' data-toggle='modal' data-target='#RoadBarriers" + (i + 1) + "'>Ввести данные о дорожных ограждениях</button>" +
                                                         "</div>" +
                                                       "</div>");
                     }
                     $('[id^="ModalRoadSigns"]:last').after($('#ModalRoadSigns1').clone()
                               .attr("id", "ModalRoadSigns" + (i+1)).find(".buttonclose")
                               .attr("onclick", "cleaningRoadSigns(" + (i + 1) + ")").end().find("td input").each(function (ind, element) {
                                   $(element).attr("name", (i + 1).toString() + $(this).attr("name").substr($(this).attr("name").indexOf("M")));
                               }).end().find(".buttonSave").attr("onclick", "changeColorRoadSigns(" + (i + 1) + ")").end());

                     $('[id^="RoadBarriers"]:last').after($('#RoadBarriers1').clone()
                         .attr("id", "RoadBarriers" + (i + 1)).find(".buttonclose")
                         .attr("onclick", "cleaningRoadBarrier(" + (i + 1) + ")").end()
                         .find("td input").each(function (ind, element) {
                             $(element).attr("name", (i + 1).toString() + $(this).attr("name").substr($(this).attr("name").indexOf("M")));
                         }).end().find(".buttonSave").attr("onclick", "changeColorRoadBarriers(" + (i + 1) + ")").end());
                     //objects = ymaps.geoQuery([myCircle]);
                     //var tempCoordinates;
                     //segment.events.add('dragstart', function () {
                     //    tempCoordinates = segment.geometry._xl[0];
                     //});
                     //var Edit = increment;
                     //segment.events.add('drag', function (e) {

                     //    $("#breadthSegS" + (Edit + 1).toString()).val(segment.geometry._xl[0][0].toString().substring(0, 7));
                     //    $("#lengthSegS" + (Edit + 1).toString()).val(segment.geometry._xl[0][1].toString().substring(0, 7));
                     //    $("#breadthSegE" + Edit).val(segment.geometry._xl[0][0].toString().substring(0, 7));
                     //    $("#lengthSegE" + Edit).val(segment.geometry._xl[0][1].toString().substring(0, 7));
                     //});


                     //segment.events.add('dragend', function (e) {

                     //    var routeObjects = ymaps.geoQuery(edges).setOptions('visible', false).addToMap(myMap);
                     //    myCircle.geometry.setCoordinates(
                     //       segment.geometry._xl[0]
                     //    );

                     //    var boundaryObjects = routeObjects.searchIntersect(myCircle);


                     //    if (boundaryObjects._xg.length == 0) {

                     //        segment.geometry.setCoordinates(tempCoordinates);

                     //        $("#breadthSegS" + (Edit + 1).toString()).val(segment.geometry._xl[0][0].toString().substring(0, 7));
                     //        $("#lengthSegS" + (Edit + 1).toString()).val(segment.geometry._xl[0][1].toString().substring(0, 7));
                     //        $("#breadthSegE" + Edit).val(segment.geometry._xl[0][0].toString().substring(0, 7));
                     //        $("#lengthSegE" + Edit).val(segment.geometry._xl[0][1].toString().substring(0, 7));
                     //    }

                     //});
                     massSegment[increment - 1] = myMap.geoObjects.indexOf(segment);
                     increment++;
                 }
                 
                 myMap.geoObjects.each(function (el, i) {
                     for (var j = 0; j < massSegment.length; j++) {
                         if (i == massSegment[j])

                             el.events.add('dragstart', function () {
                                 CoordinatesforFirstLoad = el.geometry._dp[0];

                             });
                         //el.events.add('dragend', function () {
                         //    console.log(currentRoute);
                         //    var pathsObjects = ymaps.geoQuery(currentRoute.getPaths()),
                         //    edges = [];

                         //    // Переберем все сегменты и разобьем их на отрезки.
                         //    pathsObjects.each(function (path) {
                         //        var coordinates = path.geometry.getCoordinates();
                         //        for (var i = 1, l = coordinates.length; i < l; i++) {
                         //            edges.push({
                         //                type: 'LineString',
                         //                coordinates: [coordinates[i], coordinates[i - 1]]

                         //            });
                         //        }
                         //    });

                         //    CountObjectInMap = edges.length;
                         //       var routeObjects = ymaps.geoQuery(edges).setOptions('visible', false).addToMap(myMap);
                         //       myMap.geoObjects.get(massSegment[ind] + 1).geometry.setCoordinates(
                         //           myMap.geoObjects.get(massSegment[ind]).geometry._dp[0]
                         //        );
                         //        var boundaryObjects = routeObjects.searchIntersect(myMap.geoObjects.get(massSegment[ind]+1));
                         //    ind++;
                         //});
                     }
                 });
             });




    }
    function SetRoute(Arr) {

        if (currentRoute != undefined) {
            myMap.geoObjects.remove(currentRoute);
            myMap.geoObjects.remove(currentRoute.getPaths());

        }
        ymaps.route([
                Arr[0],
                Arr[1]
        ],
            {
                mapStateAutoApply: true,
                removeViaPoints: true

            }
        ).then(
            function (route) {
                route.events.add('dragend', function (e) {

                    Arr[0] = [route.requestPoints[0][0].toString().substr(0, 7), route.requestPoints[0][1].toString().substr(0, 7)];
                    Arr[1] = [route.requestPoints[1][0].toString().substr(0, 7), route.requestPoints[1][1].toString().substr(0, 7)];
                });


                route.editor.start({
                    editWayPoints: true
                });

                var points = route.getWayPoints();
                points.get(0).properties.set("iconContent", "Начало улицы");
                points.get(0).properties.set("balloonContentHeader", "<a href='#' onclick='setHandlerS()'>Удалить Обьект</a>");
                points.get(0).options.set('preset', 'islands#darkGreenStretchyIcon');


                points.get(1).properties.set("iconContent", "Конец улицы");
                points.get(1).properties.set("balloonContentHeader", "<a href='#' onclick='setHandlerE()'>Удалить Обьект</a>");
                points.get(1).options.set("preset", "islands#darkGreenStretchyIcon");
                route.editor.events.add("routeupdate", function () {
                    $("#breadthS").val(route.requestPoints[0][0].toString().substr(0, 7));
                    $("#lengthS").val(route.requestPoints[0][1].toString().substr(0, 7));
                    $("#breadthE").val(route.requestPoints[1][0].toString().substr(0, 7));
                    $("#lengthE").val(route.requestPoints[1][1].toString().substr(0, 7));
                });

                route.getPaths().options.set({

                    //можно выставить настройки графики маршруту
                    strokeColor: '0000ffff',
                    opacity: 0.9
                });
                currentRoute = route;

                myMap.geoObjects.add(route);
                //удаление лишних обьектов
                myMap.geoObjects.remove(myPlacemark);
                myMap.geoObjects.remove(firstPointRoute);
                myMap.geoObjects.remove(endPointRoute);

                identifierForDelete = 0;
                //заполнение переменных
                $("#breadthS").val(Arr[0][0]);
                $("#lengthS").val(Arr[0][1]);
                $("#breadthE").val(Arr[1][0]);
                $("#lengthE").val(Arr[1][1]);
            },
            function (error) {
                alert("Возникла ошибка: " + error.message);
            });


    }

    //поиск
    function search() {

        if (myPlacemark != undefined) {

            myMap.geoObjects.remove(myPlacemark);
        }
        position = $("#city").val().toString() + " " + $("#street").val().toString();

        var myGeocoder = ymaps.geocode(position);

        myGeocoder.then(
            function (res) {

                myPlacemark = new ymaps.GeoObject({
                    geometry: {
                        type: "Point", // тип геометрии - точка
                        coordinates: [res.geoObjects.get(0).geometry.getCoordinates()[0], res.geoObjects.get(0).geometry.getCoordinates()[1]] // координаты точки
                    }
                },
                { draggable: true });
                myMap.geoObjects.add(myPlacemark);
                identifierForDelete++;
                myMap.setCenter([res.geoObjects.get(0).geometry.getCoordinates()[0], res.geoObjects.get(0).geometry.getCoordinates()[1]], 14);
            });

    }

    function Set() {

        if ($("#breadthS").val() != "" && $("#lengthS").val() != "" && $("#breadthE").val() && $("#lengthE").val()) {
            Arr = [[]];

            Arr[0] = [parseFloat($("#breadthS").val()), parseFloat($("#lengthS").val())];
            Arr[1] = [parseFloat($("#breadthE").val()), parseFloat($("#lengthE").val())];

            SetRoute(Arr);
        }
    }
    //удаление начальной точки
    function setHandlerS() {
        if (identifierForDelete == 0) {
            myMap.geoObjects.remove(currentRoute);
            myMap.geoObjects.remove(currentRoute.getPaths());
            endPointRoute = new ymaps.GeoObject({
                geometry: {
                    type: "Point", // тип геометрии - точка
                    coordinates: [Arr[1][0], Arr[1][1]] // координаты точки
                },
                properties: {
                    iconContent: "Конец улицы",
                    balloonContentHeader: "<a href='#' onclick='setHandlerE()'>Удалить Обьект</a>",
                    balloonContent: "[" + Arr[1][0] + "," + Arr[1][1] + "]"
                }
            },
            { draggable: true, preset: "islands#darkGreenStretchyIcon" });


            endPointRoute.events.add("dragend", function (e) {

                var coords = endPointRoute.geometry.getCoordinates();
                Arr[1] = [coords[0].toPrecision(6), coords[1].toPrecision(6)];
                //изменение координат при пертягивание метки
                var object = e.get('target');
                object.properties.set("balloonContent", "[" + coords[0].toPrecision(6) + "," + coords[1].toPrecision(6) + "]");

            });
            myMap.geoObjects.add(endPointRoute);
            myMap.events.add('dblclick', handlerRoute);
            identifierForDelete = 1;

        } else {
            myMap.geoObjects.remove(firstPointRoute);
            identifierForDelete = 0;
            counterArr = 0;
            Arr = [[]];


        }
        counterArr = 0;
    }
    //удаление конченой точки
    function setHandlerE() {

        if (identifierForDelete == 0) {
            myMap.geoObjects.remove(endPointRoute);
            myMap.geoObjects.remove(currentRoute);
            myMap.geoObjects.remove(currentRoute.getPaths());
            firstPointRoute.geometry.setCoordinates([Arr[0][0], Arr[0][1]]);
            myMap.geoObjects.add(firstPointRoute);
            myMap.events.add('dblclick', handlerRoute);
            counterArr = 1;
            identifierForDelete = 1;

        } else {
            myMap.geoObjects.remove(endPointRoute);
            identifierForDelete = 0;
            counterArr = 0;
            Arr = [[]];


        }

    }
    //задать координаты
    function SetCoords() {

        if (countElementSegGlobal.length == 0) {


            if (currentRoute != undefined) {
                $("#blockStreetCoord").css("display", "inline");
                myMap.geoObjects.add(currentRoute);
                currentRoute.editor.start({ editWayPoints: true });

                $("#blockStreetCoord").parent().prev().children("input").each(function (indx, element) {
                    $(element).removeAttr("readonly");

                });

                $("#blockStreetCoord").parent().prev().prev().prev().children("input").each(function (indx, element) {
                    $(element).removeAttr("readonly");
                });

            } else {
                handlerRoute = function (e) {

                    var coords = e.get('coords');
                    if (counterArr < 2) {
                        Arr[counterArr] = [coords[0].toPrecision(6), coords[1].toPrecision(6)];

                    }
                    if (counterArr == 0) {
                        firstPointRoute = new ymaps.GeoObject({
                            geometry: {
                                type: "Point", // тип геометрии - точка
                                coordinates: [Arr[0][0], Arr[0][1]] // координаты точки
                            },
                            properties: {
                                iconContent: "Начало улицы",
                                balloonContentHeader: "<a href='#' onclick='setHandlerS()'>Удалить Обьект</a>",
                                balloonContent: "[" + coords[0].toPrecision(6) + "," + coords[1].toPrecision(6) + "]"
                            }
                        },
                        { draggable: true, preset: "islands#darkGreenStretchyIcon" });
                        firstPointRoute.events.add("dragend", function (e) {

                            var coords = firstPointRoute.geometry.getCoordinates();
                            Arr[0] = [coords[0].toPrecision(6), coords[1].toPrecision(6)];
                            //изменение координат при пертягивание метки
                            var object = e.get('target');
                            object.properties.set("balloonContent", "[" + coords[0].toPrecision(6) + "," + coords[1].toPrecision(6) + "]");

                        });

                        myMap.geoObjects.add(firstPointRoute);
                        identifierForDelete++;
                    }
                    counterArr++;

                    if (Arr.length == 2) {

                        SetRoute(Arr);
                        //задать несколько маршрутов
                        //Arr = [];
                        //counterArr = 0;
                        myMap.events.remove('dblclick', handlerRoute);

                    }
                }

                myMap.events.add('dblclick', handlerRoute);

            }
        } else {
            alert('Вы не можете редактировать улицу пока на нем находится хотя бы один участок');
        }

    }
    //удаление сегмента
    function deleteSegment(index) {

        countElementSegGlobal.length--;

        myMap.geoObjects.remove(myMap.geoObjects.get(massSegment[index - 1]));
        myMap.geoObjects.remove(myMap.geoObjects.get(massSegment[index - 1] - 1));

        for (var i = index - 1; i < massSegment.length; i++) {
            massSegment[i] = massSegment[i] - 2;
        };

        massSegment.splice(index - 1, 1);

        var j = 1;
        myMap.geoObjects.each(function (el, index) {

            for (var i = 0; i < massSegment.length; i++) {
                if (massSegment[i] == index) {


                    el.properties.set({
                        iconContent: j,
                        balloonContentHeader: "<a href='#' onclick='deleteSegment(" + j + ")'>Удалить Обьект</a>",
                    });
                    j++;
                };
            }

        });
        var indexOffset = false;
        var previousDom = $('[id^=segment]:has("*")').eq(0);
        var countElement = $('[id^=segment]:has("*")');
        var indexSkipOfFirst = false;
        $('[id^=segment]:has("*")').each(function (ind, domElement) {

            if (((ind + 1) == parseInt(index) || indexOffset == true)) {

                if (indexSkipOfFirst == true) {
                    $(previousDom).html(domElement.innerHTML);
                }
                //изменения содержимого сегмента
                if (countElement.length != 1) {
                    $(previousDom).attr("id", "segment" + ind + "");
                    $(previousDom).find("u").first().text("Координаты участка " + ind);
                    $(previousDom).find("input").first().attr("id", "breadthSegS" + ind);
                    $(previousDom).find("input").eq(1).attr("id", "lengthSegS" + ind);
                    $(previousDom).find("input").eq(2).attr("id", "breadthSegE" + ind);
                    $(previousDom).find("input").last().attr("id", "lengthSegE" + ind);

                    //чистка модальных окон

                    $('[id^="ModalRoadSigns' + index + ']').remove();
                    $('[id^="ModalRoadSigns"]').each(function (ind, element) {
                        $(element).attr("id", "ModalRoadSigns" + (ind + 1)).find(".buttonclose").attr("onclick", "cleaningRoadSigns(" + (ind + 1) + ")");
                    });
                    //$('[data-target^="#DataOfRoad"]').each(function (ind, element) {
                    //    $(element).attr("data-target", "ModalRoadSigns" + (ind + 1));
                    //});

                    $('[id^="RoadBarriers' + index + ']').remove();
                    $('[id^="RoadBarriers"]').each(function (ind, element) {
                        $(element).attr("id", "RoadBarriers" + (ind + 1)).find(".buttonclose").attr("onclick", "cleaningRoadBarriers(" + (ind + 1) + ")");
                    });
                }
                previousDom = domElement;
                if (indexSkipOfFirst == false)
                    indexSkipOfFirst = true;
                indexOffset = true;
            }
            if ((countElement.length) == (ind + 1)) {
                if (index != 1) {
                    $(domElement).html("");
                } else {
                    $("#breadthSegS1").attr("value", "");
                    $("#lengthSegS1").attr("value", "");
                    $("#breadthSegE1").attr("value", "");
                    $("#lengthSegE1").attr("value", "");
                }
                if ((countElement.length - 5) % 3 == 0 && index != 2) {
                    $(domElement).closest(".form-group").remove();
                }
                $("#CountSides").val((parseInt($("#CountSides").val()) - 1).toString());
            }
        });
        if (countElement.length == 5) {
            $("#interData+div").remove();
            $("#segment4").after("<div>" +
                "<button type='button' class='btn btn-success setSegment'>Задать/Изменить координаты</button>" +
                 "<button id='BlockSegment' class='btn btn-warning'>Сохранить</button>" +
            "</div>");

            $("#interData+h5").css("clear", "none");
            tempDataFor3 = 5;
        }

        $(".DataOfRoad" + index).remove();
        $('[class^="DataOfRoad"]').each(function (ind, element) {
            if (countElement.length != 0) {
                $(element).attr("class", "DataOfRoad" + (ind + 1));
                $(element).find("u").text("Участок " + (ind + 1));
                $(element).find("[data-target^='#ModalRoadSigns']").attr("data-target", "#ModalRoadSigns" + (ind + 1));
                $(element).find("[data-target^='#RoadBarriers']").attr("data-target", "#RoadBarriers" + (ind + 1));
            }
        });
        increment = massSegment.length + 1;


    }
    //чистка полей
    function cleaningRoadSigns(par) {

        $("#ModalRoadSigns" + par + " input").each(function (indx, element) {
            $(element).val("");
        });

        $('[data-target="#ModalRoadSigns' + par + '"]').removeClass("btn-danger");
        $('[data-target="#ModalRoadSigns' + par + '"]').addClass("btn-default");
    }
    function cleaningModalMackUp() {

        $("#ModalMackUp input").each(function (indx, element) {
            $(element).val("");
        });
        $('[data-target="#ModalMackUp"]').removeClass("btn-danger");
        $('[data-target="#ModalMackUp"]').addClass("btn-default");
    }

    function cleaningRoadBarrier(par) {

        $("#RoadBarriers" + par + " input").each(function (indx, element) {
            $(element).val("");
        });
        $('[data-target="#RoadBarriers' + par + '"]').removeClass("btn-danger");
        $('[data-target="#RoadBarriers' + par + '"]').addClass("btn-default");
    }
    //изменения цвета
    function changeColorMackUp() {

        $('[data-target="#ModalMackUp"]').removeClass("btn-default");
        $('[data-target="#ModalMackUp"]').addClass("btn-danger");
    }

    function changeColorRoadSigns(par) {
        $('[data-target="#ModalRoadSigns' + par + '"]').removeClass("btn-default");
        $('[data-target="#ModalRoadSigns' + par + '"]').addClass("btn-danger");
    }

    function changeColorRoadBarriers(par) {
        $('[data-target="#RoadBarriers' + par + '"]').removeClass("btn-default");
        $('[data-target="#RoadBarriers' + par + '"]').addClass("btn-danger");
    }

    //задание координат
    $(document).ready(function () {
        $('[data-target="#ModalTable"]').click(function () {

            var textStreet = $('[name="Street.Name"]').val();

            if (textStreet != "") {
                $('#text').text(textStreet);
            }
        });

        function setSegment(eventObject) {

            if ($(eventObject.target).next("button").css("display") == "none") {
                $("#BlockSegment").css("display", "inline-block");
            }
            if (currentRoute == undefined || $("#blockStreetCoord").css("display") == "inline") {
                alert("Задайте улицу или возможно нажмите кнопку сохранить в этом пункте");
            } else {

                if (identifierForDelBallon == true) {

                    currentRoute.getPaths().get(0).balloon.destroy();

                    identifierForDelBallon = false;
                }

                handlerSegment = function (e) {
                    countElementSegGlobal.length++;

                    var coords = e.get('coords');

                    ymaps.route([
                            tempData,
                            [coords[0].toPrecision(6), coords[1].toPrecision(6)]
                    ],
                        {
                            mapStateAutoApply: true,
                            removeViaPoints: true
                        }
                    ).then(
                        function (route) {


                            var pathsObjects = ymaps.geoQuery(currentRoute.getPaths()),
                            edges = [];

                            // Переберем все сегменты и разобьем их на отрезки.
                            pathsObjects.each(function (path) {
                                var coordinates = path.geometry.getCoordinates();
                                for (var i = 1, l = coordinates.length; i < l; i++) {
                                    edges.push({
                                        type: 'LineString',
                                        coordinates: [coordinates[i], coordinates[i - 1]]

                                    });
                                }
                            });
                            CountObjectInMap = edges.length;


                            route.getPaths().options.set({

                                //можно выставить настройки графики маршруту
                                strokeColor: '#FF0000',
                                opacity: 0.9,
                                strokeWidth: 4
                            });


                            if (increment >= 2 && increment <= 4) {

                                $("#segment" + increment).html(
                                    '<b><u>Координаты участка ' + increment + '</u></b>' +
                                    '<div>Начальнаты начала</div>' +
                                    '<div><label for="Segment.BreadthS">Широта</label> <input id="breadthSegS' + increment + '" name="Segment.BreadthS" readonly="" type="text" value="">' +
                                    '<label for="Segment.LengthS">Долгота</label> <input id="lengthSegS' + increment + '" name="Segment.LengthS" readonly="" type="text" value="">' +
                                    '</div><div>Координаты конца</div><div>' +
                                    '<label for="Segment.BreadthE">Широта</label> <input id="breadthSegE' + increment + '" name="Segment.BreadthE" readonly="" type="text" value="">' +
                                    '<label for="Segment.LengthE">Долгота</label> <input id="lengthSegE' + increment + '" name="Segment.LengthE" readonly="" type="text" value=""></div></div>'
                                    );
                            }

                            if (increment > 4) {

                                if (increment == 5) {
                                    $("#segment4+div").remove();
                                    $("#interData+h5").css("clear", "left");
                                    $("#interData").after('<div style="float: left"  >' +
                                        '<button type="button"  class="btn btn-default setSegment">Задать/Изменить координаты</button>' +
                                        '<button id="BlockSegment" type="button" style="display: none" class="btn btn-primary">Сохранить</button>' +
                                        '</div>');
                                }
                                if (tempDataFor3 == increment) {
                                    $("#interData").before('<div class="form-group" style="margin-top: 10px"><div id="segment' + increment + '" style="width: 30.2%;float: left;height: 115px"></div><div id="segment' + (increment + 1) + '" style="width:29%;float: left;height: 115px"></div><div id="segment' + (increment + 2) + '" style="width: 39.8%;float: left;height: 115px"></div></div>');
                                    tempDataFor3 = tempDataFor3 + 3;
                                }
                                $("#segment" + increment).html('<b><u>Координаты участка ' + increment + '</u></b>' +
                                    '<div>Начальнаты начала</div>' +
                                    '<div><label for="Segment.BreadthS">Широта</label> <input id="breadthSegS' + increment + '" name="Segment.BreadthS" readonly="" type="text" value="">' +
                                    '<label for="Segment.LengthS">Долгота</label> <input id="lengthSegS' + increment + '" name="Segment.LengthS" readonly="" type="text" value="">' +
                                    '</div><div>Координаты конца</div>' +
                                    '<div>' +
                                    '<label for="Segment.BreadthE">Широта</label> <input id="breadthSegE' + increment + '" name="Segment.BreadthE" readonly="" type="text" value="">' +
                                    '<label for="Segment.LengthE">Долгота</label> <input id="lengthSegE' + increment + '" name="Segment.LengthE" readonly="" type="text" value=""></div><div>' +
                                    '</div></div>'
                                );
                            }
                            if (increment != 1) {
                                $('[class^="DataOfRoad"]:last').after("<div style='clear: both' class='DataOfRoad" + increment + "'>" +
                                                                "<div>" +
                                                                    "<b><u>Участок " + increment + "</u></b>" +
                                                                "</div>" +
                                                                "<div class='file_upload col-lg-4 col-md-4 col-sm-4 col-xs-4' style='float: left'>" +
                                                                    "<button type='button' id='changeColorDislocation" + increment + "'  class='btn btn-default'>Загрузить Дислокацию ТСОДД</button> " +
                                                                "<input name='layoutDislocation" + increment + "' onchange=\"$('#changeColorDislocation" + increment + "').removeClass('btn-default').addClass('btn-danger');\" type='file'>" +
                                                                "</div>" +
                                                                "<div class='col-lg-4 col-md-4 col-sm-4 col-xs-4' style='float: left'>" +
                                                                    "<button type='button' class='btn btn-default' data-toggle='modal' data-target='#ModalRoadSigns" + increment + "'>Ввести данные о дорожных знаках</button>" +
                                                                "</div>" +
                                                                "<div class='col-lg-4 col-md-4 col-sm-4 col-xs-4' >" +
                                                                   "<button type='button' class='btn btn-default' data-toggle='modal' data-target='#RoadBarriers" + increment + "'>Ввести данные о дорожных ограждениях</button>" +
                                                                "</div>" +
                                                              "</div>");

                                //вставка модальных окон

                                $('[id^="ModalRoadSigns"]:last').after($('#ModalRoadSigns1').clone()
                                 .attr("id", "ModalRoadSigns" + increment).find(".buttonclose")
                                 .attr("onclick", "cleaningRoadSigns(" + increment + ")").end().find("td input").each(function (ind, element) {
                                     $(element).attr("name", increment + $(this).attr("name").substr(1));
                                 }).end().find(".buttonSave").attr("onclick", "changeColorRoadSigns(" + increment + ")").end());

                                $('[id^="RoadBarriers"]:last').after($('#RoadBarriers1').clone()
                                    .attr("id", "RoadBarriers" + increment).find(".buttonclose")
                                    .attr("onclick", "cleaningRoadBarrier(" + increment + ")").end()
                                    .find("td input").each(function (ind, element) {
                                        $(element).attr("name", increment + $(this).attr("name").substr(1));
                                    }).end().find(".buttonSave").attr("onclick", "changeColorRoadBarriers(" + increment + ")").end());


                            }

                            $("#CountSides").val(increment); $("#breadthSegS" + increment).attr("value", tempData[0]);
                            $("#lengthSegS" + increment).attr("value", tempData[1]);
                            $("#breadthSegE" + increment).attr("value", coords[0].toPrecision(6));
                            $("#lengthSegE" + increment).attr("value", coords[1].toPrecision(6));
                            var segment = new ymaps.GeoObject({
                                geometry: {
                                    type: "Point", // тип геометрии - точка
                                    coordinates: [coords[0].toPrecision(6), coords[1].toPrecision(6)] // координаты точки

                                },
                                properties: {
                                    iconContent: increment,
                                    balloonContentHeader: "<a href='#' onclick='deleteSegment(" + increment + ")'>Удалить Обьект</a>",
                                    balloonContent: "[" + coords[0].toPrecision(6) + "," + coords[1].toPrecision(6) + "]"
                                }
                            },
                            {
                                preset: "islands#blueCircleIcon",
                                draggable: true
                            });

                            var myCircle = new ymaps.Circle([[coords[0].toPrecision(6), coords[1].toPrecision(6)], 3], null, { draggable: true, visible: false });
                            //Добавление пути сегмента на карту

                            //if (parseInt(myMap.geoObjects.getLength()) > CountObjectInMap+1) {
                            //    myMap.geoObjects.splice(CountObjectInMap + 2, 1, route.getPaths());

                            //} else {
                            //    myMap.geoObjects.add(route.getPaths());

                            //}

                            myMap.geoObjects.add(myCircle);
                            myMap.geoObjects.add(segment);

                            objects = ymaps.geoQuery([myCircle]);

                            var tempCoordinates;
                            segment.events.add('dragstart', function () {
                                tempCoordinates = segment.geometry._xl[0];
                            });
                            var Edit = increment;
                            segment.events.add('drag', function (e) {

                                $("#breadthSegS" + (Edit + 1).toString()).val(segment.geometry._xl[0][0].toString().substring(0, 7));
                                $("#lengthSegS" + (Edit + 1).toString()).val(segment.geometry._xl[0][1].toString().substring(0, 7));
                                $("#breadthSegE" + Edit).val(segment.geometry._xl[0][0].toString().substring(0, 7));
                                $("#lengthSegE" + Edit).val(segment.geometry._xl[0][1].toString().substring(0, 7));
                            });


                            segment.events.add('dragend', function (e) {

                                var routeObjects = ymaps.geoQuery(edges).setOptions('visible', false).addToMap(myMap);
                                myCircle.geometry.setCoordinates(
                                   segment.geometry._xl[0]
                                );

                                var boundaryObjects = routeObjects.searchIntersect(myCircle);


                                if (boundaryObjects._xg.length == 0) {

                                    segment.geometry.setCoordinates(tempCoordinates);

                                    $("#breadthSegS" + (Edit + 1).toString()).val(segment.geometry._xl[0][0].toString().substring(0, 7));
                                    $("#lengthSegS" + (Edit + 1).toString()).val(segment.geometry._xl[0][1].toString().substring(0, 7));
                                    $("#breadthSegE" + Edit).val(segment.geometry._xl[0][0].toString().substring(0, 7));
                                    $("#lengthSegE" + Edit).val(segment.geometry._xl[0][1].toString().substring(0, 7));
                                }
                            });


                            tempData = [coords[0].toPrecision(6), coords[1].toPrecision(6)];
                            massSegment[increment - 1] = myMap.geoObjects.indexOf(segment);
                            increment++;
                        });
                }
                currentRoute.getPaths().events.add('dblclick', handlerSegment);

            }
        }

        function BlockForm() {
            alert("Вы не сохранили координаты участков");
            return false;
        }

        //отправка формы
        $('form[action="/Home/SaveSuccess"]').on('click', "#BlockSegment", function () {

            $('form[action="/Home/SaveSuccess"]').off("click", "#blockElement button,#blockElement input,#blockForm button", BlockForm);

            $("#BlockSegment").css("display", "none");
            $(".setSegment").one('click', setSegment);
            myMap.geoObjects.each(function (el, index) {

                for (var i = 0; i < massSegment.length; i++) {
                    if (massSegment[i] == index) {
                        el.balloon.destroy();
                        el.options.set({
                            draggable: false
                        });
                    };
                }

            });
        });

        //$('form[action="/Home/SaveSuccess"]').on("click", "#blockElement button,#blockElement input,#blockForm button", BlockForm);


        $(".setSegment").one('click', setSegment);

        $("#breadthS, #lengthS, #breadthE, #lengthE").change(function () {
            Set();
        });
        //закрытие модального окна
        $("#closeModel").click(function () {
            $("#ModalTable").modal('hide');
        });


        //заблокировать наименовае улицы
        $("#blockStreet").click(function () {
            if ($(this).parent().prev().children("input").eq(2).val() != '') {
                $(this).parent().prev().children("input").each(function (indx, element) {
                    $(element).attr("readonly", "");
                });
                $(this).css("display", "none");
            } else {
                alert("Введите название улицы");
            }
        });
        //заблокировать поля  улицы и убрать координаты
        $("#blockStreetCoord").click(function () {

            //делает readOnly  инпуты
            if (currentRoute != undefined && identifierForDelete != 1) {
                $(this).parent().prev().children("input").each(function (indx, element) {
                    $(element).attr("readonly", "");
                });

                $(this).parent().prev().prev().prev().children("input").each(function (indx, element) {
                    $(element).attr("readonly", "");
                });

                $(this).css("display", "none");
                //currentRoute.editor.start({ editWayPoints: false });
                if (currentRoute != undefined) {
                    myMap.geoObjects.remove(currentRoute);
                }
                currentRoute.getPaths().options.set({

                    //можно выставить настройки графики маршруту
                    strokeColor: '0000ffff',
                    opacity: 0.9,
                    strokeWidth: 4
                });
                //var segments= currentRoute.getPaths().get(0).getSegments();

                tempData = Arr[0];

                myMap.geoObjects.add(currentRoute.getPaths());

            } else {
                alert("Задайте сначала маршрут");
            }
        });
        //подсказки улиц
        var autocompleteUrl = '/Home/FindStreets';
        $('[name="Street.Name"]').autocomplete({
            source: autocompleteUrl,
            minLength: 2,
            select: function (event, ui) {

            }
        });
        //при клике по tr фокус по input
        $("tr td").has("input").click(function (eventObject) {

            $(eventObject.target).children().focus();
        });

        //чистка полей в модальном окне при нажатии по close
        $("#close").click(function (e) {

            $("#ModalMackUp input").each(function (indx, element) {
                $(element).val("");
            });
        });


    });

</script>
<style>
    /*стили на для Upload кнопки*/
    .file_upload {
        position: relative;
        overflow: hidden;
        height: 34px; /* example */
        margin-bottom: 10px;
    }

        .file_upload > input {
            max-width: 284px;
        }

        .file_upload input[type=file] {
            position: absolute;
            top: 0;
            width: 100%;
            height: 100%;
            transform: scale(1);
            letter-spacing: 10em; /* IE 9 fix */
            -ms-transform: scale(1); /* IE 9 fix */
            opacity: 0;
            cursor: pointer;
        }
    /*модальное окно*/
    .modal-dialog {
        width: 645px;
    }

    td input {
        border-width: 0;
        text-align: right !important;
    }
    /*правит шрифт бутсрапа*/
    label {
        font-weight: normal;
    }
    /*отступы*/
    .indentForTextBox {
        margin-right: 60px;
    }

    .btn {
        width: 285px;
    }
</style>
<h2 style="text-align: center">Карточка улицы</h2>

@using (Html.BeginForm("SaveSuccess", "Home", null, FormMethod.Post, new
{
    enctype = "multipart/form-data"
}))
{
    <div class="form-inline">
        <div class="form-group col-lg-7 col-md-7 col-sm-7 col-xs-7">
            <div id="map" style="height: 744px;"></div>
        </div>

        <div class="form-group col-lg-5 col-md-5 col-sm-5 col-xs-5">
            <b><u>1.Наименование улицы</u></b>
            <div>
                @Html.HiddenFor(a => a.City.id)
                @Html.Label("Выбирите город", new { @for = "City.Name" }) @Html.TextBoxFor(a => a.City.Name)
                @Html.Label("Выбирите улицу", new { @for = "Street.Name" })@Html.TextBoxFor(a => a.Name, null, new { id = "street" })
            </div>
            <div>
                <button type="button" class="btn btn-default" onclick="search()">Показать на карте</button>
                <button type="button" id="blockStreet" class="btn btn-primary" style="display: none">Сохранить</button>
            </div>
            <h5>После сохранения наименования улицы, появляется возможность задавать ее координаты</h5>
            <b><u>2.Координаты улицы</u></b>
            <div>Начальнаты начала</div>
            <div>
                @Html.Label("Широта", new { @for = "Street.BreadthS" }) @Html.TextBoxFor(a => a.BreadthS, null, new { id = "breadthS", @readonly = "", Name = "Street.BreadthS" })
                @Html.Label("Долгота", new { @for = "Street.LengthS" }) @Html.TextBoxFor(a => a.LengthS, null, new { id = "lengthS", @readonly = "", Name = "Street.LengthS" })
            </div>
            <div>Координаты конца</div>
            <div>
                @Html.Label("Широта", new { @for = "Street.BreadthE" }) @Html.TextBoxFor(a => a.BreadthE, null, new { id = "breadthE", @readonly = "", Name = "Street.BreadthE" })
                @Html.Label("Долгота", new { @for = "Street.LengthE" }) @Html.TextBoxFor(a => a.LengthE, null, new { id = "lengthE", @readonly = "", Name = "Street.LengthE" })
            </div>
            <div>
                <button type="button" onclick="SetCoords()" class="btn btn-default">Задать/Изменить координаты</button>
                <button type="button" id="blockStreetCoord" class="btn btn-primary" style="display: none">Сохранить</button>
            </div>
            <h5>После сохранения координат улицы, появляется возможность задавать координаты участков</h5>
            <b><u>3.Количество и координаты участков улицы</u></b>
            <div>
                @Html.Label("Количество участков", new { @for = "CountSides", style = "margin-right: 20px" }) @Html.TextBoxFor(a => a.Segment.Count, null, new { id = "CountSides", style = "width: 40px", @readonly = "", Name = "CountSides" })
            </div>
            <div id="segment1">

            </div>
            <div id="segment2">
            </div>
            <div id="segment3">
            </div>
            <div id="segment4">
            </div>
            <div>
                <button type="button" class="btn btn-default setSegment">Задать/Изменить координаты</button>
                <button id="BlockSegment" type="button" class="btn btn-primary" style="display: none">Сохранить</button>
            </div>

        </div>

    </div>
    <div id="interData"></div>
    <h5>После сохранения координат участков, появляется возможность вводить информацию об участках</h5>
    <!-- ModalMackUp -->
    <div class="modal fade" id="ModalMackUp" tabindex="-1" role="dialog" data-backdrop="false" aria-labelledby="myModalLabel">
        <div class="modal-dialog" style="width: 1000px" role="document">
            <div class="modal-content">
                <div class="modal-header">

                    <h4 class="modal-title" id="myModalLabel">
                        Спецификация горизонтальной дорожной разметки
                        <p>по ул. <span id="text">_________________</span> в г. Минске
                    </h4>

                </div>
                <div class="modal-body">
                    <table class="table table-bordered">
                        <tr>
                            <th>№ разметки</th>
                            <th>Картинка</th>
                            <th>Описание</th>
                            <th>Длина (м.пог) / штуки</th>
                            <th>Площадь (м.кв)</th>
                        </tr>
                        @foreach (var item in (IEnumerable<oncloud.Domain.Entities.TheHorizontalRoadMarking>)ViewBag.RoadMarking)
                        {
                            <tr>
                                <td>@item.NumberMarking</td>
                                <td>
                                    @if (item.ImageData != null)
                                    {
                                        <img src="@Url.Action("GetImage",  "HorizontalRoadMarkings", new { item.id})" />
                                    }
                                </td>
                                <td>
                                    @item.description
                                </td>
                            
                                    @if (Model.SpecificationofRM.Any(a=>a.TheHorizontalRoadMarking_id == item.id))
                                    {
                                        <td style="vertical-align: middle">
                                            @try
                                            {
                                                if (Model.SpecificationofRM.Single(a => a.TheHorizontalRoadMarking_id == item.id).length == null)
                                                {
                                                    <input name="ModalsL@(item.NumberMarking)" value="" type="text"/>
                                                }
                                                else
                                                {
                                                    <input name="ModalsL@(item.NumberMarking)" value="@Model.SpecificationofRM.Single(a => a.TheHorizontalRoadMarking_id == item.id).length" type="text"/>
                                                }
                                            }
                                            catch  { }
                                        </td>
                                        <td style="vertical-align: middle">
                                            @try
                                            {
                                                if (Model.SpecificationofRM.Single(a => a.TheHorizontalRoadMarking_id == item.id).area == null)
                                                {
                                                    <input name="ModalsA@(item.NumberMarking)" type="text"/>
                                                }
                                                else
                                                {
                                                    <input name="ModalsA@(item.NumberMarking)" value="@Model.SpecificationofRM.Single(a => a.TheHorizontalRoadMarking_id == item.id).area" type="text"/>
                                                }
                                            }
                                            catch { }
                                        </td>
                                       
                                    }
                                    else
                                    {
                                        <td style="vertical-align: middle"><input name="ModalsL@(item.NumberMarking)" type="text" /></td>
                                        <td style="vertical-align: middle"><input name="ModalsA@(item.NumberMarking)" type="text" /></td>
                                    }
                                
                            </tr>
                        }

                    </table>
                </div>
                <div class="modal-footer">
                    <button type="button" id="closeModalMackUp" onclick="cleaningModalMackUp()" class="btn btn-default" data-dismiss="modal">Закрыть</button>
                    <button type="button" class="btn btn-primary" onclick="changeColorMackUp()" data-dismiss="modal">Сохранить</button>
                </div>
            </div>
        </div>
    </div>

     <!-- ModalRoadSigns -->
    <div class="modal fade" id="ModalRoadSigns1" tabindex="-1" role="dialog" data-backdrop="false" aria-labelledby="myModalLabel">
        <div class="modal-dialog" role="document">
            <div class="modal-content" style="width: 800px">
                <div class="modal-header">


                </div>
                <div class="modal-body">
                    <div>

                        <!-- Nav tabs -->
                        <ul style="width: 400px" class="nav nav-tabs" role="tablist">
                            <li role="presentation" class="active"><a href="#tab1" aria-controls="1" role="tab" data-toggle="tab">1</a></li>
                            <li role="presentation"><a href="#tab2" aria-controls="2" role="tab" data-toggle="tab">2</a></li>
                            <li role="presentation"><a href="#tab3" aria-controls="3" role="tab" data-toggle="tab">3</a></li>
                            <li role="presentation"><a href="#tab4" aria-controls="4" role="tab" data-toggle="tab">4</a></li>
                            <li role="presentation"><a href="#tab5" aria-controls="5" role="tab" data-toggle="tab">5</a></li>
                            <li role="presentation"><a href="#tab6" aria-controls="6" role="tab" data-toggle="tab">6</a></li>
                            <li role="presentation"><a href="#tab7" aria-controls="7" role="tab" data-toggle="tab">7</a></li>

                        </ul>

                        <!-- Tab panes -->
                        <div class="tab-content">
                            <div role="tabpanel" class="tab-pane active" id="tab1">
                                @{ Session["increment"] = "1";
                                    Html.RenderPartial("Partials/RoadSingns", (IEnumerable<oncloud.Domain.Entities.RoadSigns>)ViewBag.RoadSigns);}

                            </div>
                            <div role="tabpanel" class="tab-pane" id="tab2">
                                @{ Session["increment"] = "2";
                                    Html.RenderPartial("Partials/RoadSingns", (IEnumerable<oncloud.Domain.Entities.RoadSigns>)ViewBag.RoadSigns);}

                            </div>
                            <div role="tabpanel" class="tab-pane" id="tab3">
                                @{ Session["increment"] = "3";
                                    Html.RenderPartial("Partials/RoadSingns", (IEnumerable<oncloud.Domain.Entities.RoadSigns>)ViewBag.RoadSigns);}
                            </div>
                            <div role="tabpanel" class="tab-pane" id="tab4">
                                @{ Session["increment"] = "4";
                                    Html.RenderPartial("Partials/RoadSingns", (IEnumerable<oncloud.Domain.Entities.RoadSigns>)ViewBag.RoadSigns);}
                            </div>
                            <div role="tabpanel" class="tab-pane" id="tab5">
                                @{ Session["increment"] = "5";
                                    Html.RenderPartial("Partials/RoadSingns", (IEnumerable<oncloud.Domain.Entities.RoadSigns>)ViewBag.RoadSigns);}
                            </div>
                            <div role="tabpanel" class="tab-pane" id="tab6">
                                @{ Session["increment"] = "6";
                                    Html.RenderPartial("Partials/RoadSingns", (IEnumerable<oncloud.Domain.Entities.RoadSigns>)ViewBag.RoadSigns);}
                            </div>
                            <div role="tabpanel" class="tab-pane" id="tab7">
                                @{ Session["increment"] = "7";
                                    Html.RenderPartial("Partials/RoadSingns", (IEnumerable<oncloud.Domain.Entities.RoadSigns>)ViewBag.RoadSigns);}
                            </div>
                        </div>

                    </div>

                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-default buttonclose" onclick="cleaningRoadSigns(1)" data-dismiss="modal">Закрыть</button>
                    <button type="button" class="btn btn-primary buttonSave" onclick="changeColorRoadSigns(1)" data-dismiss="modal">Сохранить</button>
                </div>
            </div>
        </div>
    </div>
        <!-- RoadBarriers  -->
    <div class="modal fade" id="RoadBarriers1" tabindex="-1" role="dialog" data-backdrop="false" aria-labelledby="myModalLabel">
        <div class="modal-dialog" style="width: 1000px" role="document">
            <div class="modal-content">
                <div class="modal-header">

                </div>
                <div class="modal-body">
                    <table class="table table-bordered">
                        <tr>
                            <th>№ </th>
                            <th>Картинка</th>
                            <th>Описание</th>
                            <th>Погонные метры</th>
                        </tr>
                        @foreach (var item in (IEnumerable<oncloud.Domain.Entities.RoadBarriers>)ViewBag.RoadBarriers)
                        {
                            <tr>

                                <td>@item.NumberBarriers</td>
                                <td>
                                    @if (item.ImageData != null)
                                    {
                                        <img style="width: 100px;height: 100px" src="@Url.Action("GetImage",  "RoadBarriers", new { item.Id})" />
                                    }
                                </td>
                                <td>
                                    @item.Description
                                </td>
                                <td style="vertical-align: middle"><input name="1RoadBarriersMeters@(item.NumberBarriers)" type="text" /></td>

                            </tr>
                        }

                    </table>
                </div>
                <div class="modal-footer">
                    <button type="button" id="closeModalMackUp" onclick="cleaningRoadBarrier(1)" class="btn btn-default buttonclose" data-dismiss="modal">Закрыть</button>
                    <button type="button" class="btn btn-primary buttonSave" onclick="changeColorRoadBarriers(1)" data-dismiss="modal">Сохранить</button>
                </div>
            </div>
        </div>
    </div>

    <div>
        <div id="blockElement" style="clear: both">
            <div>
                <b><u>4.Ввод данных</u></b>
            </div>
            <div class="file_upload  col-lg-4 col-md-4 col-sm-4 col-xs-4">
                <button class="btn btn-default" id="changeColorScheme1" type="button">Загрузить компоновочную схему</button>
                <input onchange='$("#changeColorScheme1").removeClass("btn-default").addClass("btn-danger");' name="layoutScheme" type="file">
            </div>
            <div class="col-lg-4 col-md-4 col-sm-4 col-xs-4">
                <button type="button" class="btn btn-default" data-toggle="modal" data-target="#ModalMackUp">Ввести спецификацию разметки</button>
            </div>
            <div style="clear: both" class="DataOfRoad1">
                <div>
                    <b><u>Участок 1</u></b>
                </div>

                <div class="file_upload col-lg-4 col-md-4 col-sm-4 col-xs-4" style="float: left">
                    <button type="button" id="changeColorDislocation1" class="btn btn-default">Загрузить Дислокацию ТСОДД</button>
                    <input name="layoutDislocation1" onchange='$("#changeColorDislocation1").removeClass("btn-default").addClass("btn-danger");' type="file">
                </div>
                <div class=" col-lg-4 col-md-4 col-sm-4 col-xs-4" style="float: left">
                    <button type="button" class="btn btn-default" data-toggle="modal" data-target="#ModalRoadSigns1">Ввести данные о дорожных знаках</button>
                </div>
                <div class=" col-lg-4 col-md-4 col-sm-4 col-xs-4">
                    <button type="button" class="btn btn-default" data-toggle="modal" data-target="#RoadBarriers1">
                        Ввести данные о дорожных ограждениях
                    </button>
                </div>
            </div>
        </div>
    </div>
    <div id="blockForm" style="margin-left: 60%; margin-top: 60px">
        @Html.ActionLink("Выйти без сохранения", "Table", "Home", new { @class = "btn btn-default", style = "float:left" }) <button class="btn btn-primary">Сохранить</button>
    </div>

    }
