@using Newtonsoft.Json
@model  oncloud.Domain.Entities.Street
@{
    ViewBag.Title = "EditStreets";
}


<script type="text/javascript">
    ymaps.ready(init);
    var myMap, myPlacemark, Arr = [[]], counterArr = 0, handlerRoute, currentRoute, ModalMackUpSave = new Array(), ModalRoadSignsSave = [], RoadBarriersSave = [],
        firstPointRoute, endPointRoute, position, identifierForDelete = 0, routeSegment, ModalRoadSignsModal = false,
        increment = 1, tempData = [], tempDate2 = [], tempDataFor3 = 5, objects, identifierForDelBallon = true, CoordinatesforFirstLoad,
        CountObjectInMap, transfercurrentRoute, massSegment = [], handlerSegment, countElementSegGlobal, indexAutoRs = new Array(), indexAutoRB = new Array(), indexAutoRm = new Array();
    incForTab1 = 8, incForTab2 = 8;

    function init() {

        myMap = new ymaps.Map("map", {
            center: [53.9172, 27.5601],
            zoom: 11,
            controls: []
        });

        myMap.behaviors.disable(["dblClickZoom"]);
        myMap.controls.add(
                        new ymaps.control.TypeSelector(
                            ['yandex#map', 'yandex#hybrid', 'yandex#satellite']
                        )
    );
        ymaps.route([
                ['@Model.BreadthS', '@Model.LengthS'],
                ['@Model.BreadthE', '@Model.LengthE']
        ],
            {
                mapStateAutoApply: true,
                removeViaPoints: true
            }
        ).then(
             function (route) {
                 route.events.add('dragend', function (e) {
                     Arr[0] = [route.requestPoints[0][0].toString().substr(0, 7), route.requestPoints[0][1].toString().substr(0, 7)];
                     Arr[1] = [route.requestPoints[1][0].toString().substr(0, 7), route.requestPoints[1][1].toString().substr(0, 7)];
                 });
                 route.editor.start({
                     editWayPoints: true
                 });

                 var points = route.getWayPoints();
                 points.get(0).properties.set("iconContent", "Начало улицы");
                 points.get(0).properties.set("balloonContentHeader", "<a href='#' onclick='setHandlerS()'>Удалить Обьект</a>");
                 points.get(0).options.set('preset', 'islands#darkGreenStretchyIcon');


                 points.get(1).properties.set("iconContent", "Конец улицы");
                 points.get(1).properties.set("balloonContentHeader", "<a href='#' onclick='setHandlerE()'>Удалить Обьект</a>");
                 points.get(1).options.set("preset", "islands#darkGreenStretchyIcon");

                 route.getPaths().options.set({

                     //можно выставить настройки графики маршруту
                     strokeColor: '0000ffff',
                     opacity: 0.9
                 });
                 currentRoute = route;

                 route.getPaths().options.set({
                     //можно выставить настройки графики маршруту
                     strokeColor: '0000ffff',
                     opacity: 0.9,
                     strokeWidth: 4,
                     mapStateAutoApply: true
                 });

                 //нужно для масшатабирования
                 myMap.geoObjects.add(route);
                 myMap.geoObjects.remove(route);

                 myMap.geoObjects.add(route.getPaths());
                 identifierForDelete = 0;
                 var DataOfSegment = JSON.parse('@Html.Raw(JsonConvert.SerializeObject(Model.Segment.Select(a=>new {a.LengthS,a.LengthE,a.BreadthE,a.BreadthS,a.ChangeDislocationTCODD,a.string120Symbol})
                                                , Formatting.None,
                    new JsonSerializerSettings() {
                        ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Ignore
                }))');
                 var DataOfRoadSings = JSON.parse('@Html.Raw(JsonConvert.SerializeObject(Model.SpecificationofRS.Select(a=>new {a.CountRS,a.Segment.Name,a.RoadSigns.NumberRoadSigns,a.ItemOrderId})
                                                , Formatting.None,
                    new JsonSerializerSettings() {
                        ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Ignore
                    }))');
                 var DataOfRoadBarriers = JSON.parse('@Html.Raw(JsonConvert.SerializeObject(Model.SpecificationOfRb.Select(a => new {a.Segment.Name, a.Length, a.RoadBarriers.NumberBarriers})
                                                          , Formatting.None,
                                                          new JsonSerializerSettings()
                                                          {
                                                              ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Ignore
                                                          }))');



                 var setSegment = function (i) {
                     var pathsObjects = ymaps.geoQuery(currentRoute.getPaths()),
                   edges = [];

                     // Переберем все сегменты и разобьем их на отрезки.
                     pathsObjects.each(function (path) {
                         var coordinates = path.geometry.getCoordinates();
                         for (var i = 1, l = coordinates.length; i < l; i++) {
                             edges.push({
                                 type: 'LineString',
                                 coordinates: [coordinates[i], coordinates[i - 1]]

                             });
                         }
                     });
                     var segment = new ymaps.GeoObject({
                         geometry: {
                             type: "Point", // тип геометрии - точка
                             coordinates: [DataOfSegment[i].BreadthE, DataOfSegment[i].LengthE] // координаты точки

                         },
                         properties: {
                             iconContent: increment,
                             balloonContentHeader: "<a href='#' onclick='deleteSegment(" + increment + ")'>Удалить Обьект</a>",
                             balloonContent: "[" + DataOfSegment[i].BreadthE + "," + DataOfSegment[i].LengthE + "]"
                         }
                     },
                                                      {
                                                          preset: "islands#grayCircleIcon",
                                                          draggable: true

                                                      });
                     if ((i + 1) == 1)
                         tempDate2.push(['@Model.BreadthS', '@Model.LengthS']);
                     if ("@Model.Segment.Count" != (i + 1))
                         tempDate2.push([DataOfSegment[i].BreadthE, DataOfSegment[i].LengthE]);

                     if (DataOfSegment[i].ChangeDislocationTCODD == true) {

                         segment.options.set("preset", "islands#redCircleIcon");
                     }
                     var myCircle = new ymaps.Circle([[DataOfSegment[i].BreadthS, DataOfSegment[i].LengthE], 3], null, { draggable: true, visible: false });

                     myMap.geoObjects.add(myCircle);
                     myMap.geoObjects.add(segment);
                     objects = ymaps.geoQuery([myCircle]);

                     var tempCoordinates;
                     segment.events.add('dragstart', function () {
                         tempCoordinates = segment.geometry._xl[0];

                     });
                     var Edit = increment;
                     segment.events.add('drag', function (e) {

                         $("#breadthSegS" + (Edit + 1).toString()).val(segment.geometry._xl[0][0].toString().substring(0, 7));
                         $("#lengthSegS" + (Edit + 1).toString()).val(segment.geometry._xl[0][1].toString().substring(0, 7));
                         $("#breadthSegE" + Edit).val(segment.geometry._xl[0][0].toString().substring(0, 7));
                         $("#lengthSegE" + Edit).val(segment.geometry._xl[0][1].toString().substring(0, 7));
                     });


                     segment.events.add('dragend', function (e) {

                         var routeObjects = ymaps.geoQuery(edges).setOptions('visible', false).addToMap(myMap);
                         myCircle.geometry.setCoordinates(
                            segment.geometry._xl[0]
                         );

                         var boundaryObjects = routeObjects.searchIntersect(myCircle);


                         if (boundaryObjects._xg.length == 0) {

                             segment.geometry.setCoordinates(tempCoordinates);

                             $("#breadthSegS" + (Edit + 1).toString()).val(segment.geometry._xl[0][0].toString().substring(0, 7));
                             $("#lengthSegS" + (Edit + 1).toString()).val(segment.geometry._xl[0][1].toString().substring(0, 7));
                             $("#breadthSegE" + Edit).val(segment.geometry._xl[0][0].toString().substring(0, 7));
                             $("#lengthSegE" + Edit).val(segment.geometry._xl[0][1].toString().substring(0, 7));
                         }
                     });




                     if (i + 1 >= 1 && i + 1 <= 4) {

                         $("#segment" + (i + 1)).html(
                             '<b><u>Координаты участка ' + (i + 1) + '</u></b>' +
                             '<div>Начальнаты начала</div>' +
                             '<div><label for="Segment.BreadthS">Широта</label> <input id="breadthSegS' + (i + 1) + '" name="Segment.BreadthS" value="' + DataOfSegment[i].BreadthS + '" readonly="" type="text" value="">' +
                             '<label for="Segment.LengthS">Долгота</label> <input id="lengthSegS' + (i + 1) + '" name="Segment.LengthS" value="' + DataOfSegment[i].LengthS + '" readonly="" type="text" value="">' +
                             '</div><div>Координаты конца</div><div>' +
                             '<label for="Segment.BreadthE">Широта</label> <input id="breadthSegE' + (i + 1) + '" name="Segment.BreadthE" value="' + DataOfSegment[i].BreadthE + '" readonly="" type="text" value="">' +
                             '<label for="Segment.LengthE">Долгота</label> <input id="lengthSegE' + (i + 1) + '" name="Segment.LengthE" value="' + DataOfSegment[i].LengthE + '" readonly="" type="text" value=""></div></div>'
                             );
                     }

                     if ((i + 1) > 4) {

                         if ((i + 1) == 5) {
                             $("#segment4").parent().next().remove();
                             $("#interData+h5").css("clear", "left");
                             $("#interData").after('<div style="float: left"  >' +
                                 '<button type="button"  class="btn btn-default setSegment">Задать/Изменить координаты</button>' +
                                 '<button id="BlockSegment" type="button" style="display: none" class="btn btn-primary">Сохранить</button>' +
                                 '</div>');
                         }
                         if (tempDataFor3 == (i + 1)) {
                             $("#interData").before('<div class="form-group ShowHideSegment"  style="margin-top: 10px;display: none"><div id="segment' + (i + 1) + '" style="width: 30.2%;float: left;height: 115px"></div><div id="segment' + (i + 2) + '" style="width:29%;float: left;height: 115px"></div><div id="segment' + (i + 3) + '" style="width: 39.8%;float: left;height: 115px"></div></div>');
                             tempDataFor3 = tempDataFor3 + 3;
                         }
                         $("#segment" + (i + 1)).html('<b><u>Координаты участка ' + (i + 1) + '</u></b>' +
                             '<div>Начальнаты начала</div>' +
                             '<div><label for="Segment.BreadthS">Широта</label> <input id="breadthSegS' + (i + 1) + '" name="Segment.BreadthS" value="' + DataOfSegment[i].BreadthS + '"  readonly="" type="text" value="">' +
                             '<label for="Segment.LengthS">Долгота</label> <input id="lengthSegS' + (i + 1) + '" name="Segment.LengthS" value="' + DataOfSegment[i].LengthS + '" readonly="" type="text" value="">' +
                             '</div><div>Координаты конца</div>' +
                             '<div>' +
                             '<label for="Segment.BreadthE">Широта</label> <input id="breadthSegE' + (i + 1) + '" name="Segment.BreadthE" value="' + DataOfSegment[i].BreadthE + '" readonly="" type="text" value="">' +
                             '<label for="Segment.LengthE">Долгота</label> <input id="lengthSegE' + (i + 1) + '" name="Segment.LengthE" value="' + DataOfSegment[i].LengthE + '" readonly="" type="text" value=""></div><div>' +
                             '</div></div>'
                         );
                     }
                     if ((i + 1) != 1) {
                         $('[class^="DataOfRoad"]:last').after(function (indx) {
                             var stringSegment = "<div style='clear: both' class='DataOfRoad" + (i + 1) + "'>" +
                                 "<input type='hidden' name='LayoutDislocationDelete' value='" + (i + 1) + "'/>" +
                                 "<div>" +
                                 "<b><u>Участок " + (i + 1) + "</u></b>" +
                                 "</div>" +
                                 "<div class='file_upload col-lg-4 col-md-4 col-sm-4 col-xs-4' style='float: left'>" +
                                 "<button type='button' id='changeColorDislocation" + (i + 1) + "'  class='btn btn-default'>Загрузить Дислокацию ТСОДД</button> " +
                                 "<input name='layoutDislocation" + (i + 1) + "' onchange=\"$('#changeColorDislocation" + (i + 1) + "').removeClass('btn-default').addClass('btn-danger');setColorSegmentByLoadImage(" + (i + 1) + ")\" type='file'>" +
                                 "</div>" +
                                 "<div class='col-lg-4 col-md-4 col-sm-4 col-xs-4' style='float: left'>" +
                                 "<button type='button' class='btn btn-default' data-toggle='modal' data-target='#ModalRoadSigns" + (i + 1) + "'>Ввести данные о дорожных знаках</button>" +
                                 "</div>" +
                                 "<div class='col-lg-4 col-md-4 col-sm-4 col-xs-4' >" +
                                 "<button type='button' class='btn btn-default' data-toggle='modal' data-target='#RoadBarriers" + (i + 1) + "'>Ввести данные о дорожных ограждениях</button>" +
                                 "</div>";
                             if (DataOfSegment[i].ChangeDislocationTCODD == true) {
                                 stringSegment += "<div style='clear: both'>" +
                                     "Участок требует изменения дислокации ТСОДД" +
                                     "<select id='Segment_ChangeDislocationTCODD' name='Segment.ChangeDislocationTCODD' onchange='setColorSegment(" + (i + 1) + ",this)' name='Segment.ChangeDislocationTCODD'>" +
                                     "<option selected='selected' value='true'>Да</option>" +
                                     "<option  value='false'>Нет</option>" +
                                     "<input name='Segment.string120Symbol" + (i + 1) + "'  style='max-width: 960px; width: 960px; visibility:visible'/>" +
                                     "</select>" +
                                     "</div></div>";
                             } else {
                                 stringSegment += "<div style='clear: both'>" +
                                   "Участок требует изменения дислокации ТСОДД" +
                                   "<select id='Segment_ChangeDislocationTCODD'  name='Segment.ChangeDislocationTCODD' onchange='setColorSegment(" + (i + 1) + ",this)' name='Segment.ChangeDislocationTCODD'>" +
                                   "<option  value='true'>Да</option>" +
                                   "<option selected='selected' value='false'>Нет</option>" +
                                   "</select>" +
                                   "<input name='Segment.string120Symbol" + (i + 1) + "'  style='max-width: 960px; width: 960px; visibility:hidden'/>" +
                                   "</div></div>";
                             }
                             return stringSegment;
                         });
                     }
                     if ((i + 1) != 1) {
                     $('[id^="ModalRoadSigns"]:last').after($('#ModalRoadSigns1').clone()
                        .attr("id", "ModalRoadSigns" + (i + 1)).find(".buttonclose")
                        .attr("onclick", "cleaningRoadSigns(" + (i + 1) + ",this)").end().find("td input").end().find(".buttonSave").attr("onclick", "changeColorRoadSigns(" + (i + 1) + ",this)").end().find("li a").each(function (ind, element) {
                            $(element).attr("href", "#tab" + incForTab1);
                            incForTab1++;
                        }).end().find('[role="tabpanel"]').each(function (ind, element) {
                            $(element).attr("id", "tab" + incForTab2);
                            incForTab2++;
                        }).end());

                     $('[id^="RoadBarriers"]:last').after($('#RoadBarriers1').clone()
                         .attr("id", "RoadBarriers" + (i + 1)).find(".buttonclose")
                         .attr("onclick", "cleaningRoadBarriers(" + (i + 1) + ",this)").end()
                         .find("td input").end().find(".buttonSave").attr("onclick", "changeColorRoadBarriers(" + (i + 1) + ",this)").end());
                     }

                     tempData[0] = DataOfSegment[i].BreadthE;
                     tempData[1] = DataOfSegment[i].LengthE;
                     massSegment[increment - 1] = myMap.geoObjects.indexOf(segment);
                     increment++;
                 }


                 for (var i = 0; i < "@Model.Segment.Count"; i++) {
                     setSegment(i);
                 }
                 ymaps.route([
                            ['@Model.BreadthS', '@Model.LengthS'],
                         [tempData[0], tempData[1]]
                 ]
                 ).then(
                     function (route) {
                         route.getPaths().options.set({

                             //можно выставить настройки графики маршруту
                             strokeColor: 'rgb(20,10,115)',
                             opacity: 0.9,
                             strokeWidth: 4
                         });
                         route.getPaths().get(0).balloon.destroy();
                         myMap.geoObjects.add(route.getPaths());
                         routeSegment = route;
                         route.getPaths().events.add('click', function () {

                             alert("Вы неправльно поставили участок");

                         });
                     });
                 if (($('[name="Segment.ChangeDislocationTCODD"]:first').val() == "true")) {
                     $('[name="Segment.string120Symbol1"]').css("visibility", "visible");
                 }
                 $('[name^="Segment.string120Symbol"]').each(function (ind, element) {

                     $(element).attr("value", DataOfSegment[ind].string120Symbol);

                 });


                 countElementSegGlobal = new Array(parseInt("@Model.Segment.Count"));
                 var j = 0;

                 $("[id^= ModalRoadSigns]").find("table:eq(1) tbody").each(function(ind, domElement) {

                     for (var i = 0; i < DataOfRoadSings.length; i++) {
                         if (parseInt(DataOfRoadSings[i].Name) == (ind + 1)) {

                             $(domElement).append(
                                 '<tr>' +
                                 '<td style="vertical-align: middle; width: 185px; height: 115px"><input type="text" class="FindRoadSings"></td>' +
                                 '<td style="width: 117px; height: 115px"></td>' +
                                 '<td style="width: 150px"></td>' +
                                 '<td style="width: 161px"></td>' +
                                 '<td style="vertical-align: middle;width: 192px"></td>' +
                                 '<td style="vertical-align: middle"><a class="lastA" href="#"><img style="width: 15px" src="../../Content/images/StrikethroughСircle.jpg"/></a></td>' +
                                 '</tr>');
                             $.ajax({
                                 url:  '@Url.Action("GetRoadSigns", "Home")',
                                 data: { idRS: DataOfRoadSings[i].NumberRoadSigns },
                                 async:false
                             }).success(function (result) {
                                 function compare(a, b) {
                                     if (a.ItemOrder < b.ItemOrder)
                                         return -1;
                                     else if (a.ItemOrder > b.ItemOrder)
                                         return 1;
                                     else
                                         return 0;
                                 }
                                 var JsonObject = JSON.parse(result);
                                 JsonObject[0].RoadSignItems.sort(compare);
                                 $(domElement).find("tr:eq(" + j + ") td").eq(0).children().val(DataOfRoadSings[i].NumberRoadSigns);
                                 $(domElement).find("tr:eq("+j+") td").eq(1).html('<img style="height: 100px; width: 100px" src="/RoadSigns/GetImage/' + JsonObject[0].id + '">');
                                 $(domElement).find("tr:eq(" + j + ") td").eq(2).text(JsonObject[0].Description);
                                 if (JsonObject[0].RoadSignItems.length == 0) {
                                     $(domElement).find("tr:eq(" + j + ") td").eq(4).html('<input type="number" value=' + DataOfRoadSings[i].CountRS + '  name="' + $(domElement).closest("[role='dialog']").attr("id").substr($(domElement).closest("[role='dialog']").attr("id").indexOf("s") + 1) + 'ModalC' + DataOfRoadSings[i].NumberRoadSigns + '" type="text"/>');
                                 }
                                 if (JsonObject[0].RoadSignItems.length > 0) {
                                     var dd = '<select  class="dd">';

                                     dd += '<option  ">Выбирите маркер</option>';

                                     for (var z = 0; z < JsonObject[0].RoadSignItems.length; z++) {
                                         if (DataOfRoadSings[i].ItemOrderId == (z + 1)) {
                                             dd += '<option selected value="' + JsonObject[0].RoadSignItems[z].ItemOrder + '" data-image="/RoadSigns/GetItemImage/' + JsonObject[0].RoadSignItems[z].Id + '?hallmark=' + JsonObject[0].RoadSignItems[z].Hallmark + '"></option>';
                                         }
                                         else{
                                         dd += '<option value="' + JsonObject[0].RoadSignItems[z].ItemOrder + '" data-image="/RoadSigns/GetItemImage/' + JsonObject[0].RoadSignItems[z].Id + '?hallmark=' + JsonObject[0].RoadSignItems[z].Hallmark + '"></option>';
                                         }
                                     }

                                     dd += '</select>';
                                     $(domElement).find("tr:eq(" + j + ") td").eq(3).html(dd);
                                     $(domElement).find("tr:eq(" + j + ") td").eq(3).children().msDropDown();
                                     $(domElement).find("tr:eq(" + j + ") td").eq(4).html('<input type="number" value=' + DataOfRoadSings[i].CountRS + '  name="' + $(domElement).closest("[role='dialog']").attr("id").substr($(domElement).closest("[role='dialog']").attr("id").indexOf("s") + 1) + 'ModalC' + DataOfRoadSings[i].NumberRoadSigns + 'I' + DataOfRoadSings[i].ItemOrderId + '" type="text"/>');
                                     var t = i;
                                     var z = j;
                                     $(domElement).find("tr:eq(" + j + ") td").closest("tr").find("select").change(function () {

                                         $(domElement).find("tr:eq(" + z + ") td").eq(4).html('<input type="number"  name="' + $(domElement).closest("[role='dialog']").attr("id").substr($(domElement).closest("[role='dialog']").attr("id").indexOf("s") + 1) + 'ModalC' + DataOfRoadSings[t].NumberRoadSigns + 'I' + $(this).val() + '" type="text"/>');


                                     });

                                 }

                             });
                             j++;
                         }
                     }
                     for (var g=0;g<$(domElement).find("tr").length;g++) {
                         ModalRoadSignsSave.push([$(domElement).closest('[id^="ModalRoadSigns"').attr("id").substring($(domElement).closest('[id^="ModalRoadSigns"').attr("id").indexOf("s")+1), $(domElement).find("tr:eq(" + g + ") td:eq(0)").children().val()]);
                         indexAutoRs.push([$(domElement).closest('[id^="ModalRoadSigns"').attr("id"), $(domElement).find("tr:eq(" + g + ") td:eq(0)").children().val()]);

                     }

                     j = 0;
                 });
                 j = 0;
                  var valThis;
                 $("[id^= RoadBarriers]").find("table:eq(1) tbody").each(function(ind, domElement) {
                     for (var i = 0; i < DataOfRoadBarriers.length; i++) {
                         if (parseInt(DataOfRoadBarriers[i].Name) == (ind + 1)) {
                             $(domElement).append(
                                 ' <tr>'+
                                    '<td style="vertical-align: middle; width: 187px;"><input type="text" class="FindRoadBarriers"></td>'+
                                    '<td style="width: 170px;"></td>'+
                                    '<td style="width: 180px"></td>'+
                                    '<td style="vertical-align: middle;width: 258px"></td>'+
                                    '<td style="vertical-align: middle"><a class="lastA" href="#"><img style="width: 15px" src="../../Content/images/StrikethroughСircle.jpg" /></a></td>'+
                                '</tr>');
                            
                             $.ajax({
                                 url: '@Url.Action("GetRoadBarriers", "Home")',
                                 data: {
                                     idRB: DataOfRoadBarriers[i].NumberBarriers
                                     
                                 },
                                 async: false
                             }).success(function(result) {
                                 var JsonObject = JSON.parse(result);

                                 $(domElement).find("tr:eq(" + j + ") td").eq(0).children().val(DataOfRoadBarriers[i].NumberBarriers);
                                 function IsValidImageUrl(url)
                                 {
                                     $("<img>", {
                                         src: url,
                                         error: function()
                                         {
                                         },
                                         load: function()
                                         {
                                             $("#" + (ind + 1) + "AddSrc" + JsonObject[0].Id).attr("src", "/RoadBarriers/GetImage/" + JsonObject[0].Id);
                                             $("#" + (ind + 1) + "AddSrc" + JsonObject[0].Id).css({ "height": "150px", "width": "150px" });
                                         }
                                     });
                                 }
                                 $(domElement).find("tr:eq(" + j + ") td").eq(1).html('<img id="' + (ind + 1) + 'AddSrc' + JsonObject[0].Id+'"/>');
                                 IsValidImageUrl('/RoadBarriers/GetImage/' + JsonObject[0].Id);
                                 $(domElement).find("tr:eq(" + j + ") td").eq(2).text(JsonObject[0].Description);
                                 $(domElement).find("tr:eq(" + j + ") td").eq(3).html('<input type="number" value=' + DataOfRoadBarriers[i].Length + '  name="' + $(domElement).closest("[role='dialog']").attr("id").substr($(domElement).closest("[role='dialog']").attr("id").indexOf("s") + 1) + 'RoadBarriers' + DataOfRoadBarriers[i].NumberBarriers + '" type="text"/>');
                             });
                             j++;
                         };
                     }
                     j = 0;
                     for (var g = 0; g < $(domElement).find("tr").length; g++) {
                         RoadBarriersSave.push([$(domElement).closest('[id^="RoadBarriers"').attr("id").substring($(domElement).closest('[id^="RoadBarriers"').attr("id").indexOf("s") + 1), $(domElement).find("tr:eq(" + g + ") td:eq(0)").children().val()]);
                         indexAutoRB.push([$(domElement).closest('[id^="RoadBarriers"').attr("id"), $(domElement).find("tr:eq(" + g + ") td:eq(0)").children().val()]);

                     }
                    
                 });
                 
                 var multiplicity, incrementMul = 0, changeColor;
                 for (var i = 0; i < DataOfRoadSings.length; i++) {
                     if (multiplicity != undefined) {
                         if (multiplicity == DataOfRoadSings[i].Name.toString() + "ModalC" + DataOfRoadSings[i].NumberRoadSigns.toString()) {
                             incrementMul++;
                         } else {
                             incrementMul = 0;
                         }
                     }
                     multiplicity = DataOfRoadSings[i].Name.toString() + "ModalC" + DataOfRoadSings[i].NumberRoadSigns.toString();



                     if (changeColor != undefined) {
                         if (changeColor != DataOfRoadSings[i].Name) {
                             changeColorRoadSigns(DataOfRoadSings[i].Name);
                             changeColor = DataOfRoadSings[i].Name;
                         }
                     } else {
                         changeColorRoadSigns(DataOfRoadSings[i].Name);
                         changeColor = DataOfRoadSings[i].Name;
                     }
                 }
                 for (var i = 0; i < DataOfRoadBarriers.length; i++) {

                     if (changeColor != undefined) {
                         if (changeColor != DataOfRoadBarriers[i].Name) {
                             changeColorRoadBarriers(DataOfRoadBarriers[i].Name);
                             changeColor = DataOfRoadBarriers[i].Name;
                         }
                     } else {
                         changeColorRoadBarriers(DataOfRoadBarriers[i].Name);
                         changeColor = DataOfRoadBarriers[i].Name;
                     }
                 }
                 //изменения цвета при загрузке
                 if ('@ViewBag.layoutScheme' != "") {
                     $('#changeColorScheme1').removeClass("btn-default");
                     $('#changeColorScheme1').addClass("btn-danger");
                 };
                 var MassLD = JSON.parse('@Html.Raw(JsonConvert.SerializeObject(ViewBag.layoutDislocation))');

                 for (var j = 0; j < MassLD.length; j++) {
                     $('#changeColorDislocation' + MassLD[j].Name + '').removeClass("btn-default");
                     $('#changeColorDislocation' + MassLD[j].Name + '').addClass("btn-danger");
                     if (myMap.geoObjects.get(massSegment[MassLD[j].Name - 1]).options._Bm.preset != "islands#redCircleIcon")
                         myMap.geoObjects.get(massSegment[MassLD[j].Name - 1]).options.set("preset", "islands#blueCircleIcon");

                     $(".DataOfRoad" + MassLD[j].Name + "").append("<button type='button' data-toggle='modal' data-target='#layoutDislocation' onclick='SetidlayoutDislocation(" + MassLD[j].id + "," + MassLD[j].Name + " )'  class='btn btn-default' style='width:330px' >Просмотреть загруженную дислокацию ТСОДД</button>");
                 }
                 $('[name*="ModalsL"]').each(function (index, element) {

                     if ($(element).val() != '') {
                         changeColorMackUp();

                         return false;
                     };
                 });
                 $('[name*="ModalsA"]').each(function (index, element) {

                     if ($(element).val() != '') {
                         changeColorMackUp();

                         return false;
                     };
                 });
             });


    }


    function SetidlayoutDislocation(par1, par2) {


        $('#printable').html("");
        $('#printable').html('<h3 style="color: black; text-align: center">' +
                'г.Минск ул.' +
                "@Model.Name" +
                '<br>Дислокация ТСОДД участок' +
                +par2 +
                '<img id="TCODD" src="/Home/LayoutDislocation/' + par1 + '"/>');

    }
    //изменения цвета
    function setColorSegment(index, object) {

        if ($(object).val() == "true") {
            myMap.geoObjects.get(massSegment[index - 1]).options.set("preset", "islands#redCircleIcon");
            $('[name="Segment.string120Symbol' + index + '"]').css('visibility', 'visible');
        } else {

            myMap.geoObjects.get(massSegment[index - 1]).options.set("preset", "islands#blueCircleIcon");
            $('[name="Segment.string120Symbol' + index + '"]').css('visibility', 'hidden').attr("value", "");
        }
    }

    function setColorSegmentByLoadImage(index) {
        if (myMap.geoObjects.get(massSegment[index - 1]).options._gb.preset != "islands#redCircleIcon")
            myMap.geoObjects.get(massSegment[index - 1]).options.set("preset", "islands#blueCircleIcon");
    }

    function SetRoute(Arr) {

        if (currentRoute != undefined) {
            myMap.geoObjects.remove(currentRoute);
            myMap.geoObjects.remove(currentRoute.getPaths());

        }
        ymaps.route([
                Arr[0],
                Arr[1]
        ],
            {
                mapStateAutoApply: true,
                removeViaPoints: true

            }
        ).then(
            function (route) {
                route.events.add('dragend', function (e) {

                    Arr[0] = [route.requestPoints[0][0].toString().substr(0, 7), route.requestPoints[0][1].toString().substr(0, 7)];
                    Arr[1] = [route.requestPoints[1][0].toString().substr(0, 7), route.requestPoints[1][1].toString().substr(0, 7)];
                });


                route.editor.start({
                    editWayPoints: true
                });

                var points = route.getWayPoints();
                points.get(0).properties.set("iconContent", "Начало улицы");
                points.get(0).properties.set("balloonContentHeader", "<a href='#' onclick='setHandlerS()'>Удалить Обьект</a>");
                points.get(0).options.set('preset', 'islands#darkGreenStretchyIcon');


                points.get(1).properties.set("iconContent", "Конец улицы");
                points.get(1).properties.set("balloonContentHeader", "<a href='#' onclick='setHandlerE()'>Удалить Обьект</a>");
                points.get(1).options.set("preset", "islands#darkGreenStretchyIcon");
                route.editor.events.add("routeupdate", function () {
                    $("#breadthS").val(route.requestPoints[0][0].toString().substr(0, 7));
                    $("#lengthS").val(route.requestPoints[0][1].toString().substr(0, 7));
                    $("#breadthE").val(route.requestPoints[1][0].toString().substr(0, 7));
                    $("#lengthE").val(route.requestPoints[1][1].toString().substr(0, 7));
                });

                route.getPaths().options.set({

                    //можно выставить настройки графики маршруту
                    strokeColor: '0000ffff',
                    opacity: 0.9
                });
                currentRoute = route;

                myMap.geoObjects.add(route);
                //удаление лишних обьектов
                myMap.geoObjects.remove(myPlacemark);
                myMap.geoObjects.remove(firstPointRoute);
                myMap.geoObjects.remove(endPointRoute);

                identifierForDelete = 0;
                //заполнение переменных
                $("#breadthS").val(Arr[0][0]);
                $("#lengthS").val(Arr[0][1]);
                $("#breadthE").val(Arr[1][0]);
                $("#lengthE").val(Arr[1][1]);
            },
            function (error) {
                alert("Возникла ошибка: " + error.message);
            });


    }

    //поиск
    function search() {

        if (myPlacemark != undefined) {

            myMap.geoObjects.remove(myPlacemark);
        }
        position = $("#city").val().toString() + " " + $("#street").val().toString();

        var myGeocoder = ymaps.geocode(position);

        myGeocoder.then(
            function (res) {

                myPlacemark = new ymaps.GeoObject({
                    geometry: {
                        type: "Point", // тип геометрии - точка
                        coordinates: [res.geoObjects.get(0).geometry.getCoordinates()[0], res.geoObjects.get(0).geometry.getCoordinates()[1]] // координаты точки
                    }
                },
                { draggable: true });
                myMap.geoObjects.add(myPlacemark);
                identifierForDelete++;
                myMap.setCenter([res.geoObjects.get(0).geometry.getCoordinates()[0], res.geoObjects.get(0).geometry.getCoordinates()[1]], 14);
            });

    }

    function Set() {

        if ($("#breadthS").val() != "" && $("#lengthS").val() != "" && $("#breadthE").val() && $("#lengthE").val()) {
            Arr = [[]];

            Arr[0] = [parseFloat($("#breadthS").val()), parseFloat($("#lengthS").val())];
            Arr[1] = [parseFloat($("#breadthE").val()), parseFloat($("#lengthE").val())];

            SetRoute(Arr);
        }
    }

    //удаление начальной точки
    function setHandlerS() {
        if (identifierForDelete == 0) {
            myMap.geoObjects.remove(currentRoute);
            myMap.geoObjects.remove(currentRoute.getPaths());
            endPointRoute = new ymaps.GeoObject({
                geometry: {
                    type: "Point", // тип геометрии - точка
                    coordinates: [Arr[1][0], Arr[1][1]] // координаты точки
                },
                properties: {
                    iconContent: "Конец улицы",
                    balloonContentHeader: "<a href='#' onclick='setHandlerE()'>Удалить Обьект</a>",
                    balloonContent: "[" + Arr[1][0] + "," + Arr[1][1] + "]"
                }
            },
            { draggable: true, preset: "islands#darkGreenStretchyIcon" });


            endPointRoute.events.add("dragend", function (e) {

                var coords = endPointRoute.geometry.getCoordinates();
                Arr[1] = [coords[0].toPrecision(6), coords[1].toPrecision(6)];
                //изменение координат при пертягивание метки
                var object = e.get('target');
                object.properties.set("balloonContent", "[" + coords[0].toPrecision(6) + "," + coords[1].toPrecision(6) + "]");

            });
            myMap.geoObjects.add(endPointRoute);
            myMap.events.add('dblclick', handlerRoute);
            identifierForDelete = 1;

        } else {
            myMap.geoObjects.remove(firstPointRoute);
            identifierForDelete = 0;
            counterArr = 0;
            Arr = [[]];


        }
        counterArr = 0;
    }

    //удаление конченой точки
    function setHandlerE() {

        if (identifierForDelete == 0) {
            myMap.geoObjects.remove(endPointRoute);
            myMap.geoObjects.remove(currentRoute);
            myMap.geoObjects.remove(currentRoute.getPaths());
            firstPointRoute.geometry.setCoordinates([Arr[0][0], Arr[0][1]]);
            myMap.geoObjects.add(firstPointRoute);
            myMap.events.add('dblclick', handlerRoute);
            counterArr = 1;
            identifierForDelete = 1;

        } else {
            myMap.geoObjects.remove(endPointRoute);
            identifierForDelete = 0;
            counterArr = 0;
            Arr = [[]];


        }

    }

    //задать координаты
    function SetCoords() {
        if ($("#blockStreet").css("display") == "none") {

            if (countElementSegGlobal.length == 0) {


                if (currentRoute != undefined) {
                    $("#blockStreetCoord").css("display", "inline");
                    myMap.geoObjects.add(currentRoute);
                    currentRoute.editor.start({ editWayPoints: true });

                    $("#blockStreetCoord").parent().prev().children("input").each(function (indx, element) {
                        $(element).removeAttr("readonly");

                    });

                    $("#blockStreetCoord").parent().prev().prev().prev().children("input").each(function (indx, element) {
                        $(element).removeAttr("readonly");
                    });

                } else {
                    handlerRoute = function (e) {

                        var coords = e.get('coords');
                        if (counterArr < 2) {
                            Arr[counterArr] = [coords[0].toPrecision(6), coords[1].toPrecision(6)];

                        }
                        if (counterArr == 0) {
                            firstPointRoute = new ymaps.GeoObject({
                                geometry: {
                                    type: "Point", // тип геометрии - точка
                                    coordinates: [Arr[0][0], Arr[0][1]] // координаты точки
                                },
                                properties: {
                                    iconContent: "Начало улицы",
                                    balloonContentHeader: "<a href='#' onclick='setHandlerS()'>Удалить Обьект</a>",
                                    balloonContent: "[" + coords[0].toPrecision(6) + "," + coords[1].toPrecision(6) + "]"
                                }
                            },
                            { draggable: true, preset: "islands#darkGreenStretchyIcon" });
                            firstPointRoute.events.add("dragend", function (e) {

                                var coords = firstPointRoute.geometry.getCoordinates();
                                Arr[0] = [coords[0].toPrecision(6), coords[1].toPrecision(6)];
                                //изменение координат при пертягивание метки
                                var object = e.get('target');
                                object.properties.set("balloonContent", "[" + coords[0].toPrecision(6) + "," + coords[1].toPrecision(6) + "]");

                            });

                            myMap.geoObjects.add(firstPointRoute);
                            identifierForDelete++;
                        }
                        counterArr++;

                        if (Arr.length == 2) {

                            SetRoute(Arr);
                            //задать несколько маршрутов
                            //Arr = [];
                            //counterArr = 0;
                            myMap.events.remove('dblclick', handlerRoute);

                        }
                    }

                    myMap.events.add('dblclick', handlerRoute);

                }
            } else {
                alert('Вы не можете редактировать улицу пока на нем находится хотя бы один участок');
            }
        } else {
            alert("Вы не выбрали или не сохранили улицу");
        }

    }


    //удаление сегмента
    function deleteSegment(index) {

        countElementSegGlobal.length--;

        myMap.geoObjects.remove(myMap.geoObjects.get(massSegment[index - 1]));
        myMap.geoObjects.remove(myMap.geoObjects.get(massSegment[index - 1] - 1));

        for (var i = index - 1; i < massSegment.length; i++) {
            massSegment[i] = massSegment[i] - 2;
        };

        massSegment.splice(index - 1, 1);

        var j = 1;
        myMap.geoObjects.each(function (el, index) {

            for (var i = 0; i < massSegment.length; i++) {
                if (massSegment[i] == index) {


                    el.properties.set({
                        iconContent: j,
                        balloonContentHeader: "<a href='#' onclick='deleteSegment(" + j + ")'>Удалить Обьект</a>",
                    });
                    j++;
                };
            }

        });

        var countElement = $('[id^=segment]:has("*")');

        //удаление координат
        if (countElement.length != 1) {
            $("#segment" + index).html("");
            if (index != countElement.length && index != 1) {
                $("#breadthSegS" + (index + 1) + "").attr("value", $("#breadthSegE" + (index - 1) + "").val());
                $("#lengthSegS" + (index + 1)).attr("value", $("#lengthSegE" + (index - 1)).val());

            }

        } else {
            $("#breadthSegS1").attr("value", "");
            $("#lengthSegS1").attr("value", "");
            $("#breadthSegE1").attr("value", "");
            $("#lengthSegE1").attr("value", "");
        }

        $('[id^=segment]').each(function (ind, domElement) {

            //изменение содержимого координат
            if ((ind + 1) >= index) {

                $(domElement).html($('[id="segment' + (ind + 2) + '"]')
                    .find("u").first().text("Координаты участка " + (ind + 1)).end().end()
                    .find("input").first().attr("id", "breadthSegS" + (ind + 1)).end().end()
                    .find("input").eq(1).attr("id", "lengthSegS" + (ind + 1)).end().end()
                    .find("input").eq(2).attr("id", "breadthSegE" + (ind + 1)).end().end()
                    .find("input").last().attr("id", "lengthSegE" + (ind + 1)).end().end().children());
            }
            if ($('[id^=segment]').length == (ind + 1) && (countElement.length - 5) % 3 == 0 && countElement.length > 4) {
                $(domElement).parent().remove();
                tempDataFor3 = countElement.length;
            }


        });

        $("#CountSides").val(countElement.length - 1);

        if (countElement.length == 5) {
            $("#interData+div").remove();
            $("#segment4").after("<div>" +
                "<button type='button' class='btn btn-default setSegment'>Задать/Изменить координаты</button>" +
                "<button id='BlockSegment' type='button' class='btn btn-primary'>Сохранить</button>" +
                "</div>");

            $("#interData+h5").css("clear", "none");
            tempDataFor3 = 5;
        }


        //чистка модальных окон
        if (countElement.length != 1) {
            $('[id="ModalRoadSigns' + index + '"]').remove();
            $('[id^="ModalRoadSigns"]').each(function (ind, element) {
                $(element).attr("id", "ModalRoadSigns" + (ind + 1)).find(".buttonclose").attr("onclick", "cleaningRoadSigns(" + (ind + 1) + ",this)").next().attr('onclick', 'changeColorRoadSigns(' + (ind + 1) + ',this)');
            }).each(function (indMR, elementMR) {
                $(elementMR).find("tr input:not(.FindRoadSings)").each(function (ind, element) {

                    $(element).attr("name", (indMR + 1) + $(this).attr("name").substr($(this).attr("name").indexOf("M")));
                });

            });

            $('[id="RoadBarriers' + index + '"]').remove();
            $('[id^="RoadBarriers"]').each(function (ind, element) {
                $(element).attr("id", "RoadBarriers" + (ind + 1)).find(".buttonclose").attr("onclick", "cleaningRoadBarriers(" + (ind + 1) + ",this)").next().attr('onclick', 'changeColorRoadBarriers(' + (ind + 1) + ',this)');
            }).each(function (indMR, elementMR) {
                $(elementMR).find("tr input:not(.FindRoadBarriers)").each(function (ind, element) {
                    $(element).attr("name", (indMR + 1) + $(this).attr("name").substr($(this).attr("name").indexOf("R")));

                });
            });
        }

        if (countElement.length != 1) {
            $(".DataOfRoad" + index).remove();
        }
        $('[class^="DataOfRoad"]').each(function (ind, element) {
            if (countElement.length != 0) {
                $(element).attr("class", "DataOfRoad" + (ind + 1));
                $(element).find("u").text("Участок " + (ind + 1));
                $(element).find("[data-target^='#ModalRoadSigns']").attr("data-target", "#ModalRoadSigns" + (ind + 1));
                $(element).find("[data-target^='#RoadBarriers']").attr("data-target", "#RoadBarriers" + (ind + 1));
                $(element).find("[onchange^='setColorSegment']").attr("onchange", "setColorSegment(" + (ind + 1) + ",this)");
            }
        });
        increment = massSegment.length + 1;

        if ((massSegment.length + 1) == index) {

            myMap.geoObjects.remove(routeSegment.getPaths());
            if (massSegment.length != 0) {

                ymaps.route([
                        Arr[0],
                        tempDate2.pop()
                ]
                ).then(
                    function (route) {
                        route.getPaths().options.set({

                            //можно выставить настройки графики маршруту
                            strokeColor: 'rgb(20,10,115)',
                            opacity: 0.9,
                            strokeWidth: 4
                        });
                        route.getPaths().get(0).balloon.destroy();
                        myMap.geoObjects.add(route.getPaths());
                        routeSegment = route;
                        route.getPaths().events.add('click', function () {

                            alert("Вы неправльно поставили участок");

                        });
                    });
            }
        } else {

            tempDate2.splice(index, 1);

        }

    }
    //чистка полей
    function cleaningRoadSigns(number, par) {
        var lenghtSingle = 0;
        for (var j = 0; ModalRoadSignsSave.length > j; j++) {
            if (ModalRoadSignsSave[j][0] == number) {
                lenghtSingle++;
            }
        }

        if (lenghtSingle != 0) {
            var index;
            var elementIndex;
            for (var i = $(par).closest(".modal-content").find("tbody tr").length; i != -1; i--) {
                index = false;

                for (var j = 0; ModalRoadSignsSave.length > j; j++) {

                    if (ModalRoadSignsSave[j][0] == number) {
                        if (ModalRoadSignsSave[j][1] == $($(par).closest(".modal-content").find("tbody tr")[i]).find("td:eq(0) input").val()) {

                            index = true;

                        };
                    }
                }

                if (index == false) {
                    elementIndex = $($(par).closest(".modal-content").find("tbody tr")[i]).find("td:eq(0) input").val();
                    if ($(par).closest(".modal-content").find("tbody tr").eq(i).find("td:first input").val() != "") {
                        $($(par).closest(".modal-content").find("tbody tr")[i]).remove();
                    }
                }

                for (var z = 0; indexAutoRs.length > z; z++) {
                    if (indexAutoRs[z][0].substring(indexAutoRs[z][0].indexOf("s") + 1) == number) {
                        if (indexAutoRs[z][1] == elementIndex) {
                            indexAutoRs.splice(z, 1);
                        }
                    }
                }
            }
        }
        if (lenghtSingle == 0) {

            for (var j = 0; indexAutoRs.length > j; j++) {
                if (indexAutoRs[j][0].substring(indexAutoRs[j][0].indexOf("s") + 1) == number) {
                    indexAutoRs.splice(j, 1);
                };
            }
            $("#ModalRoadSigns" + number + " tr:gt(1)").each(function (indx, element) {
                $(element).remove();
            });
            $("#ModalRoadSigns" + number + " tr:eq(1)")
                .children().eq(0).children().val("");
            $("#ModalRoadSigns" + number + " tr:eq(1)")
                .children().eq(1).children().remove();
            $("#ModalRoadSigns" + number + " tr:eq(1)")
                .children().eq(2).html("");
            $("#ModalRoadSigns" + number + " tr:eq(1)")
                .children().eq(3).children().remove();
            $("#ModalRoadSigns" + number + " tr:eq(1)")
                .children().eq(4).children().remove();
            $('[data-target="#ModalRoadSigns' + number + '"]').removeClass("btn-danger");
            $('[data-target="#ModalRoadSigns' + number + '"]').addClass("btn-default");
        }


    }

    function cleaningModalMackUp(par, e) {
        if (ModalMackUpSave.length != 0) {
            var index;
            var elementIndex;
            for (var i = $(par).closest(".modal-content").find("tbody tr").length; i != -1; i--) {
                index = false;

                for (var j = 0; ModalMackUpSave.length > j; j++) {

                    if (ModalMackUpSave[j] == $($(par).closest(".modal-content").find("tbody tr")[i]).find("td:eq(0) input").val()) {

                        index = true;

                    };

                }

                if (index == false) {
                    elementIndex = $($(par).closest(".modal-content").find("tbody tr")[i]).find("td:eq(0) input").val();
                    $($(par).closest(".modal-content").find("tbody tr")[i]).remove();
                }
                for (var z = 0; indexAutoRm.length > z; z++) {
                    if (indexAutoRm[z] == elementIndex) {
                        indexAutoRm.splice(z, 1);
                    }
                }
            }
        }
        if (ModalMackUpSave.length == 0) {

            var j = indexAutoRm.length;
            while (j--) {
                indexAutoRm.splice(j, 1);

            }

            var mkp = '<td style="vertical-align: middle; width: 100px; padding: 0px; height: 115px"><input class="FindRoadMarking" style="width: 100px" type="text"></td>' +
                                    '<td style="width: 241px;"></td>' +
                                    '<td style="width: 180px"></td>' +
                                    '<td style="vertical-align: middle;width: 117px"></td>' +
                                    '<td style="vertical-align: middle;width: 157px"></td>' +
                                    '<td style="vertical-align: middle"><a class="lastB" href="#"><img style="width: 15px" src="../../Content/images/StrikethroughСircle.jpg" /></a></td>';

            $("#ModalMackUp > div > div > div.modal-body > table > tbody > tr:eq(1)").empty();
            $("#ModalMackUp > div > div > div.modal-body > table  > tr:gt(1)").each(function (i, val) { $(val).remove() });
            $("#ModalMackUp tr:eq(1)").empty().html(mkp);
            $("#ModalMackUp tr:gt(1)").remove();

        }
    }


    function cleaningRoadBarriers(number, par) {
        var lenghtSingle = 0;
        for (var j = 0; RoadBarriersSave.length > j; j++) {
            if (RoadBarriersSave[j][0] == number) {
                lenghtSingle++;
            }
        }
        if (lenghtSingle != 0) {

            var index;
            var elementIndex;

            for (var i = $(par).closest(".modal-content").find("tbody tr").length; i != -1; i--) {
                index = false;

                for (var j = 0; RoadBarriersSave.length > j; j++) {

                    if (RoadBarriersSave[j][0] == number) {
                        if (RoadBarriersSave[j][1] == $($(par).closest(".modal-content").find("tbody tr")[i]).find("td:eq(0) input").val()) {

                            index = true;

                        };
                    }
                }

                if (index == false) {
                    elementIndex = $($(par).closest(".modal-content").find("tbody tr")[i]).find("td:eq(0) input").val();
                    if ($(par).closest(".modal-content").find("tbody tr").eq(i).find("td:first input").val() != "") {
                        $($(par).closest(".modal-content").find("tbody tr")[i]).remove();
                    }
                }


                for (var z = 0; indexAutoRB.length > z; z++) {

                    if (indexAutoRB[z][0].substring(indexAutoRB[z][0].indexOf("s") + 1) == number) {
                        if (indexAutoRB[z][1] == elementIndex) {
                            indexAutoRB.splice(z, 1);
                        }
                    }
                }
            }
        }
        if (lenghtSingle == 0) {

            var j = indexAutoRB.length;
            while (j--) {
                if (indexAutoRB[j][0].substring(indexAutoRB[j][0].indexOf("s") + 1) == number) {

                    indexAutoRB.splice(j, 1);
                }
            }


            var mkp =
                        '<td style="width: 185px;height: 115px"><input type="text" class="FindRoadBarriers"></td>' +
                        '<td style="width: 115px;height: 115px"></td><td style="width: 117px"></td>' +
                        '<td style="vertical-align: middle"></td><td style="vertical-align: middle"><a class="lastA" href="#"><img style="width: 15px" src="../../Content/images/StrikethroughСircle.jpg"/></a></td>';
            $("#RoadBarriers" + number + " tr:eq(1)")
                        .children().eq(0).children().val("");
            $("#RoadBarriers" + number + " tr:eq(1)")
            .children().eq(1).children().remove();
            $("#RoadBarriers" + number + " tr:eq(1)")
            .children().eq(3).children();
            $("#RoadBarriers" + number + " tr:eq(1)")
            .children().eq(2).html("");
            $("#RoadBarriers" + number + " tr:eq(1)")
            .children().eq(3).children().remove();
            $("#RoadBarriers" + number + " > div > div > div.modal-body > table > tbody > tr:eq(1)").empty().html(mkp);

            $("#RoadBarriers" + number + " tbody tr:gt(0)").remove();


        }
    }

    //изменения цвета
    function changeColorMackUp(par, e) {
        ModalMackUpSave.length = 0;
        for (var i = 0; $(par).closest(".modal-content").find("tbody tr").length > i; i++) {

            ModalMackUpSave.push($($(par).closest(".modal-content").find("tbody tr")[i]).find("td:eq(0) input").val());
        };

        $('[data-target="#ModalMackUp"]').removeClass("btn-default");
        $('[data-target="#ModalMackUp"]').addClass("btn-danger");
    }

    function changeColorRoadSigns(number, par) {
        for (var i = 0; $(par).closest(".modal-content").find("tbody tr").length > i; i++) {

            ModalRoadSignsSave.push([number, $($(par).closest(".modal-content").find("tbody tr")[i]).find("td:eq(0) input").val()]);

        };
        ModalRoadSignsModal = true;
        $('[data-target="#ModalRoadSigns' + number + '"]').removeClass("btn-default");
        $('[data-target="#ModalRoadSigns' + number + '"]').addClass("btn-danger");
    }

    function changeColorRoadBarriers(number, par) {
        for (var i = 0; $(par).closest(".modal-content").find("tbody tr").length > i; i++) {

            RoadBarriersSave.push([number, $($(par).closest(".modal-content").find("tbody tr")[i]).find("td:eq(0) input").val()]);
        };

        $('[data-target="#RoadBarriers' + number + '"]').removeClass("btn-default");
        $('[data-target="#RoadBarriers' + number + '"]').addClass("btn-danger");
    }

    //задание координат
    $(document).ready(function () {


        $('[data-target="#ModalTable"]').click(function () {

            var textStreet = $('[name="Street.Name"]').val();

            if (textStreet != "") {
                $('#text').text(textStreet);
            }
        });

        function setSegment(eventObject) {

            if ($(eventObject.target).next("button").css("display") == "none") {
                $("#BlockSegment").css("display", "inline-block");
                $('[action^="/Home/EditStreets"]').on("click", "#blockElement button,#blockElement input,#blockForm button", BlockForm);
                $(".ShowHideSegment").each(function (ind, element) {
                    $(element).show();
                });

            }
            if (currentRoute == undefined || $("#blockStreetCoord").css("display") == "inline") {
                alert("Задайте улицу или возможно нажмите кнопку сохранить в этом пункте");
            } else {



                handlerSegment = function (e) {
                    var coords = e.get('coords');
                    if (routeSegment != undefined) {
                        myMap.geoObjects.remove(routeSegment.getPaths());
                    }
                    ymaps.route([
                           ['@Model.BreadthS', '@Model.LengthS'],
                            [coords[0].toPrecision(6), coords[1].toPrecision(6)]
                    ]
                    ).then(
                        function (route) {
                            route.getPaths().options.set({

                                //можно выставить настройки графики маршруту
                                strokeColor: 'rgb(20,10,115)',
                                opacity: 0.9,
                                strokeWidth: 4
                            });
                            route.getPaths().get(0).balloon.destroy();
                            myMap.geoObjects.add(route.getPaths());
                            routeSegment = route;
                            route.getPaths().events.add('click', function () {

                                alert("Вы неправльно поставили участок");

                            });
                        });
                    countElementSegGlobal.length++;


                    var pathsObjects = ymaps.geoQuery(currentRoute.getPaths()),
                   edges = [];

                    // Переберем все сегменты и разобьем их на отрезки.
                    pathsObjects.each(function (path) {
                        var coordinates = path.geometry.getCoordinates();
                        for (var i = 1, l = coordinates.length; i < l; i++) {
                            edges.push({
                                type: 'LineString',
                                coordinates: [coordinates[i], coordinates[i - 1]]

                            });
                        }
                    });


                    if (increment >= 2 && increment <= 4) {

                        $("#segment" + increment).html(
                            '<b><u>Координаты участка ' + increment + '</u></b>' +
                            '<div>Начальнаты начала</div>' +
                            '<div><label for="Segment.BreadthS">Широта</label> <input id="breadthSegS' + increment + '" name="Segment.BreadthS" readonly="" type="text" value="">' +
                            '<label for="Segment.LengthS">Долгота</label> <input id="lengthSegS' + increment + '" name="Segment.LengthS" readonly="" type="text" value="">' +
                            '</div><div>Координаты конца</div><div>' +
                            '<label for="Segment.BreadthE">Широта</label> <input id="breadthSegE' + increment + '" name="Segment.BreadthE" readonly="" type="text" value="">' +
                            '<label for="Segment.LengthE">Долгота</label> <input id="lengthSegE' + increment + '" name="Segment.LengthE" readonly="" type="text" value=""></div></div>'
                            );
                    }

                    if (increment > 4) {

                        if (increment == 5) {

                            $("#segment4").parent().next().remove();
                            $("#interData+h5").css("clear", "left");
                            $("#interData").after('<div style="float: left"  >' +
                                '<button type="button"  class="btn btn-default setSegment">Задать/Изменить координаты</button>' +
                                '<button id="BlockSegment" type="button" class="btn btn-primary">Сохранить</button>' +
                                '</div>');
                        }
                        if (tempDataFor3 == increment) {
                            $("#interData").before('<div class="form-group ShowHideSegment" style="margin-top: 10px"><div id="segment' + increment + '" style="width: 30.2%;float: left;height: 115px"></div><div id="segment' + (increment + 1) + '" style="width:29%;float: left;height: 115px"></div><div id="segment' + (increment + 2) + '" style="width: 39.8%;float: left;height: 115px"></div></div>');
                            tempDataFor3 = tempDataFor3 + 3;
                        }
                        $("#segment" + increment).html('<b><u>Координаты участка ' + increment + '</u></b>' +
                            '<div>Начальнаты начала</div>' +
                            '<div><label for="Segment.BreadthS">Широта</label> <input id="breadthSegS' + increment + '" name="Segment.BreadthS" readonly="" type="text" value="">' +
                            '<label for="Segment.LengthS">Долгота</label> <input id="lengthSegS' + increment + '" name="Segment.LengthS" readonly="" type="text" value="">' +
                            '</div><div>Координаты конца</div>' +
                            '<div>' +
                            '<label for="Segment.BreadthE">Широта</label> <input id="breadthSegE' + increment + '" name="Segment.BreadthE" readonly="" type="text" value="">' +
                            '<label for="Segment.LengthE">Долгота</label> <input id="lengthSegE' + increment + '" name="Segment.LengthE" readonly="" type="text" value=""></div><div>' +
                            '</div></div>'
                        );
                    }
                    if (increment != 1) {
                        $('[class^="DataOfRoad"]:last').after("<div style='clear: both' class='DataOfRoad" + increment + "'>" +
                                                        "<div>" +
                                                            "<b><u>Участок " + increment + "</u></b>" +
                                                        "</div>" +
                                                        "<div class='file_upload col-lg-4 col-md-4 col-sm-4 col-xs-4' style='float: left'>" +
                                                            "<button type='button' id='changeColorDislocation" + increment + "'  class='btn btn-default'>Загрузить Дислокацию ТСОДД</button> " +
                                                        "<input name='layoutDislocation" + increment + "' onchange=\"$('#changeColorDislocation" + increment + "').removeClass('btn-default').addClass('btn-danger');setColorSegmentByLoadImage(" + increment + ")\" type='file'>" +
                                                        "</div>" +
                                                        "<div class='col-lg-4 col-md-4 col-sm-4 col-xs-4' style='float: left'>" +
                                                            "<button type='button' class='btn btn-default' data-toggle='modal' data-target='#ModalRoadSigns" + increment + "'>Ввести данные о дорожных знаках</button>" +
                                                        "</div>" +
                                                        "<div class='col-lg-4 col-md-4 col-sm-4 col-xs-4' >" +
                                                           "<button type='button' class='btn btn-default' data-toggle='modal' data-target='#RoadBarriers" + increment + "'>Ввести данные о дорожных ограждениях</button>" +
                                                        "</div>" +
                                                        "<div style='clear: both'>" +
                                                                    "Участок требует изменения дислокации ТСОДД" +
                                                                     "<select id='Segment_ChangeDislocationTCODD' onchange='setColorSegment(" + increment + ",this)' name='Segment.ChangeDislocationTCODD'>" +
                                                                        "<option value='true'>Да</option>" +
                                                                         "<option selected='selected' value='false'>Нет</option>" +
                                                                      "</select>" +
                                                                      "<input name='Segment.string120Symbol" + increment + "'  style='max-width: 960px; width: 960px; visibility:hidden'/>" +
                                                         "</div>" +
                                                      "</div>");

                        //вставка модальных окон

                        $('[id^="ModalRoadSigns"]:last').after($('#ModalRoadSigns1').clone()
                   .attr("id", "ModalRoadSigns" + increment).find(".buttonclose")
                   .attr("onclick", "cleaningRoadSigns(" + increment + ",this)").end().find("td input").end().find(".buttonSave").attr("onclick", "changeColorRoadSigns(" + increment + ",this)").end().find("li a").each(function (ind, element) {
                       $(element).attr("href", "#tab" + incForTab1);
                       incForTab1++;
                   }).end().find('[role="tabpanel"]').each(function (ind, element) {
                       $(element).attr("id", "tab" + incForTab2);
                       incForTab2++;
                   }).end().find("tbody").html('<tr>' +
                          '<td style="vertical-align: middle; width: 185px; height: 115px"><input type="text" class="FindRoadSings"></td>' +
                          '<td style="width: 117px; height: 115px"></td>' +
                          '<td style="width: 150px"></td>' +
                          '<td style="width: 161px"></td>' +
                          '<td style="vertical-align: middle;width: 192px"></td>' +
                          '<td style="vertical-align: middle"><a class="lastA" href="#"><img style="width: 15px" src="../../Content/images/StrikethroughСircle.jpg"/></a></td>' +
                      '</tr>').end());

                        $('[id^="RoadBarriers"]:last').after($('#RoadBarriers1').clone()
                            .attr("id", "RoadBarriers" + increment).find(".buttonclose")
                            .attr("onclick", "cleaningRoadBarriers(" + increment + ",this)").end()
                            .find("td input").end().find(".buttonSave").attr("onclick", "changeColorRoadBarriers(" + increment + ",this)").end().find("tbody").html('<tr>' +
                                '<td style="vertical-align: middle; width: 187px;"><input type="text" class="FindRoadBarriers"></td>' +
                                '<td style="width: 170px;"></td>' +
                                '<td style="width: 180px"></td>' +
                                '<td style="vertical-align: middle;width: 258px"></td>' +
                                '<td style="vertical-align: middle"><a class="lastA" href="#"><img style="width: 15px" src="../../Content/images/StrikethroughСircle.jpg"/></a></td>' +
                            '</tr>').end());


                    }

                    $("#CountSides").val(increment); $("#breadthSegS" + increment).attr("value", tempData[0]);
                    $("#lengthSegS" + increment).attr("value", tempData[1]);
                    $("#breadthSegE" + increment).attr("value", coords[0].toPrecision(6));
                    $("#lengthSegE" + increment).attr("value", coords[1].toPrecision(6));
                    var segment = new ymaps.GeoObject({
                        geometry: {
                            type: "Point", // тип геометрии - точка
                            coordinates: [coords[0].toPrecision(6), coords[1].toPrecision(6)] // координаты точки

                        },
                        properties: {
                            iconContent: increment,
                            balloonContentHeader: "<a href='#' onclick='deleteSegment(" + increment + ")'>Удалить Обьект</a>",
                            balloonContent: "[" + coords[0].toPrecision(6) + "," + coords[1].toPrecision(6) + "]"
                        }
                    },
                    {
                        preset: "islands#grayCircleIcon",
                        draggable: true
                    });

                    var myCircle = new ymaps.Circle([[coords[0].toPrecision(6), coords[1].toPrecision(6)], 3], null, { draggable: true, visible: false });


                    myMap.geoObjects.add(myCircle);
                    myMap.geoObjects.add(segment);

                    objects = ymaps.geoQuery([myCircle]);

                    var tempCoordinates;
                    segment.events.add('dragstart', function () {
                        tempCoordinates = segment.geometry._xl[0];
                    });
                    var Edit = increment;
                    segment.events.add('drag', function (e) {

                        $("#breadthSegS" + (Edit + 1).toString()).val(segment.geometry._xl[0][0].toString().substring(0, 7));
                        $("#lengthSegS" + (Edit + 1).toString()).val(segment.geometry._xl[0][1].toString().substring(0, 7));
                        $("#breadthSegE" + Edit).val(segment.geometry._xl[0][0].toString().substring(0, 7));
                        $("#lengthSegE" + Edit).val(segment.geometry._xl[0][1].toString().substring(0, 7));
                    });


                    segment.events.add('dragend', function (e) {

                        var routeObjects = ymaps.geoQuery(edges).setOptions('visible', false).addToMap(myMap);
                        myCircle.geometry.setCoordinates(
                           segment.geometry._xl[0]
                        );

                        var boundaryObjects = routeObjects.searchIntersect(myCircle);


                        if (boundaryObjects._xg.length == 0) {

                            segment.geometry.setCoordinates(tempCoordinates);

                            $("#breadthSegS" + (Edit + 1).toString()).val(segment.geometry._xl[0][0].toString().substring(0, 7));
                            $("#lengthSegS" + (Edit + 1).toString()).val(segment.geometry._xl[0][1].toString().substring(0, 7));
                            $("#breadthSegE" + Edit).val(segment.geometry._xl[0][0].toString().substring(0, 7));
                            $("#lengthSegE" + Edit).val(segment.geometry._xl[0][1].toString().substring(0, 7));
                        }
                    });

                    tempDate2.push(tempData);
                    tempData = [coords[0].toPrecision(6), coords[1].toPrecision(6)];
                    massSegment[increment - 1] = myMap.geoObjects.indexOf(segment);
                    increment++;


                }
                currentRoute.getPaths().events.add('click', handlerSegment);

            }
        }
        //подсказки разметки
        var autocompleteUrlRM = '/Home/FindRoadMarking';
        $(' form').on('keydown.autocomplete', ".FindRoadMarking", function () {
            $(this).autocomplete({
                source: function (request, response) {
                    $.ajax({
                        url: autocompleteUrlRM,
                        data: request,
                        success: function (data) {
                            var index;
                            response($.map(data, function (item) {
                                index = false;
                                for (var i = 0; indexAutoRm.length > i; i++) {

                                    if (item.value == indexAutoRm[i])
                                        index = true;
                                }
                                if (index == false) {
                                    return {
                                        label: item.label,
                                        value: item.value
                                    }
                                }
                            }));
                        }
                    });
                },
                minLength: 1,
                select: function (event, ui) {
                    indexAutoRm.push(ui.item.label);
                    $.get('@Url.Action("GetRoadMarking", "Home")', {
                        idRM: ui.item.value
                    }).success(function (result) {
                        var JsonObject = JSON.parse(result);

                        $(event.target).closest("tr").children("td").eq(1).html('<img  src="/HorizontalRoadMarkings/GetImage/' + JsonObject[0].id + '">'); $(event.target).closest("tr").children("td").eq(2).text(JsonObject[0].description);
                        $(event.target).closest("tr").children("td").eq(3).html('<input type="number" style="width:100px"  name="ModalsL' + ui.item.value + '" type="text"/>');
                        $(event.target).closest("tr").children("td").eq(4).html('<input type="number" style="width:100px"  name="ModalsA' + ui.item.value + '" type="text"/>');
                        $(event.target).closest("tbody").append('<tr>' +
                               '<td style="vertical-align: middle;width: 100px;padding:0px;height: 115px"><input style="width: 100px" type="text" class="FindRoadMarking"></td>' +
                               '<td style="width: 224px;"></td>' +
                               '<td style="width: 117px"></td>' +
                               '<td style="width: 115px; vertical-align: middle"></td>' +
                               '<td style="vertical-align: middle"></td>' +
                               '<td style="vertical-align: middle"><a href="#"><img style="width: 15px" src="../../Content/images/StrikethroughСircle.jpg"/></a></td>' +
                               '</tr>');

                        $(event.target).closest("tbody").children("tr").last().children("td").last().children("a").click(function (e) {
                            $(e.currentTarget).closest("tr").remove();
                        });
                        //скролин элимента
                        var rowpos = $(event.target).closest("table").find("tr:last").position();
                        $(event.target).closest("div").scrollTop(rowpos.top);
                    });
                }
            });
        });
        //подсказки ограждений
        var autocompleteUrlRB = '/Home/FindRoadBarriers';
        $(' form').on('keydown.autocomplete', ".FindRoadBarriers", function() {
            $(this).autocomplete({

                source: function(request, response) {
                    var valThis = $($(this)[0].bindings[0]).closest('[id^="RoadBarriers"').attr("id");
                    $.ajax({
                        url: autocompleteUrlRB,
                        data: request,
                        success: function(data) {
                            var index;
                            response($.map(data, function(item) {
                                index = false;
                                for (var i = 0; indexAutoRB.length > i; i++) {

                                    if (indexAutoRB[i][0] == valThis && item.value == indexAutoRB[i][1])
                                        index = true;
                                }
                                if (index == false) {
                                    return {
                                        label: item.label,
                                        value: item.value
                                    }
                                }
                            }));
                        }
                    });
                },
                minLength: 0,
                select: function(event, ui) {

                    indexAutoRB.push([$($(this)[0]).closest('[id^="RoadBarriers"').attr("id"), ui.item.label]);
                    $.get('@Url.Action("GetRoadBarriers", "Home")', {
                        idRB: ui.item.value
                    }).success(function(result) {

                        var JsonObject = JSON.parse(result);

                        var url = '/RoadBarriers/GetImage/' + JsonObject[0].Id;

                        function IsValidImageUrl(url) {
                            $("<img>", {
                                src: url,
                                error: function() {
                                    //alert(url + ': ' + false);
                                },
                                load: function() {
                                    $("#AddSrc" + JsonObject[0].Id).attr("src", "/RoadBarriers/GetImage/" + JsonObject[0].Id);
                                    $("#AddSrc" + JsonObject[0].Id).css({ "height": "150px", "width": "150px" });
                                }
                            });
                        }


                        $(event.target).closest("tr").children("td").eq(1).html('<img id="AddSrc' + JsonObject[0].Id + '">');
                        IsValidImageUrl(url);
                        $(event.target).closest("tr").children("td").eq(2).text(JsonObject[0].Description);
                        $(event.target).closest("tr").children("td").eq(3).html('<input type="number"   name="' + $(event.target).closest("[role='dialog']").attr("id").substr($(event.target).closest("[role='dialog']").attr("id").indexOf("s") + 1) + 'RoadBarriers' + ui.item.value + '" type="text"/>');

                        $(event.target).closest("tbody").append('<tr>' +
                            '<td style="vertical-align: middle;width: 145px;height: 115px"><input type="text" class="FindRoadBarriers"></td>' +
                            '<td style="width: 115px;height: 115px"></td>' +
                            '<td style="width: 117px"></td>' +
                            '<td style="vertical-align: middle">' +
                            '</td>' +
                            '<td style="vertical-align: middle"><a href="#"><img style="width: 15px" src="../../Content/images/StrikethroughСircle.jpg"/></a></td>' +
                            '</tr>');
                        $(event.target).closest("tbody").children("tr").last().children("td").last().children("a").click(function(e) {
                            $(e.currentTarget).closest("tr").remove();
                        });
                        //скролин элимента
                        var rowpos = $(event.target).closest("table").find("tr:last").position();
                        $(event.target).closest("div").scrollTop(rowpos.top);
                    });
                }
            });
        })        //подсказки знаков
        var autocompleteUrlRS = '/Home/FindRoadSings';
        $('form').on('keydown.autocomplete', ".FindRoadSings", function () {
            $(this).autocomplete({

                source: function (request, response) {
                    var valThis = $($(this)[0].bindings[0]).closest('[id^="ModalRoadSigns"').attr("id");
                    $.ajax({
                            url: autocompleteUrlRS,
                            data:request,
                            success: function (data) {
                                var index ;
                                response($.map(data, function (item) {
                                    index = false;

                                    for (var i = 0; indexAutoRs.length > i; i++) {


                                        if (indexAutoRs[i][0] == valThis && item.value == indexAutoRs[i][1] && item.indexManyElement == 0)

                                            index = true;
                                    }
                                    if (index == false){
                                        return {
                                            label: item.label,
                                            value: item.value
                                        }
                                    }
                                }));
                            }});
                },
                minLength: 1,

                select: function (event, ui) {

                    indexAutoRs.push([$($(this)[0]).closest('[id^="ModalRoadSigns"').attr("id"), ui.item.label]);

                    $(event.target).closest("tr").children("td").eq(2).attr("");
                    $.get('@Url.Action("GetRoadSigns", "Home")', {
                        idRS: ui.item.value
                    }).success(function (result) {
                        function compare(a, b) {
                            if (a.ItemOrder < b.ItemOrder)
                                return -1;
                            else if (a.ItemOrder > b.ItemOrder)
                                return 1;
                            else
                                return 0;
                        }


                        var JsonObject = JSON.parse(result);
                        JsonObject[0].RoadSignItems.sort(compare);

                        $(event.target).closest("tr").children("td").eq(1).html('<img style="height: 100px; width: 100px" src="/RoadSigns/GetImage/' + JsonObject[0].id + '">');
                        $(event.target).closest("tr").children("td").eq(2).text(JsonObject[0].Description);
                        $(event.target).closest("tr").children("td").eq(3).children().remove();
                        if (JsonObject[0].RoadSignItems.length == 0) {
                            $(event.target).closest("tr").children("td").eq(4).html('<input type="number"   name="' + $(event.target).closest("[role='dialog']").attr("id").substr($(event.target).closest("[role='dialog']").attr("id").indexOf("s") + 1) + 'ModalC' + ui.item.value + '" type="text"/>');
                        }

                        if (JsonObject[0].RoadSignItems.length > 0) {
                            if (JsonObject[0].RoadSignItems[0].ImageData != null) {
                                $(event.target).closest("tr").children("td").eq(4).html('<input type="number"  name="1ModalC' + ui.item.value + 'I1" type="text"/>');
                                var dd = '<select  class="dd">';
                                dd += '<option selected ">Выбирите маркер</option>';
                                for (var i = 0; i < JsonObject[0].RoadSignItems.length; i++) {
                                    dd += '<option value="' + JsonObject[0].RoadSignItems[i].ItemOrder + '" data-image="/RoadSigns/GetItemImage/' + JsonObject[0].RoadSignItems[i].Id + '?hallmark=' + JsonObject[0].RoadSignItems[i].Hallmark + '"></option>';

                                }
                                dd += '</select>';

                                $(event.target).closest("tr").children("td").eq(3).html(dd);

                                $(event.target).closest("tr").children("td").eq(3).children().msDropDown();
                            } else {
                                $(event.target).closest("tr").children("td").eq(4).html('<input type="number"  name="1ModalC' + ui.item.value + 'I1" type="text"/>');
                                var dd = '<select  class="dd">';

                                for (var i = 0; i < JsonObject[0].RoadSignItems.length; i++) {
                                    dd += '<option  value="' + JsonObject[0].RoadSignItems[i].ItemOrder + '">' + JsonObject[0].RoadSignItems[i].Description + '</option>';

                                }
                                dd += '</select>';

                                $(event.target).closest("tr").children("td").eq(3).html(dd);
                            }
                            $(event.target).closest("tr").find("select").change(function () {
                                $(event.target).closest("tr").children("td").eq(4).html('<input type="number"  name="1ModalC' + ui.item.value + 'I' + $(this).val() + '" type="text"/>');

                            });
                        }
                        $(event.target).closest("tbody").append('<tr>' +
                            '<td style="vertical-align: middle;width: 185px;height: 115px"><input type="text" style="vertical-align: middle" class="FindRoadSings"></td>' +
                            '<td style="width: 115px;height: 115px"></td>' +
                            '<td style="width: 117px"></td>' +
                            '<td style="width: 115px"></td>' +
                            '<td style="vertical-align: middle"></td>' +
                            '<td style="vertical-align: middle"><a href="#"><img style="width: 15px" src="../../Content/images/StrikethroughСircle.jpg"/></a></td>' +
                            '</tr>');
                        $(event.target).closest("tbody").children("tr").last().children("td").last().children("a").click(function (e) {
                            $(e.currentTarget).closest("tr").remove();
                        });
                        //скролин элимента
                        var rowpos = $(event.target).closest("table").find("tr:last").position();
                        $(event.target).closest("div").scrollTop(rowpos.top);
                    });
                }
            });
        });
        //Чистка первого значения
        $("form").on("click", ".lastA", function (e) {

            if ($(e.currentTarget).closest("tbody").children("tr").length > 1) {
                $(e.currentTarget).closest("tbody").children("tr:last").remove();
            };
            $(e.currentTarget).closest("tr").children("td").eq(0).children().val("");
            $(e.currentTarget).closest("tr").children("td").eq(1).children().remove();
            $(e.currentTarget).closest("tr").children("td").eq(2).html("");
            $(e.currentTarget).closest("tr").children("td").eq(3).children().remove();
        }
            );
        $("form").on("click", ".lastB", function (e) {

            if ($(e.currentTarget).closest("tbody").children("tr").length > 1) {
                $(e.currentTarget).closest("tbody").children("tr:last").remove();
            };
            $(e.currentTarget).closest("tr").children("td").eq(0).children().val("");
            $(e.currentTarget).closest("tr").children("td").eq(1).children().remove();
            $(e.currentTarget).closest("tr").children("td").eq(2).html("");
            $(e.currentTarget).closest("tr").children("td").eq(3).children().remove();
            $(e.currentTarget).closest("tr").children("td").eq(4).children().remove();
        }
         );
        function BlockForm() {
            alert("Вы не сохранили координаты участков");
            return false;
        }
        $('[action^="/Home/EditStreets"]').one('click', ".setSegment", setSegment);
        //отправка формы
        $(' [action^="/Home/EditStreets"]').on('click', "#BlockSegment", function () {

            currentRoute.getPaths().events.remove('click', handlerSegment);

            $(".ShowHideSegment").each(function (ind, element) {
                $(element).hide();
            });
            $(' [action^="/Home/EditStreets"]').off("click", "#blockElement button,#blockElement input,#blockForm button", BlockForm);

            $("#BlockSegment").css("display", "none");
            $(".setSegment").one('click', setSegment);
            myMap.geoObjects.each(function (el, index) {

                for (var i = 0; i < massSegment.length; i++) {
                    if (massSegment[i] == index) {
                        el.balloon.destroy();
                        el.options.set({
                            draggable: false
                        });
                    };
                }

            });
        });

        //$('form[action="/Home/EditStreets"]').on("click", "#blockElement button,#blockElement input,#blockForm button", BlockForm);


        //$(".setSegment").one('click', setSegment);

        $("#breadthS, #lengthS, #breadthE, #lengthE").change(function () {
            Set();
        });
        //закрытие модального окна
        $("#closeModel").click(function () {
            $("#ModalTable").modal('hide');
        });


        //заблокировать наименовае улицы
        $("#blockStreet").click(function () {
            if ($(this).parent().prev().children("input").eq(2).val() != '') {
                $(this).parent().prev().children("input").each(function (indx, element) {
                    $(element).attr("readonly", "");
                });
                $(this).css("display", "none");
            } else {
                alert("Введите название улицы");
            }
        });
        //заблокировать поля  улицы и убрать координаты
        $("#blockStreetCoord").click(function () {

            //делает readOnly  инпуты
            if (currentRoute != undefined && identifierForDelete != 1) {
                $(this).parent().prev().children("input").each(function (indx, element) {
                    $(element).attr("readonly", "");
                });

                $(this).parent().prev().prev().prev().children("input").each(function (indx, element) {
                    $(element).attr("readonly", "");
                });

                $(this).css("display", "none");
                //currentRoute.editor.start({ editWayPoints: false });
                if (currentRoute != undefined) {
                    myMap.geoObjects.remove(currentRoute);
                }
                currentRoute.getPaths().options.set({

                    //можно выставить настройки графики маршруту
                    strokeColor: '0000ffff',
                    opacity: 0.9,
                    strokeWidth: 4
                });
                //var segments= currentRoute.getPaths().get(0).getSegments();

                tempData = Arr[0];

                myMap.geoObjects.add(currentRoute.getPaths());
                //убитие балуна
                currentRoute.getPaths().events.add('click', function (e) {
                    e.preventDefault();

                    currentRoute.getPaths().get(0).balloon.close();
                });
            } else {
                alert("Задайте сначала маршрут");
            }
        });
        //подсказки улиц
        var autocompleteUrl = '/Home/FindStreets';
        $('[name="Street.Name"]').autocomplete({
            source: autocompleteUrl,
            minLength: 2,
            select: function (event, ui) {

            }
        });

        //при клике по tr фокус по input
        $("form").has("input").on("click", "tr td", (function (eventObject) {

            $(eventObject.target).children().focus();
        }));

        //чистка полей в модальном окне при нажатии по close
        $("#close").click(function (e) {

            $("#ModalMackUp input").each(function (indx, element) {
                $(element).val("");
            });
        });

        $('#ModalMackUp').on('hidden.bs.modal', function (e) {

            if (ModalMackUpSave.length != 0) {
                var index;
                var elementIndex;

                for (var i = $(e.currentTarget).find(".modal-content").find("tbody tr").length; i != -1; i--) {
                    index = false;


                    for (var j = 0; ModalMackUpSave.length > j; j++) {

                        if (ModalMackUpSave[j] == $($(e.currentTarget).find(".modal-content").find("tbody tr")[i]).find("td:eq(0) input").val()) {

                            index = true;

                        };

                    }

                    if (index == false) {
                        elementIndex = $($(e.currentTarget).find(".modal-content").find("tbody tr")[i]).find("td:eq(0) input").val();
                        $($(e.currentTarget).find(".modal-content").find("tbody tr")[i]).remove();
                    }
                    for (var z = 0; indexAutoRm.length > z; z++) {
                        if (indexAutoRm[z] == elementIndex) {
                            indexAutoRm.splice(z, 1);
                        }
                    }
                }
            }
            if (ModalMackUpSave.length == 0) {

                var j = indexAutoRm.length;
                while (j--) {
                    indexAutoRm.splice(j, 1);

                }

                var mkp = '<td style="vertical-align: middle; width: 100px; padding: 0px; height: 115px"><input class="FindRoadMarking" style="width: 100px" type="text"></td>' +
                                        '<td style="width: 241px;"></td>' +
                                        '<td style="width: 180px"></td>' +
                                        '<td style="vertical-align: middle;width: 117px"></td>' +
                                        '<td style="vertical-align: middle;width: 157px"></td>' +
                                        '<td style="vertical-align: middle"><a class="lastB" href="#"><img style="width: 15px" src="../../Content/images/StrikethroughСircle.jpg" /></a></td>';

                $("#ModalMackUp > div > div > div.modal-body > table > tbody > tr:eq(1)").empty();
                $("#ModalMackUp > div > div > div.modal-body > table  > tr:gt(1)").each(function (i, val) { $(val).remove() });
                $("#ModalMackUp tr:eq(1)").empty().html(mkp);
                $("#ModalMackUp tr:gt(1)").remove();

            }
        });
        $("form").on('hidden.bs.modal', '[id^="ModalRoadSigns"]', function (e) {
            var Temp = ModalRoadSignsSave.slice();
            if (ModalRoadSignsModal == false) {
                var lenghtSingle = 0;
                for (var j = 0; ModalRoadSignsSave.length > j; j++) {
                    if (ModalRoadSignsSave[j][0] == $(e.currentTarget).attr("id").substring($(e.currentTarget).attr("id").indexOf("s") + 1)) {
                        lenghtSingle++;
                    }
                }

                if (lenghtSingle != 0) {
                    var index;
                    var elementIndex;

                    for (var i = 0; $(e.currentTarget).find(".modal-content").find("tbody tr").length > i ; i++) {
                        index = false;

                        for (var j = 0; ModalRoadSignsSave.length > j; j++) {

                            if (ModalRoadSignsSave[j][0] == $(e.currentTarget).attr("id").substring($(e.currentTarget).attr("id").indexOf("s") + 1)) {
                                if ($($(e.currentTarget).find(".modal-content").find("tbody tr")[i]).find("td:eq(0) input").val() == ModalRoadSignsSave[j][1]) {

                                    index = true;
                                    ModalRoadSignsSave.splice(j, 1);
                                };
                            }
                        }

                        if (index == false) {
                            elementIndex = $($(e.currentTarget).find(".modal-content").find("tbody tr")[i]).find("td:eq(0) input").val();
                            if ($(e.currentTarget).find(".modal-content").find("tbody tr").eq(i).find("td:first input").val() != "") {
                                $($(e.currentTarget).find(".modal-content").find("tbody tr")[i]).remove();
                            }
                        }

                        for (var z = 0; indexAutoRs.length > z; z++) {
                            if (indexAutoRs[z][0].substring(indexAutoRs[z][0].indexOf("s") + 1) == $(e.currentTarget).attr("id").substring($(e.currentTarget).attr("id").indexOf("s") + 1)) {
                                if (indexAutoRs[z][1] == elementIndex) {
                                    indexAutoRs.splice(z, 1);
                                }
                            }
                        }
                    }
                }
                if (lenghtSingle == 0) {
                    for (var j = 0; indexAutoRs.length > j; j++) {
                        if (indexAutoRs[j][0].substring(indexAutoRs[j][0].indexOf("s") + 1) == $($(e.target)[0]).attr("id").substring($($(e.target)[0]).attr("id").indexOf("s") + 1)) {
                            indexAutoRs.splice(j, 1);
                        };
                    }

                    $(e.target).find(" tr:gt(1)").each(function (indx, element) {
                        $(element).remove();
                    });
                    $(e.target).find(" tr:eq(1)")
                        .children().eq(0).children().val("");
                    $(e.target).find(" tr:eq(1)")
                        .children().eq(1).children().remove();
                    $(e.target).find(" tr:eq(1)")
                        .children().eq(2).html("");
                    $(e.target).find(" tr:eq(1)")
                        .children().eq(3).children().remove();
                    $(e.target).find(" tr:eq(1)")
                        .children().eq(4).children().remove();

                }
            }
            ModalRoadSignsSave = Temp.slice();
            ModalRoadSignsModal = false;
        });
        $("form").on('hidden.bs.modal', '[id^="RoadBarriers"]', function (e) {
            var lenghtSingle = 0;

            for (var j = 0; RoadBarriersSave.length > j; j++) {
                if (RoadBarriersSave[j][0] == $($(e.target)[0]).attr("id").substring($($(e.target)[0]).attr("id").indexOf("s") + 1)) {
                    lenghtSingle++;
                }
            }
            if (lenghtSingle != 0) {

                var index;
                var elementIndex;

                for (var i = $(e.currentTarget).find(".modal-content").find("tbody tr").length; i != -1; i--) {
                    index = false;

                    for (var j = 0; RoadBarriersSave.length > j; j++) {

                        if (RoadBarriersSave[j][0] == $($(e.target)[0]).attr("id").substring($($(e.target)[0]).attr("id").indexOf("s") + 1)) {
                            if (RoadBarriersSave[j][1] == $($(e.currentTarget).find(".modal-content").find("tbody tr")[i]).find("td:eq(0) input").val()) {

                                index = true;

                            };
                        }
                    }

                    if (index == false) {
                        elementIndex = $($(e.currentTarget).find(".modal-content").find("tbody tr")[i]).find("td:eq(0) input").val();
                        if ($(e.currentTarget).find(".modal-content").find("tbody tr").eq(i).find("td:first input").val() != "") {
                            $($(e.currentTarget).find(".modal-content").find("tbody tr")[i]).remove();
                        }
                    }


                    for (var z = 0; indexAutoRB.length > z; z++) {

                        if (indexAutoRB[z][0].substring(indexAutoRB[z][0].indexOf("s") + 1) == $($(e.target)[0]).attr("id").substring($($(e.target)[0]).attr("id").indexOf("s") + 1)) {
                            if (indexAutoRB[z][1] == elementIndex) {
                                indexAutoRB.splice(z, 1);
                            }
                        }
                    }
                }
            }
            if (lenghtSingle == 0) {

                var j = indexAutoRB.length;
                while (j--) {
                    if (indexAutoRB[j][0].substring(indexAutoRB[j][0].indexOf("s") + 1) == $($(e.target)[0]).attr("id").substring($($(e.target)[0]).attr("id").indexOf("s") + 1)) {

                        indexAutoRB.splice(j, 1);
                    }
                }
                var mkp =
                            '<td style="width: 187px;"><input type="text" class="FindRoadBarriers"></td>' +
                            '<td style="width: 170px;"></td><td style="width: 180px"></td>' +
                            '<td style="vertical-align: middle;width: 258px"></td><td style="vertical-align: middle"><a class="lastA" href="#"><img style="width: 15px" src="../../Content/images/StrikethroughСircle.jpg"/></a></td>';
                $(e.target).find("tr:eq(1)")
                            .children().eq(0).children().val("");
                $(e.target).find(" tr:eq(1)")
                .children().eq(1).children().remove();
                $(e.target).find(" tr:eq(1)")
                .children().eq(3).children();
                $(e.target).find(" tr:eq(1)")
                .children().eq(2).html("");
                $(e.target).find(" tr:eq(1)")
                .children().eq(3).children().remove();
                $(e.target).find("tr:eq(1)").empty().html(mkp);

                $(e.target).find(" tbody tr:gt(0)").remove();
            }
        });
        //добавлены +- для полей
        $("form").on('keypress', '[type="number"]', function (e) {
            var num;
            if (e.which == 45) {
                if ($(e.target).val() == "") {
                    $(e.target).val("0");
                }
                else {
                    num = parseInt($(e.target).val());
                    $(e.target).val(--num);
                }
                return false;
            }
            if (e.which == 61 || e.which == 43) {
                if ($(e.target).val() == "") {
                    $(e.target).val("0");
                }
                else {
                    num = parseInt($(e.target).val());
                    $(e.target).val(++num);
                }
                return false;
            }
        });
    });

</script>
<style>
       /*fix autocomplete in bootstrap*/
    .ui-autocomplete {
        z-index: 2147483647;
        height: 300px;
        overflow-y: scroll;
        overflow-x: hidden;
    }
     span > img {
        width: 100px !important;
    }
     li > img {
        width: 100px !important;
    }
    /*стили на для Upload кнопки*/
     .file_upload {
         position: relative;
         overflow: hidden;
         height: 34px; /* example */
         margin-bottom: 10px;
     }

    .file_upload > input {
        max-width: 284px;
    }

    .file_upload input[type=file] {
        position: absolute;
        top: 0;
        width: 100%;
        height: 100%;
        transform: scale(1);
        letter-spacing: 10em; /* IE 9 fix */
        -ms-transform: scale(1); /* IE 9 fix */
        opacity: 0;
        cursor: pointer;
    }
    /*модальное окно*/
    .modal-dialog {
        width: 645px;
    }

    td input {
        border-width: 0;
        text-align: right !important;
    }
    /*правит шрифт бутсрапа*/
    label {
        font-weight: normal;
    }
    /*отступы*/
    .indentForTextBox {
        margin-right: 60px;
    }

    .btn {
        width: 285px;
    }

    @@media (min-width: 768px) {


        #printable img {
            height: 300px !important;
        }
    }

    @@media (min-width: 992px) {

        #printable img {
            height: 380px !important;
        }
    }

    @@media (min-width: 1400px) {

        #printable img {
            height: 600px !important;
        }

        .modal-content {
            width: 900px !important;
        }
    }
</style>
<h2 style="text-align: center">ИЗМЕНЕНИЕ ДАННЫХ УЛИЦЫ</h2>

@using (Html.BeginForm("EditStreets", "Home", null, FormMethod.Post, new
{
    enctype = "multipart/form-data"
}))
{
    <div class="form-inline">
        <div class="form-group col-lg-7 col-md-7 col-sm-7 col-xs-7">
            <div id="map" style="height: 744px;"></div>
        </div>

        <div class="form-group col-lg-5 col-md-5 col-sm-5 col-xs-5">
            <b><u>1.Наименование улицы</u></b>
            <div>
                @Html.HiddenFor(a => a.City.id)
                @Html.Label("Выбирите город", new { @for = "City.Name" }) @Html.TextBoxFor(a => a.City.Name)
                @Html.Label("Выбирите улицу", new { @for = "Street.Name" })@Html.TextBoxFor(a => a.Name, null, new { id = "street", Name = "Street.Name" })
            </div>
            <div>
                <button type="button" class="btn btn-default" onclick="search()">Показать на карте</button>
                <button type="button" id="blockStreet" class="btn btn-primary" style="display: none">Сохранить</button>
            </div>
            <h5>После сохранения наименования улицы, появляется возможность задавать ее координаты</h5>
            <b><u>2.Координаты улицы</u></b>
            <div>Начальнаты начала</div>
            <input type="hidden" name="Street.id" value="@Model.id">
            <div>
                @Html.Label("Широта", new { @for = "Street.BreadthS" }) @Html.TextBoxFor(a => a.BreadthS, null, new { id = "breadthS", @readonly = "", Name = "Street.BreadthS" })
                @Html.Label("Долгота", new { @for = "Street.LengthS" }) @Html.TextBoxFor(a => a.LengthS, null, new { id = "lengthS", @readonly = "", Name = "Street.LengthS" })
            </div>
            <div>Координаты конца</div>
            <div>
                @Html.Label("Широта", new { @for = "Street.BreadthE" }) @Html.TextBoxFor(a => a.BreadthE, null, new { id = "breadthE", @readonly = "", Name = "Street.BreadthE" })
                @Html.Label("Долгота", new { @for = "Street.LengthE" }) @Html.TextBoxFor(a => a.LengthE, null, new { id = "lengthE", @readonly = "", Name = "Street.LengthE" })
            </div>
            <div>
                <button type="button" onclick="SetCoords()" class="btn btn-default">Задать/Изменить координаты</button>
                <button type="button" id="blockStreetCoord" class="btn btn-primary" style="display: none">Сохранить</button>
            </div>
            <h5>После сохранения координат улицы, появляется возможность задавать координаты участков</h5>
            <b><u>3.Количество и координаты участков улицы</u></b>
            <div>
                @Html.Label("Количество участков", new { @for = "CountSides", style = "margin-right: 20px" }) @Html.TextBoxFor(a => a.Segment.Count, null, new { id = "CountSides", style = "width: 40px", @readonly = "", Name = "CountSides" })
            </div>
            <div class="ShowHideSegment" style="display: none">
                <div id="segment1">
                </div>
                <div id="segment2">
                </div>
                <div id="segment3">
                </div>
                <div id="segment4">
                </div>
            </div>
            <div>
                <button type="button" class="btn btn-default setSegment">Задать/Изменить координаты</button>
                <button id="BlockSegment" type="button" class="btn btn-primary" style="display: none">Сохранить</button>
            </div>

        </div>

    </div>
    <div id="interData"></div>
    <h5>После сохранения координат участков, появляется возможность вводить информацию об участках</h5>
    <!-- ModalMackUp -->
    <div class="modal fade" id="ModalMackUp" tabindex="-1" role="dialog" data-backdrop="false" aria-labelledby="myModalLabel">
        <div class="modal-dialog" style="width: 1000px; " role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <div style="text-align: right">
                        <img data-dismiss="modal" onclick="changeColorMackUp(event)" aria-label="Close" style="width: 100px; height: 16px" src="../../Content/images/save.jpg" />
                        <img data-dismiss="modal" onclick="cleaningModalMackUp(1)" aria-label="Close" style="width: 100px; height: 16px" src="../../Content/images/close.jpg" />
                    </div>
                    <h4 class="modal-title" id="myModalLabel">
                        Спецификация горизонтальной дорожной разметки
                        <p>по ул. <span class="text">_________________</span> в г. Минске
                    </h4>

                </div>
                <div class="modal-body" style="height: 640px">

                    <table class="table table-bordered" style="margin-bottom: 0px">
                        <thead>
                            <tr>
                                <th style="width: 101px;">№ разметки</th>
                                <th style="width: 241px;">Картинка</th>
                                <th style="width: 180px">Описание</th>
                                <th style="width: 117px">Длина (м.пог) / штуки</th>
                                <th style="width: 157px">Площадь (м.кв)</th>
                                <th></th>
                            </tr>
                        </thead>
                    </table>
                    <div id="container" style="height: 530px;overflow-y:scroll">
                        <table class="table table-bordered">
                            <tbody style="height: 640px; overflow: auto">
                                <tr>
                                    <td style="vertical-align: middle; width: 100px; padding: 0px; height: 115px"><input class="FindRoadMarking" style="width: 100px" type="text"></td>
                                    <td style="width: 241px;"></td>
                                    <td style="width: 180px"></td>
                                    <td style="vertical-align: middle;width: 117px"></td>
                                    <td style="vertical-align: middle;width: 157px"></td>
                                    <td style="vertical-align: middle"><a class="lastB" href="#"><img style="width: 15px" src="../../Content/images/StrikethroughСircle.jpg" /></a></td>
                                </tr>
                            </tbody>

                        </table>
                    </div>
                </div>

            </div>
        </div>
    </div>
    //ModalRoadSigns
    <div class="modal fade" id="ModalRoadSigns1" tabindex="-1" role="dialog" data-backdrop="false" aria-labelledby="myModalLabel">
        <div class="modal-dialog" role="document">
            <div class="modal-content" style="width: 800px;">
                <div class="modal-header">
                    <div style="text-align: right">
                        <img class="buttonSave" data-dismiss="modal" onclick="changeColorRoadSigns(1, this)" aria-label="Close" style="width: 100px; height: 16px" src="../../Content/images/save.jpg" />
                        <img class="buttonclose" data-dismiss="modal" onclick="cleaningRoadSigns(1,this)" aria-label="Close" style="width: 100px; height: 16px" src="../../Content/images/close.jpg" />
                    </div>

                    <h4 class="modal-title" id="myModalLabel">
                        Спецификация дорожных знаков
                        <p>по ул. <span class="text">_________________</span> в г. Минске
                    </h4>
                </div>
                <div class="modal-body " style="height: 800px">
                    <table class="table table-bordered" style="margin-bottom: 0px">
                        <thead>
                            <tr>
                                <th style="width: 187px;">№ знака</th>
                                <th style="width: 117px;">Картинка</th>
                                <th style="width: 150px">Описание</th>
                                <th style="width: 161px">Маркер</th>
                                <th style="width: 192px">Количество</th>
                                <th></th>
                            </tr>
                        </thead>
                    </table>
                    <div style="height: 700px;overflow-y:scroll">
                        <table class="table table-bordered">
                            <tbody>
                                <tr>
                                    <td style="vertical-align: middle; width: 185px; height: 115px"><input type="text" class="FindRoadSings"></td>
                                    <td style="width: 117px; height: 115px"></td>
                                    <td style="width: 150px"></td>
                                    <td style="width: 161px"></td>
                                    <td style="vertical-align: middle;width: 192px"></td>
                                    <td style="vertical-align: middle"><a class="lastA" href="#"><img style="width: 15px" src="../../Content/images/StrikethroughСircle.jpg" /></a></td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>

            </div>
        </div>
    </div>
       <!-- RoadBarriers -->
    <div class="modal fade" id="RoadBarriers1" tabindex="-1" role="dialog" data-backdrop="false" aria-labelledby="myModalLabel">
        <div class="modal-dialog" role="document">
            <div class="modal-content" style="width: 800px; ">
                <div class="modal-header">
                    <div style="text-align: right">
                        <img class="buttonSave" data-dismiss="modal" onclick="changeColorRoadBarriers(1, this)" aria-label="Close" aria-label="Close" style="width: 100px; height: 16px" src="../../Content/images/save.jpg" />
                        <img class="buttonclose" data-dismiss="modal" onclick="cleaningRoadBarriers(1,this)" aria-label="Close" style="width: 100px; height: 16px" src="../../Content/images/close.jpg" />
                    </div>

                    <h4 class="modal-title" id="myModalLabel">
                        Спецификация  дорожных ограждений
                        <p>по ул. <span class="text">_________________</span> в г. Минске
                    </h4>
                </div>
                <div class="modal-body " style="height: 800px; overflow: auto;">
                    <table class="table table-bordered" style="margin-bottom: 0px">
                        <thead>
                            <tr>
                                <th style="width: 187px">№ </th>
                                <th style="width: 170px">Картинка</th>
                                <th style="width: 180px">Описание</th>
                                <th style="width: 258px">Погонные метры</th>
                                <th></th>
                            </tr>
                        </thead>
                    </table>
                    <div style="height: 700px; overflow-y: scroll">
                        <table class="table table-bordered">
                            <tbody>
                                <tr>
                                    <td style="vertical-align: middle; width: 187px;"><input type="text" class="FindRoadBarriers"></td>
                                    <td style="width: 170px;"></td>
                                    <td style="width: 180px"></td>
                                    <td style="vertical-align: middle;width: 258px"></td>
                                    <td style="vertical-align: middle"><a class="lastA" href="#"><img style="width: 15px" src="../../Content/images/StrikethroughСircle.jpg" /></a></td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>

            </div>
        </div>
    </div>

                                    <div>
                                        <div id="blockElement" style="clear: both">
                                            <div>
                                                <b><u>4.Ввод данных</u></b>
                                            </div>
                                            <div class="file_upload  col-lg-4 col-md-4 col-sm-4 col-xs-4">
                                                <button class="btn btn-default" id="changeColorScheme1" type="button">Загрузить компоновочную схему</button>
                                                <input onchange='$("#changeColorScheme1").removeClass("btn-default").addClass("btn-danger");' name="layoutScheme" type="file">
                                            </div>
                                            <div class="col-lg-4 col-md-4 col-sm-4 col-xs-4">
                                                <button type="button" class="btn btn-default" data-toggle="modal" data-target="#ModalMackUp">Ввести спецификацию разметки</button>
                                            </div>
                                            <div style="clear: both" class="DataOfRoad1">
                                                <input type='hidden' name='LayoutDislocationDelete' value='1' />
                                                <div>
                                                    <b><u>Участок 1</u></b>
                                                </div>

                                                <div class="file_upload col-lg-4 col-md-4 col-sm-4 col-xs-4" style="float: left">
                                                    <button type="button" id="changeColorDislocation1" class="btn btn-default">Загрузить Дислокацию ТСОДД</button>
                                                    <input name="layoutDislocation1" onchange='$("#changeColorDislocation1").removeClass("btn-default").addClass("btn-danger"); setColorSegmentByLoadImage(1);' type="file">
                                                </div>
                                                <div class=" col-lg-4 col-md-4 col-sm-4 col-xs-4" style="float: left">
                                                    <button type="button" class="btn btn-default" data-toggle="modal" data-target="#ModalRoadSigns1">Ввести данные о дорожных знаках</button>
                                                </div>
                                                <div class=" col-lg-4 col-md-4 col-sm-4 col-xs-4">
                                                    <button type="button" class="btn btn-default" data-toggle="modal" data-target="#RoadBarriers1">
                                                        Ввести данные о дорожных ограждениях
                                                    </button>
                                                </div>
                                                <div style="clear: both">
                                                    Участок требует изменения дислокации ТСОДД
                                                    @Html.DropDownListFor(a => a.Segment.First().ChangeDislocationTCODD,
                    new SelectList(
                        new[]
                        {
                            new SelectListItem() {Text = "Да", Value = "true"},
                            new SelectListItem() {Text = "Нет", Value = "false"}
                        }, "Value", "Text", Model.Segment.First().ChangeDislocationTCODD
                        ), new { onchange = "setColorSegment(1,this)", Name = "Segment.ChangeDislocationTCODD" })
                                                    <input name="Segment.string120Symbol1" style="max-width: 960px; width: 960px; visibility: hidden" />

                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <div id="blockForm" style="margin-left: 60%; margin-top: 60px">
                                        @Html.ActionLink("Выйти без сохранения", "Table", "Home", new { @class = "btn btn-default", style = "float:left" }) <button class="btn btn-primary">Сохранить</button>
                                    </div>

                                    }
<div class="modal fade" id="layoutDislocation" tabindex="-1" role="dialog" aria-labelledby="myModalLabel">
    <div class="modal-dialog" role="document">

        <div class="modal-content">
            <div class="modal-header" style="border-width: 0px">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
            </div>
            <div class="modal-body" id="printable">

            </div>
            <div class="modal-footer" style="border-width: 0px">
                <button type="button" id="printButton" title="" class="btn btn-default" onclick="editStreetPrintPicture('#printable')">Печать</button>
            </div>

        </div>
    </div>
</div>  

